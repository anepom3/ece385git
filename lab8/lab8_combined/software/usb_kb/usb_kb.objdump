
usb_kb.elf:     file format elf32-littlenios2
usb_kb.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000230

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00012608 memsz 0x00012608 flags r-x
    LOAD off    0x00013628 vaddr 0x08012628 paddr 0x08014114 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00015c00 vaddr 0x08015c00 paddr 0x08015c00 align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011920  08000230  08000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000ad8  08011b50  08011b50  00012b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  08012628  08014114  00013628  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  08015c00  08015c00  00015c00  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00015114  2**0
                  CONTENTS
  7 .sdram        00000000  08015d64  08015d64  00015114  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00015114  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000f18  00000000  00000000  00015138  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00023740  00000000  00000000  00016050  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000090d7  00000000  00000000  00039790  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b8a1  00000000  00000000  00042867  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002388  00000000  00000000  0004e108  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003a11  00000000  00000000  00050490  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001786c  00000000  00000000  00053ea1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0006b710  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018d0  00000000  00000000  0006b750  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000703be  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000703c1  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000703cd  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000703ce  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000703cf  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000703d3  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000703d7  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000703db  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000703e6  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000703f1  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  000703fc  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000033  00000000  00000000  00070407  2**0
                  CONTENTS, READONLY
 30 .jdi          000067eb  00000000  00000000  0007043a  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00072654  00000000  00000000  00076c25  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000230 l    d  .text	00000000 .text
08011b50 l    d  .rodata	00000000 .rodata
08012628 l    d  .rwdata	00000000 .rwdata
08015c00 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
08015d64 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_kb_bsp//obj/HAL/src/crt0.o
08000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
08015c00 l     O .bss	00000002 ctl_reg.3589
08015c02 l     O .bss	00000002 no_device.3590
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0801236e l     O .rodata	00000010 zeroes.4404
080048c0 l     F .text	000000bc __sbprintf
0801237e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
08004ad0 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08006628 l     F .text	00000008 __fp_unlock
0800663c l     F .text	0000019c __sinit.part.1
080067d8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
08012628 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
08012a6c l     O .rwdata	00000020 lc_ctype_charset
08012a4c l     O .rwdata	00000020 lc_message_charset
08012a8c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
080123b0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
08009cac l     F .text	000000fc __sprint_r.part.0
080124d4 l     O .rodata	00000010 zeroes.4349
0800b2e8 l     F .text	000000bc __sbprintf
080124e4 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0800f330 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800f444 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800f470 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0800f564 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800f64c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800f738 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0800f914 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08014104 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0800fbb8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0800fcf4 l     F .text	00000034 alt_dev_reg
08013074 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0800ffd0 l     F .text	0000020c altera_avalon_jtag_uart_irq
080101dc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08010ab8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08010f18 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08011078 l     F .text	0000003c alt_get_errno
080110b4 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08015c38 g     O .bss	00000004 alt_instruction_exception_handler
080092f0 g     F .text	00000074 _mprec_log10
080093dc g     F .text	0000008c __any_on
0800b89c g     F .text	00000054 _isatty_r
080123bc g     O .rodata	00000028 __mprec_tinytens
0800f850 g     F .text	0000007c alt_main
0800245c g     F .text	000000c0 _puts_r
08015c64 g     O .bss	00000100 alt_irq
0800b8f0 g     F .text	00000060 _lseek_r
08014114 g       *ABS*	00000000 __flash_rwdata_start
0800dd08 g     F .text	00000088 .hidden __eqdf2
08015d64 g       *ABS*	00000000 __alt_heap_start
08002420 g     F .text	0000003c printf
0800bb08 g     F .text	0000009c _wcrtomb_r
08009b6c g     F .text	0000005c __sseek
08006988 g     F .text	00000010 __sinit
0800b9b0 g     F .text	00000140 __swbuf_r
0800745c g     F .text	0000007c _setlocale_r
080067e0 g     F .text	00000078 __sfmoreglue
0800f8f0 g     F .text	00000024 __malloc_unlock
080022f0 g     F .text	00000080 UsbGetRetryCnt
0800812c g     F .text	0000015c memmove
0800026c g     F .text	00000088 IO_init
08006970 g     F .text	00000018 _cleanup
080083b0 g     F .text	000000a8 _Balloc
0800dd90 g     F .text	000000dc .hidden __gtdf2
080114a0 g     F .text	00000024 altera_nios2_gen2_irq_init
08000000 g     F .entry	0000000c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
0800b840 g     F .text	0000005c _fstat_r
08015c1c g     O .bss	00000004 errno
08009ae8 g     F .text	00000008 __seofread
08015c24 g     O .bss	00000004 alt_argv
0801c0d4 g       *ABS*	00000000 _gp
0800fb88 g     F .text	00000030 usleep
08012ef4 g     O .rwdata	00000180 alt_fd_list
080114c4 g     F .text	00000090 alt_find_dev
08007fe4 g     F .text	00000148 memcpy
08006630 g     F .text	0000000c _cleanup_r
0800f148 g     F .text	000000dc .hidden __floatsidf
08010ffc g     F .text	0000007c alt_io_redirect
0800de6c g     F .text	000000f4 .hidden __ltdf2
08011b50 g       *ABS*	00000000 __DTOR_END__
0800251c g     F .text	00000014 puts
08011720 g     F .text	0000009c alt_exception_cause_generated_bad_addr
080099cc g     F .text	00000074 __fpclassifyd
0800924c g     F .text	000000a4 __ratio
0800b2cc g     F .text	0000001c __vfiprintf_internal
080103d4 g     F .text	0000021c altera_avalon_jtag_uart_read
080023f0 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0800c9a8 g     F .text	00000064 .hidden __udivsi3
0800f5a0 g     F .text	000000ac isatty
0801240c g     O .rodata	000000c8 __mprec_tens
080074d8 g     F .text	0000000c __locale_charset
08015c18 g     O .bss	00000004 __malloc_top_pad
0800197c g     F .text	00000268 UsbGetConfigDesc2
080140dc g     O .rwdata	00000004 __mb_cur_max
08007508 g     F .text	0000000c _localeconv_r
080087e4 g     F .text	0000003c __i2b
08006e0c g     F .text	000004c8 __sfvwrite_r
08009a40 g     F .text	00000054 _sbrk_r
0800b950 g     F .text	00000060 _read_r
080140fc g     O .rwdata	00000004 alt_max_fd
0800b534 g     F .text	000000f0 _fclose_r
080065f8 g     F .text	00000030 fflush
08015c14 g     O .bss	00000004 __malloc_max_sbrked_mem
0800ca8c g     F .text	000008ac .hidden __adddf3
08008ff4 g     F .text	0000010c __b2d
0800c2ec g     F .text	000005c4 .hidden __umoddi3
0800f774 g     F .text	000000dc lseek
080140d4 g     O .rwdata	00000004 _global_impure_ptr
08009468 g     F .text	00000564 _realloc_r
08015d64 g       *ABS*	00000000 __bss_end
08010e28 g     F .text	000000f0 alt_iic_isr_register
08011398 g     F .text	00000108 alt_tick
0800bcf0 g     F .text	000005fc .hidden __udivdi3
0800b79c g     F .text	00000024 _fputwc_r
080123e4 g     O .rodata	00000028 __mprec_bigtens
080085c8 g     F .text	00000104 __s2b
0800f224 g     F .text	000000a8 .hidden __floatunsidf
08008d34 g     F .text	00000060 __mcmp
080013cc g     F .text	00000100 UsbSetAddress
080069a8 g     F .text	00000018 __fp_lock_all
08010ddc g     F .text	0000004c alt_ic_irq_enabled
080112fc g     F .text	0000009c alt_alarm_stop
08015c2c g     O .bss	00000004 alt_irq_active
080000fc g     F .exceptions	000000d4 alt_irq_handler
08012ecc g     O .rwdata	00000028 alt_dev_null
08010a98 g     F .text	00000020 alt_dcache_flush_all
080086cc g     F .text	00000068 __hi0bits
08000370 g     F .text	00000090 IO_read
0800f0c8 g     F .text	00000080 .hidden __fixdfsi
08014114 g       *ABS*	00000000 __ram_rwdata_end
080140f4 g     O .rwdata	00000008 alt_dev_list
0800fbf4 g     F .text	00000100 write
08012628 g       *ABS*	00000000 __ram_rodata_end
0800f4ac g     F .text	000000b8 fstat
0800de6c g     F .text	000000f4 .hidden __ledf2
08002370 g     F .text	00000080 UsbPrintMem
08008aac g     F .text	00000140 __pow5mult
08009dc0 g     F .text	0000150c ___vfiprintf_internal_r
08015c0c g     O .bss	00000004 __nlocale_changed
0800ca0c g     F .text	00000058 .hidden __umodsi3
08015d64 g       *ABS*	00000000 end
0800ff10 g     F .text	000000c0 altera_avalon_jtag_uart_init
080001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
08011b50 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
0800f2cc g     F .text	00000064 .hidden __clzsi2
080105f0 g     F .text	00000224 altera_avalon_jtag_uart_write
08006998 g     F .text	00000004 __sfp_lock_acquire
08007f00 g     F .text	000000e4 memchr
080025c8 g     F .text	000022dc ___vfprintf_internal_r
08001ce4 g     F .text	00000100 UsbClassRequest
08006afc g     F .text	00000310 _free_r
080074e4 g     F .text	00000010 __locale_mb_cur_max
0801199c g     F .text	00000180 __call_exitprocs
08015c08 g     O .bss	00000004 __mlocale_changed
080140e0 g     O .rwdata	00000004 __malloc_sbrk_base
08000230 g     F .text	0000003c _start
08015c30 g     O .bss	00000004 _alt_tick_rate
08008bec g     F .text	00000148 __lshift
08015c34 g     O .bss	00000004 _alt_nticks
0800f950 g     F .text	00000104 read
0800fd60 g     F .text	0000004c alt_sys_init
08011884 g     F .text	00000118 __register_exitproc
08008820 g     F .text	0000028c __multiply
0801027c g     F .text	00000068 altera_avalon_jtag_uart_close
0800ca64 g     F .text	00000028 .hidden __mulsi3
08012628 g       *ABS*	00000000 __ram_rwdata_start
08011b50 g       *ABS*	00000000 __ram_rodata_start
08015c3c g     O .bss	00000028 __malloc_current_mallinfo
08009100 g     F .text	0000014c __d2b
080014cc g     F .text	00000148 UsbGetDeviceDesc1
0800fdac g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0801165c g     F .text	000000c4 alt_get_fd
08010940 g     F .text	00000158 alt_busy_sleep
0800b404 g     F .text	00000054 _close_r
08011808 g     F .text	0000007c memcmp
0800fe6c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08015d64 g       *ABS*	00000000 __alt_stack_base
0800febc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0800497c g     F .text	00000154 __swsetup_r
0800d338 g     F .text	000009d0 .hidden __divdf3
08006858 g     F .text	00000118 __sfp
08009364 g     F .text	00000078 __copybits
08012ac4 g     O .rwdata	00000408 __malloc_av_
080069a4 g     F .text	00000004 __sinit_lock_release
0800df60 g     F .text	0000086c .hidden __muldf3
08009a94 g     F .text	00000054 __sread
0800226c g     F .text	00000084 UsbWaitTDListDone
08011554 g     F .text	00000108 alt_find_file
08010af4 g     F .text	000000a4 alt_dev_llist_insert
0800f8cc g     F .text	00000024 __malloc_lock
0800fad8 g     F .text	000000b0 sbrk
0800659c g     F .text	0000005c _fflush_r
0800b458 g     F .text	000000dc _calloc_r
08015c00 g       *ABS*	00000000 __bss_start
08008288 g     F .text	00000128 memset
08000400 g     F .text	00000dc4 main
08015c28 g     O .bss	00000004 alt_envp
08015c10 g     O .bss	00000004 __malloc_max_total_mem
0800fe0c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08001be4 g     F .text	00000100 UsbSetConfig
0800baf0 g     F .text	00000018 __swbuf
08009bc8 g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
0800b624 g     F .text	00000014 fclose
08004cf8 g     F .text	00001688 _dtoa_r
080076f4 g     F .text	0000080c _malloc_r
0800bc64 g     F .text	00000030 __ascii_wctomb
08014100 g     O .rwdata	00000004 alt_errno
080072d4 g     F .text	000000c4 _fwalk
0800c8b0 g     F .text	00000084 .hidden __divsi3
080069d8 g     F .text	00000124 _malloc_trim_r
08001de4 g     F .text	00000148 UsbGetHidDesc
08011b50 g       *ABS*	00000000 __CTOR_END__
08009bd0 g     F .text	000000dc strcmp
08011b50 g       *ABS*	00000000 __flash_rodata_start
08011b50 g       *ABS*	00000000 __DTOR_LIST__
0800dd08 g     F .text	00000088 .hidden __nedf2
08001234 g     F .text	00000064 UsbRead
0800fd28 g     F .text	00000038 alt_irq_init
0800fa54 g     F .text	00000084 alt_release_fd
080124f4 g     O .rodata	00000100 .hidden __clz_tab
08015c04 g     O .bss	00000004 _PathLocale
080117bc g     F .text	00000014 atexit
0800b3a4 g     F .text	00000060 _write_r
08007514 g     F .text	00000018 setlocale
080140d8 g     O .rwdata	00000004 _impure_ptr
08015c20 g     O .bss	00000004 alt_argc
08006380 g     F .text	0000021c __sflush_r
08010bf8 g     F .text	00000060 _do_dtors
08007500 g     F .text	00000008 __locale_cjk_lang
08000020 g       .exceptions	00000000 alt_irq_entry
08008f90 g     F .text	00000064 __ulp
080069c0 g     F .text	00000018 __fp_unlock_all
080140ec g     O .rwdata	00000008 alt_fs_list
08001f2c g     F .text	00000340 UsbGetReportDesc
08000020 g       *ABS*	00000000 __ram_exceptions_start
0800752c g     F .text	0000000c localeconv
08010c78 g     F .text	00000050 alt_ic_isr_register
08014114 g       *ABS*	00000000 _edata
08015d64 g       *ABS*	00000000 _end
080011c4 g     F .text	00000070 UsbWrite
0800b638 g     F .text	00000164 __fputwc
08000230 g       *ABS*	00000000 __ram_exceptions_end
080102e4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
08010d50 g     F .text	0000008c alt_ic_irq_disable
08009af0 g     F .text	0000007c __swrite
080140e4 g     O .rwdata	00000004 __malloc_trim_threshold
080074f4 g     F .text	0000000c __locale_msgcharset
080117d0 g     F .text	00000038 exit
08007398 g     F .text	000000c4 _fwalk_reent
08008d94 g     F .text	000001fc __mdiff
0800c934 g     F .text	00000074 .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
0800699c g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
080002f4 g     F .text	0000007c IO_write
08011b1c g     F .text	00000034 _exit
08010814 g     F .text	0000012c alt_alarm_start
08007538 g     F .text	000001bc __smakebuf_r
08002530 g     F .text	00000098 strlen
080111a0 g     F .text	0000015c open
0800dd90 g     F .text	000000dc .hidden __gedf2
080140e8 g     O .rwdata	00000004 __wctomb
08009da8 g     F .text	00000018 __sprint_r
08010c58 g     F .text	00000020 alt_icache_flush_all
08014108 g     O .rwdata	00000004 alt_priority_mask
08010cc8 g     F .text	00000088 alt_ic_irq_enable
080048a4 g     F .text	0000001c __vfprintf_internal
0800bc94 g     F .text	0000005c _wctomb_r
0800e7cc g     F .text	000008fc .hidden __subdf3
08008734 g     F .text	000000b0 __lo0bits
080017ec g     F .text	00000190 UsbGetConfigDesc1
0801410c g     O .rwdata	00000008 alt_alarm_list
08010b98 g     F .text	00000060 _do_ctors
08001298 g     F .text	00000134 UsbSoftReset
0800bba4 g     F .text	000000c0 wcrtomb
0800f36c g     F .text	000000d8 close
08001614 g     F .text	000001d8 UsbGetDeviceDesc2
0800f6b4 g     F .text	00000084 alt_load
0800b7c0 g     F .text	00000080 fputwc
080069a0 g     F .text	00000004 __sinit_lock_acquire
08008480 g     F .text	00000148 __multadd
08008458 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08408c14 	ori	at,at,560
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001d00 	call	80001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0fffb17 	ldw	r3,-20(fp)
 8000130:	e0bffc17 	ldw	r2,-16(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001426 	beq	r2,zero,800018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	00820074 	movhi	r2,2049
 8000140:	10971904 	addi	r2,r2,23652
 8000144:	e0fffd17 	ldw	r3,-12(fp)
 8000148:	180690fa 	slli	r3,r3,3
 800014c:	10c5883a 	add	r2,r2,r3
 8000150:	10c00017 	ldw	r3,0(r2)
 8000154:	00820074 	movhi	r2,2049
 8000158:	10971904 	addi	r2,r2,23652
 800015c:	e13ffd17 	ldw	r4,-12(fp)
 8000160:	200890fa 	slli	r4,r4,3
 8000164:	1105883a 	add	r2,r2,r4
 8000168:	10800104 	addi	r2,r2,4
 800016c:	10800017 	ldw	r2,0(r2)
 8000170:	1009883a 	mov	r4,r2
 8000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800017c:	0005313a 	rdctl	r2,ipending
 8000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000184:	e0bfff17 	ldw	r2,-4(fp)
 8000188:	00000706 	br	80001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800018c:	e0bffc17 	ldw	r2,-16(fp)
 8000190:	1085883a 	add	r2,r2,r2
 8000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000198:	e0bffd17 	ldw	r2,-12(fp)
 800019c:	10800044 	addi	r2,r2,1
 80001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a4:	003fe106 	br	800012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 80001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80001ac:	e0bffb17 	ldw	r2,-20(fp)
 80001b0:	103fdb1e 	bne	r2,zero,8000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001b4:	0001883a 	nop
}
 80001b8:	0001883a 	nop
 80001bc:	e037883a 	mov	sp,fp
 80001c0:	dfc00117 	ldw	ra,4(sp)
 80001c4:	df000017 	ldw	fp,0(sp)
 80001c8:	dec00204 	addi	sp,sp,8
 80001cc:	f800283a 	ret

080001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001d0:	defffb04 	addi	sp,sp,-20
 80001d4:	dfc00415 	stw	ra,16(sp)
 80001d8:	df000315 	stw	fp,12(sp)
 80001dc:	df000304 	addi	fp,sp,12
 80001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 80001e4:	00bfffc4 	movi	r2,-1
 80001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 80001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80001f0:	d0a6d917 	ldw	r2,-25756(gp)
 80001f4:	10000726 	beq	r2,zero,8000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 80001f8:	d0a6d917 	ldw	r2,-25756(gp)
 80001fc:	e0fffd17 	ldw	r3,-12(fp)
 8000200:	e1bffe17 	ldw	r6,-8(fp)
 8000204:	e17fff17 	ldw	r5,-4(fp)
 8000208:	1809883a 	mov	r4,r3
 800020c:	103ee83a 	callr	r2
 8000210:	00000206 	br	800021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 8000218:	0005883a 	mov	r2,zero
}
 800021c:	e037883a 	mov	sp,fp
 8000220:	dfc00117 	ldw	ra,4(sp)
 8000224:	df000017 	ldw	fp,0(sp)
 8000228:	dec00204 	addi	sp,sp,8
 800022c:	f800283a 	ret

Disassembly of section .text:

08000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000230:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 8000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000238:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 800023c:	d6b03514 	ori	gp,gp,49364
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000240:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 8000244:	10970014 	ori	r2,r2,23552

    movhi r3, %hi(__bss_end)
 8000248:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 800024c:	18d75914 	ori	r3,r3,23908

    beq r2, r3, 1f
 8000250:	10c00326 	beq	r2,r3,8000260 <_start+0x30>

0:
    stw zero, (r2)
 8000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800025c:	10fffd36 	bltu	r2,r3,8000254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000260:	800f6b40 	call	800f6b4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000264:	800f8500 	call	800f850 <alt_main>

08000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000268:	003fff06 	br	8000268 <__alt_data_end+0xfc000268>

0800026c <IO_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void IO_init(void)
{
 800026c:	deffff04 	addi	sp,sp,-4
 8000270:	df000015 	stw	fp,0(sp)
 8000274:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
 8000278:	00800804 	movi	r2,32
 800027c:	00c00044 	movi	r3,1
 8000280:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
 8000284:	00800c04 	movi	r2,48
 8000288:	00c00044 	movi	r3,1
 800028c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
 8000290:	00801404 	movi	r2,80
 8000294:	00c00044 	movi	r3,1
 8000298:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
 800029c:	00801004 	movi	r2,64
 80002a0:	00c00044 	movi	r3,1
 80002a4:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
 80002a8:	00801c04 	movi	r2,112
 80002ac:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
 80002b0:	00801804 	movi	r2,96
 80002b4:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
 80002b8:	00800c04 	movi	r2,48
 80002bc:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
 80002c0:	00800804 	movi	r2,32
 80002c4:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
 80002c8:	00800804 	movi	r2,32
 80002cc:	00c00044 	movi	r3,1
 80002d0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
 80002d4:	00800c04 	movi	r2,48
 80002d8:	00c00044 	movi	r3,1
 80002dc:	10c00005 	stb	r3,0(r2)
}
 80002e0:	0001883a 	nop
 80002e4:	e037883a 	mov	sp,fp
 80002e8:	df000017 	ldw	fp,0(sp)
 80002ec:	dec00104 	addi	sp,sp,4
 80002f0:	f800283a 	ret

080002f4 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
 80002f4:	defffd04 	addi	sp,sp,-12
 80002f8:	df000215 	stw	fp,8(sp)
 80002fc:	df000204 	addi	fp,sp,8
 8000300:	2007883a 	mov	r3,r4
 8000304:	2805883a 	mov	r2,r5
 8000308:	e0fffe05 	stb	r3,-8(fp)
 800030c:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
		*otg_hpi_r = 1;
 8000310:	00801404 	movi	r2,80
 8000314:	00c00044 	movi	r3,1
 8000318:	10c00005 	stb	r3,0(r2)
		*otg_hpi_data = Data;
 800031c:	00801804 	movi	r2,96
 8000320:	e0ffff0b 	ldhu	r3,-4(fp)
 8000324:	10c00015 	stw	r3,0(r2)
		*otg_hpi_address = Address;
 8000328:	00801c04 	movi	r2,112
 800032c:	e0fffe03 	ldbu	r3,-8(fp)
 8000330:	10c00015 	stw	r3,0(r2)
		*otg_hpi_cs = 0;
 8000334:	00800c04 	movi	r2,48
 8000338:	10000005 	stb	zero,0(r2)
		*otg_hpi_w = 0;
 800033c:	00801004 	movi	r2,64
 8000340:	10000005 	stb	zero,0(r2)
		*otg_hpi_w = 1;
 8000344:	00801004 	movi	r2,64
 8000348:	00c00044 	movi	r3,1
 800034c:	10c00005 	stb	r3,0(r2)
		*otg_hpi_cs = 1;
 8000350:	00800c04 	movi	r2,48
 8000354:	00c00044 	movi	r3,1
 8000358:	10c00005 	stb	r3,0(r2)
}
 800035c:	0001883a 	nop
 8000360:	e037883a 	mov	sp,fp
 8000364:	df000017 	ldw	fp,0(sp)
 8000368:	dec00104 	addi	sp,sp,4
 800036c:	f800283a 	ret

08000370 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
 8000370:	defffc04 	addi	sp,sp,-16
 8000374:	dfc00315 	stw	ra,12(sp)
 8000378:	df000215 	stw	fp,8(sp)
 800037c:	df000204 	addi	fp,sp,8
 8000380:	2005883a 	mov	r2,r4
 8000384:	e0bfff05 	stb	r2,-4(fp)
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
		//printf("%x\n",temp);
		// return temp;
		*otg_hpi_w = 1;
 8000388:	00801004 	movi	r2,64
 800038c:	00c00044 	movi	r3,1
 8000390:	10c00005 	stb	r3,0(r2)
		*otg_hpi_address = Address;
 8000394:	00801c04 	movi	r2,112
 8000398:	e0ffff03 	ldbu	r3,-4(fp)
 800039c:	10c00015 	stw	r3,0(r2)
		*otg_hpi_cs = 0;
 80003a0:	00800c04 	movi	r2,48
 80003a4:	10000005 	stb	zero,0(r2)
		*otg_hpi_r = 0;
 80003a8:	00801404 	movi	r2,80
 80003ac:	10000005 	stb	zero,0(r2)
		temp = *otg_hpi_data;
 80003b0:	00801804 	movi	r2,96
 80003b4:	10800017 	ldw	r2,0(r2)
 80003b8:	e0bffe0d 	sth	r2,-8(fp)
		printf("%x read from IO\n",temp);
 80003bc:	e0bffe0b 	ldhu	r2,-8(fp)
 80003c0:	100b883a 	mov	r5,r2
 80003c4:	01020074 	movhi	r4,2049
 80003c8:	2106d404 	addi	r4,r4,6992
 80003cc:	80024200 	call	8002420 <printf>

		*otg_hpi_r = 1;
 80003d0:	00801404 	movi	r2,80
 80003d4:	00c00044 	movi	r3,1
 80003d8:	10c00005 	stb	r3,0(r2)
		*otg_hpi_cs = 1;
 80003dc:	00800c04 	movi	r2,48
 80003e0:	00c00044 	movi	r3,1
 80003e4:	10c00005 	stb	r3,0(r2)
		return temp;
 80003e8:	e0bffe0b 	ldhu	r2,-8(fp)

}
 80003ec:	e037883a 	mov	sp,fp
 80003f0:	dfc00117 	ldw	ra,4(sp)
 80003f4:	df000017 	ldw	fp,0(sp)
 80003f8:	dec00204 	addi	sp,sp,8
 80003fc:	f800283a 	ret

08000400 <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
 8000400:	defff904 	addi	sp,sp,-28
 8000404:	dfc00615 	stw	ra,24(sp)
 8000408:	df000515 	stw	fp,20(sp)
 800040c:	df000504 	addi	fp,sp,20
	IO_init();
 8000410:	800026c0 	call	800026c <IO_init>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
 8000414:	e03ffc0d 	sth	zero,-16(fp)
	int keycode = 0;
 8000418:	e03ffd15 	stw	zero,-12(fp)
	alt_u8 toggle = 0;
 800041c:	e03ffb85 	stb	zero,-18(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

	printf("USB keyboard setup...\n\n");
 8000420:	01020074 	movhi	r4,2049
 8000424:	2106d904 	addi	r4,r4,7012
 8000428:	800251c0 	call	800251c <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
 800042c:	80012980 	call	8001298 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
 8000430:	000b883a 	mov	r5,zero
 8000434:	01005104 	movi	r4,324
 8000438:	80011c40 	call	80011c4 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
 800043c:	017fffd4 	movui	r5,65535
 8000440:	01302414 	movui	r4,49296
 8000444:	80011c40 	call	80011c4 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
 8000448:	01409604 	movi	r5,600
 800044c:	01006d04 	movi	r4,436
 8000450:	80011c40 	call	80011c4 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
 8000454:	00811004 	movi	r2,1088
 8000458:	e0bffb0d 	sth	r2,-20(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
 800045c:	e0bffb0b 	ldhu	r2,-20(fp)
 8000460:	100b883a 	mov	r5,r2
 8000464:	01005084 	movi	r4,322
 8000468:	80011c40 	call	80011c4 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
 800046c:	00808404 	movi	r2,528
 8000470:	e0bffe0d 	sth	r2,-8(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
 8000474:	e0bffe0b 	ldhu	r2,-8(fp)
 8000478:	100b883a 	mov	r5,r2
 800047c:	01302314 	movui	r4,49292
 8000480:	80011c40 	call	80011c4 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
 8000484:	000b883a 	mov	r5,zero
 8000488:	01007104 	movi	r4,452
 800048c:	80011c40 	call	80011c4 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
 8000490:	000b883a 	mov	r5,zero
 8000494:	01007184 	movi	r4,454
 8000498:	80011c40 	call	80011c4 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
 800049c:	000b883a 	mov	r5,zero
 80004a0:	01007204 	movi	r4,456
 80004a4:	80011c40 	call	80011c4 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
 80004a8:	000b883a 	mov	r5,zero
 80004ac:	01007284 	movi	r4,458
 80004b0:	80011c40 	call	80011c4 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
 80004b4:	000b883a 	mov	r5,zero
 80004b8:	01007304 	movi	r4,460
 80004bc:	80011c40 	call	80011c4 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
 80004c0:	000b883a 	mov	r5,zero
 80004c4:	01007384 	movi	r4,462
 80004c8:	80011c40 	call	80011c4 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
 80004cc:	000b883a 	mov	r5,zero
 80004d0:	01007404 	movi	r4,464
 80004d4:	80011c40 	call	80011c4 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
 80004d8:	000b883a 	mov	r5,zero
 80004dc:	01007484 	movi	r4,466
 80004e0:	80011c40 	call	80011c4 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
 80004e4:	000b883a 	mov	r5,zero
 80004e8:	01007504 	movi	r4,468
 80004ec:	80011c40 	call	80011c4 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
 80004f0:	000b883a 	mov	r5,zero
 80004f4:	01007584 	movi	r4,470
 80004f8:	80011c40 	call	80011c4 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
 80004fc:	000b883a 	mov	r5,zero
 8000500:	01007604 	movi	r4,472
 8000504:	80011c40 	call	80011c4 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
 8000508:	000b883a 	mov	r5,zero
 800050c:	01007684 	movi	r4,474
 8000510:	80011c40 	call	80011c4 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
 8000514:	000b883a 	mov	r5,zero
 8000518:	01007704 	movi	r4,476
 800051c:	80011c40 	call	80011c4 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
 8000520:	000b883a 	mov	r5,zero
 8000524:	01007784 	movi	r4,478
 8000528:	80011c40 	call	80011c4 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
 800052c:	01401c84 	movi	r5,114
 8000530:	01007084 	movi	r4,450
 8000534:	80011c40 	call	80011c4 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
 8000538:	01738054 	movui	r5,52737
 800053c:	01000044 	movi	r4,1
 8000540:	80002f40 	call	80002f4 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
 8000544:	00000406 	br	8000558 <main+0x158>
	{
		printf ("This line is %d.\n", __LINE__);
 8000548:	01401904 	movi	r5,100
 800054c:	01020074 	movhi	r4,2049
 8000550:	2106df04 	addi	r4,r4,7036
 8000554:	80024200 	call	8002420 <printf>
	UsbWrite(COMM_R12,0x0000);  //r1
	UsbWrite(COMM_R13,0x0000);  //r1
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
 8000558:	010000c4 	movi	r4,3
 800055c:	80003700 	call	8000370 <IO_read>
 8000560:	10bfffcc 	andi	r2,r2,65535
 8000564:	103ff826 	beq	r2,zero,8000548 <__alt_data_end+0xfc000548>
	{
		printf ("This line is %d.\n", __LINE__);
	}
	printf ("This line is %d.\n", __LINE__);
 8000568:	01401984 	movi	r5,102
 800056c:	01020074 	movhi	r4,2049
 8000570:	2106df04 	addi	r4,r4,7036
 8000574:	80024200 	call	8002420 <printf>
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
 8000578:	0001883a 	nop
 800057c:	01000044 	movi	r4,1
 8000580:	80003700 	call	8000370 <IO_read>
 8000584:	10bfffcc 	andi	r2,r2,65535
 8000588:	1083fb58 	cmpnei	r2,r2,4077
 800058c:	10000826 	beq	r2,zero,80005b0 <main+0x1b0>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
 8000590:	01000044 	movi	r4,1
 8000594:	80003700 	call	8000370 <IO_read>
 8000598:	10bfffcc 	andi	r2,r2,65535
 800059c:	100b883a 	mov	r5,r2
 80005a0:	01020074 	movhi	r4,2049
 80005a4:	2106e404 	addi	r4,r4,7056
 80005a8:	80024200 	call	8002420 <printf>
		goto USB_HOT_PLUG;
 80005ac:	003f9f06 	br	800042c <__alt_data_end+0xfc00042c>
	}
	// STEP 1b end

	printf("STEP 1 Complete");
 80005b0:	01020074 	movhi	r4,2049
 80005b4:	2106ed04 	addi	r4,r4,7092
 80005b8:	80024200 	call	8002420 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
 80005bc:	01401d04 	movi	r5,116
 80005c0:	01007084 	movi	r4,450
 80005c4:	80011c40 	call	80011c4 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
 80005c8:	01400f04 	movi	r5,60
 80005cc:	01007104 	movi	r4,452
 80005d0:	80011c40 	call	80011c4 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
 80005d4:	000b883a 	mov	r5,zero
 80005d8:	01007184 	movi	r4,454
 80005dc:	80011c40 	call	80011c4 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
 80005e0:	000b883a 	mov	r5,zero
 80005e4:	01007204 	movi	r4,456
 80005e8:	80011c40 	call	80011c4 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
 80005ec:	000b883a 	mov	r5,zero
 80005f0:	01007284 	movi	r4,458
 80005f4:	80011c40 	call	80011c4 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
 80005f8:	000b883a 	mov	r5,zero
 80005fc:	01007304 	movi	r4,460
 8000600:	80011c40 	call	80011c4 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
 8000604:	000b883a 	mov	r5,zero
 8000608:	01007384 	movi	r4,462
 800060c:	80011c40 	call	80011c4 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
 8000610:	000b883a 	mov	r5,zero
 8000614:	01007404 	movi	r4,464
 8000618:	80011c40 	call	80011c4 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
 800061c:	000b883a 	mov	r5,zero
 8000620:	01007484 	movi	r4,466
 8000624:	80011c40 	call	80011c4 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
 8000628:	000b883a 	mov	r5,zero
 800062c:	01007504 	movi	r4,468
 8000630:	80011c40 	call	80011c4 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
 8000634:	000b883a 	mov	r5,zero
 8000638:	01007584 	movi	r4,470
 800063c:	80011c40 	call	80011c4 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
 8000640:	000b883a 	mov	r5,zero
 8000644:	01007604 	movi	r4,472
 8000648:	80011c40 	call	80011c4 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
 800064c:	000b883a 	mov	r5,zero
 8000650:	01007684 	movi	r4,474
 8000654:	80011c40 	call	80011c4 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
 8000658:	000b883a 	mov	r5,zero
 800065c:	01007704 	movi	r4,476
 8000660:	80011c40 	call	80011c4 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
 8000664:	000b883a 	mov	r5,zero
 8000668:	01007784 	movi	r4,478
 800066c:	80011c40 	call	80011c4 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
 8000670:	01738054 	movui	r5,52737
 8000674:	01000044 	movi	r4,1
 8000678:	80002f40 	call	80002f4 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
 800067c:	0001883a 	nop
 8000680:	01000044 	movi	r4,1
 8000684:	80003700 	call	8000370 <IO_read>
 8000688:	10bfffcc 	andi	r2,r2,65535
 800068c:	1083fb58 	cmpnei	r2,r2,4077
 8000690:	10000826 	beq	r2,zero,80006b4 <main+0x2b4>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
 8000694:	01000044 	movi	r4,1
 8000698:	80003700 	call	8000370 <IO_read>
 800069c:	10bfffcc 	andi	r2,r2,65535
 80006a0:	100b883a 	mov	r5,r2
 80006a4:	01020074 	movhi	r4,2049
 80006a8:	2106e404 	addi	r4,r4,7056
 80006ac:	80024200 	call	8002420 <printf>
		goto USB_HOT_PLUG;
 80006b0:	003f5e06 	br	800042c <__alt_data_end+0xfc00042c>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
 80006b4:	00b02284 	movi	r2,-16246
 80006b8:	d0a6cb0d 	sth	r2,-25812(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
 80006bc:	008c0004 	movi	r2,12288
 80006c0:	d0a6cb8d 	sth	r2,-25810(gp)
	fs_device = A_DP_STAT;
 80006c4:	00880004 	movi	r2,8192
 80006c8:	e0bffc0d 	sth	r2,-16(fp)
	usb_ctl_val = UsbRead(ctl_reg);
 80006cc:	d0a6cb0b 	ldhu	r2,-25812(gp)
 80006d0:	10bfffcc 	andi	r2,r2,65535
 80006d4:	1009883a 	mov	r4,r2
 80006d8:	80012340 	call	8001234 <UsbRead>
 80006dc:	e0bffb0d 	sth	r2,-20(fp)

	if (!(usb_ctl_val & no_device))
 80006e0:	d0a6cb8b 	ldhu	r2,-25810(gp)
 80006e4:	e0fffb0b 	ldhu	r3,-20(fp)
 80006e8:	1884703a 	and	r2,r3,r2
 80006ec:	10bfffcc 	andi	r2,r2,65535
 80006f0:	1000351e 	bne	r2,zero,80007c8 <main+0x3c8>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
 80006f4:	e03ffbc5 	stb	zero,-17(fp)
 80006f8:	00000f06 	br	8000738 <main+0x338>
		{
			usleep(5*1000);
 80006fc:	0104e204 	movi	r4,5000
 8000700:	800fb880 	call	800fb88 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
 8000704:	d0a6cb0b 	ldhu	r2,-25812(gp)
 8000708:	10bfffcc 	andi	r2,r2,65535
 800070c:	1009883a 	mov	r4,r2
 8000710:	80012340 	call	8001234 <UsbRead>
 8000714:	e0bffb0d 	sth	r2,-20(fp)
			if(usb_ctl_val & no_device) break;
 8000718:	d0a6cb8b 	ldhu	r2,-25810(gp)
 800071c:	e0fffb0b 	ldhu	r3,-20(fp)
 8000720:	1884703a 	and	r2,r3,r2
 8000724:	10bfffcc 	andi	r2,r2,65535
 8000728:	1000071e 	bne	r2,zero,8000748 <main+0x348>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
 800072c:	e0bffbc3 	ldbu	r2,-17(fp)
 8000730:	10800044 	addi	r2,r2,1
 8000734:	e0bffbc5 	stb	r2,-17(fp)
 8000738:	e0bffbc3 	ldbu	r2,-17(fp)
 800073c:	10800170 	cmpltui	r2,r2,5
 8000740:	103fee1e 	bne	r2,zero,80006fc <__alt_data_end+0xfc0006fc>
 8000744:	00000106 	br	800074c <main+0x34c>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
 8000748:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
 800074c:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8000750:	e0fffb0b 	ldhu	r3,-20(fp)
 8000754:	1884703a 	and	r2,r3,r2
 8000758:	10bfffcc 	andi	r2,r2,65535
 800075c:	1000261e 	bne	r2,zero,80007f8 <main+0x3f8>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
 8000760:	01020074 	movhi	r4,2049
 8000764:	2106f104 	addi	r4,r4,7108
 8000768:	800251c0 	call	800251c <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
 800076c:	01020074 	movhi	r4,2049
 8000770:	2106fb04 	addi	r4,r4,7148
 8000774:	800251c0 	call	800251c <puts>
			while (!(usb_ctl_val & no_device))
 8000778:	00000d06 	br	80007b0 <main+0x3b0>
			{
				usb_ctl_val = UsbRead(ctl_reg);
 800077c:	d0a6cb0b 	ldhu	r2,-25812(gp)
 8000780:	10bfffcc 	andi	r2,r2,65535
 8000784:	1009883a 	mov	r4,r2
 8000788:	80012340 	call	8001234 <UsbRead>
 800078c:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device)
 8000790:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8000794:	e0fffb0b 	ldhu	r3,-20(fp)
 8000798:	1884703a 	and	r2,r3,r2
 800079c:	10bfffcc 	andi	r2,r2,65535
 80007a0:	10000126 	beq	r2,zero,80007a8 <main+0x3a8>
					goto USB_HOT_PLUG;
 80007a4:	003f2106 	br	800042c <__alt_data_end+0xfc00042c>

				usleep(2000);
 80007a8:	0101f404 	movi	r4,2000
 80007ac:	800fb880 	call	800fb88 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
 80007b0:	d0a6cb8b 	ldhu	r2,-25810(gp)
 80007b4:	e0fffb0b 	ldhu	r3,-20(fp)
 80007b8:	1884703a 	and	r2,r3,r2
 80007bc:	10bfffcc 	andi	r2,r2,65535
 80007c0:	103fee26 	beq	r2,zero,800077c <__alt_data_end+0xfc00077c>
 80007c4:	00000c06 	br	80007f8 <main+0x3f8>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
 80007c8:	e0fffb0b 	ldhu	r3,-20(fp)
 80007cc:	e0bffc0b 	ldhu	r2,-16(fp)
 80007d0:	1884703a 	and	r2,r3,r2
 80007d4:	10bfffcc 	andi	r2,r2,65535
 80007d8:	10000426 	beq	r2,zero,80007ec <main+0x3ec>
		{
			printf("[INFO]: full speed device\n");
 80007dc:	01020074 	movhi	r4,2049
 80007e0:	21070704 	addi	r4,r4,7196
 80007e4:	800251c0 	call	800251c <puts>
 80007e8:	00000306 	br	80007f8 <main+0x3f8>
		}
		else
		{
			printf("[INFO]: low speed device\n");
 80007ec:	01020074 	movhi	r4,2049
 80007f0:	21070e04 	addi	r4,r4,7224
 80007f4:	800251c0 	call	800251c <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
 80007f8:	80013cc0 	call	80013cc <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80007fc:	00000306 	br	800080c <main+0x40c>
	{
		UsbSetAddress();
 8000800:	80013cc0 	call	80013cc <UsbSetAddress>
		usleep(10*1000);
 8000804:	0109c404 	movi	r4,10000
 8000808:	800fb880 	call	800fb88 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 800080c:	010000c4 	movi	r4,3
 8000810:	80003700 	call	8000370 <IO_read>
 8000814:	10bfffcc 	andi	r2,r2,65535
 8000818:	1080040c 	andi	r2,r2,16
 800081c:	103ff826 	beq	r2,zero,8000800 <__alt_data_end+0xfc000800>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000820:	800226c0 	call	800226c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
 8000824:	01414184 	movi	r5,1286
 8000828:	01000084 	movi	r4,2
 800082c:	80002f40 	call	80002f4 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8000830:	0009883a 	mov	r4,zero
 8000834:	80003700 	call	8000370 <IO_read>
 8000838:	10bfffcc 	andi	r2,r2,65535
 800083c:	100b883a 	mov	r5,r2
 8000840:	01020074 	movhi	r4,2049
 8000844:	21071504 	addi	r4,r4,7252
 8000848:	80024200 	call	8002420 <printf>

	IO_write(HPI_ADDR,0x0508); // n
 800084c:	01414204 	movi	r5,1288
 8000850:	01000084 	movi	r4,2
 8000854:	80002f40 	call	80002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8000858:	0009883a 	mov	r4,zero
 800085c:	80003700 	call	8000370 <IO_read>
 8000860:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
 8000864:	e0bffb0b 	ldhu	r2,-20(fp)
 8000868:	100b883a 	mov	r5,r2
 800086c:	01020074 	movhi	r4,2049
 8000870:	21072004 	addi	r4,r4,7296
 8000874:	80024200 	call	8002420 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
 8000878:	e0bffb0b 	ldhu	r2,-20(fp)
 800087c:	108000e0 	cmpeqi	r2,r2,3
 8000880:	1000031e 	bne	r2,zero,8000890 <main+0x490>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000884:	80022f00 	call	80022f0 <UsbGetRetryCnt>
 8000888:	e0bffb0d 	sth	r2,-20(fp)

		goto USB_HOT_PLUG;
 800088c:	003ee706 	br	800042c <__alt_data_end+0xfc00042c>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
 8000890:	01020074 	movhi	r4,2049
 8000894:	21072c04 	addi	r4,r4,7344
 8000898:	800251c0 	call	800251c <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
 800089c:	80014cc0 	call	80014cc <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80008a0:	00000306 	br	80008b0 <main+0x4b0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
 80008a4:	80014cc0 	call	80014cc <UsbGetDeviceDesc1>
		usleep(10*1000);
 80008a8:	0109c404 	movi	r4,10000
 80008ac:	800fb880 	call	800fb88 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80008b0:	010000c4 	movi	r4,3
 80008b4:	80003700 	call	8000370 <IO_read>
 80008b8:	10bfffcc 	andi	r2,r2,65535
 80008bc:	1080040c 	andi	r2,r2,16
 80008c0:	103ff826 	beq	r2,zero,80008a4 <__alt_data_end+0xfc0008a4>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 80008c4:	800226c0 	call	800226c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 80008c8:	01414184 	movi	r5,1286
 80008cc:	01000084 	movi	r4,2
 80008d0:	80002f40 	call	80002f4 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
 80008d4:	0009883a 	mov	r4,zero
 80008d8:	80003700 	call	8000370 <IO_read>
 80008dc:	10bfffcc 	andi	r2,r2,65535
 80008e0:	100b883a 	mov	r5,r2
 80008e4:	01020074 	movhi	r4,2049
 80008e8:	21073b04 	addi	r4,r4,7404
 80008ec:	80024200 	call	8002420 <printf>

	IO_write(HPI_ADDR,0x0508);
 80008f0:	01414204 	movi	r5,1288
 80008f4:	01000084 	movi	r4,2
 80008f8:	80002f40 	call	80002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 80008fc:	0009883a 	mov	r4,zero
 8000900:	80003700 	call	8000370 <IO_read>
 8000904:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
 8000908:	e0bffb0b 	ldhu	r2,-20(fp)
 800090c:	100b883a 	mov	r5,r2
 8000910:	01020074 	movhi	r4,2049
 8000914:	21074604 	addi	r4,r4,7448
 8000918:	80024200 	call	8002420 <printf>
	while (usb_ctl_val != 0x03)
 800091c:	e0bffb0b 	ldhu	r2,-20(fp)
 8000920:	108000e0 	cmpeqi	r2,r2,3
 8000924:	1000061e 	bne	r2,zero,8000940 <main+0x540>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000928:	80022f00 	call	80022f0 <UsbGetRetryCnt>
 800092c:	e0bffb0d 	sth	r2,-20(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
 8000930:	01020074 	movhi	r4,2049
 8000934:	21075204 	addi	r4,r4,7496
 8000938:	800251c0 	call	800251c <puts>
		goto USB_HOT_PLUG;
 800093c:	003ebb06 	br	800042c <__alt_data_end+0xfc00042c>
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
 8000940:	01020074 	movhi	r4,2049
 8000944:	21075b04 	addi	r4,r4,7532
 8000948:	800251c0 	call	800251c <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
 800094c:	80016140 	call	8001614 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000950:	00000306 	br	8000960 <main+0x560>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
 8000954:	80016140 	call	8001614 <UsbGetDeviceDesc2>
		usleep(10*1000);
 8000958:	0109c404 	movi	r4,10000
 800095c:	800fb880 	call	800fb88 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000960:	010000c4 	movi	r4,3
 8000964:	80003700 	call	8000370 <IO_read>
 8000968:	10bfffcc 	andi	r2,r2,65535
 800096c:	1080040c 	andi	r2,r2,16
 8000970:	103ff826 	beq	r2,zero,8000954 <__alt_data_end+0xfc000954>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000974:	800226c0 	call	800226c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 8000978:	01414184 	movi	r5,1286
 800097c:	01000084 	movi	r4,2
 8000980:	80002f40 	call	80002f4 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8000984:	0009883a 	mov	r4,zero
 8000988:	80003700 	call	8000370 <IO_read>
 800098c:	10bfffcc 	andi	r2,r2,65535
 8000990:	100b883a 	mov	r5,r2
 8000994:	01020074 	movhi	r4,2049
 8000998:	21073b04 	addi	r4,r4,7404
 800099c:	80024200 	call	8002420 <printf>

	IO_write(HPI_ADDR,0x0508);
 80009a0:	01414204 	movi	r5,1288
 80009a4:	01000084 	movi	r4,2
 80009a8:	80002f40 	call	80002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 80009ac:	0009883a 	mov	r4,zero
 80009b0:	80003700 	call	8000370 <IO_read>
 80009b4:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
 80009b8:	e0bffb0b 	ldhu	r2,-20(fp)
 80009bc:	100b883a 	mov	r5,r2
 80009c0:	01020074 	movhi	r4,2049
 80009c4:	21074604 	addi	r4,r4,7448
 80009c8:	80024200 	call	8002420 <printf>
	while (usb_ctl_val != 0x03)
 80009cc:	e0bffb0b 	ldhu	r2,-20(fp)
 80009d0:	108000e0 	cmpeqi	r2,r2,3
 80009d4:	1000061e 	bne	r2,zero,80009f0 <main+0x5f0>
	{
		usb_ctl_val = UsbGetRetryCnt();
 80009d8:	80022f00 	call	80022f0 <UsbGetRetryCnt>
 80009dc:	e0bffb0d 	sth	r2,-20(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
 80009e0:	01020074 	movhi	r4,2049
 80009e4:	21075204 	addi	r4,r4,7496
 80009e8:	800251c0 	call	800251c <puts>
		goto USB_HOT_PLUG;
 80009ec:	003e8f06 	br	800042c <__alt_data_end+0xfc00042c>
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
 80009f0:	01020074 	movhi	r4,2049
 80009f4:	21076f04 	addi	r4,r4,7612
 80009f8:	800251c0 	call	800251c <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
 80009fc:	80017ec0 	call	80017ec <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000a00:	00000306 	br	8000a10 <main+0x610>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
 8000a04:	80017ec0 	call	80017ec <UsbGetConfigDesc1>
		usleep(10*1000);
 8000a08:	0109c404 	movi	r4,10000
 8000a0c:	800fb880 	call	800fb88 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000a10:	010000c4 	movi	r4,3
 8000a14:	80003700 	call	8000370 <IO_read>
 8000a18:	10bfffcc 	andi	r2,r2,65535
 8000a1c:	1080040c 	andi	r2,r2,16
 8000a20:	103ff826 	beq	r2,zero,8000a04 <__alt_data_end+0xfc000a04>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000a24:	800226c0 	call	800226c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 8000a28:	01414184 	movi	r5,1286
 8000a2c:	01000084 	movi	r4,2
 8000a30:	80002f40 	call	80002f4 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8000a34:	0009883a 	mov	r4,zero
 8000a38:	80003700 	call	8000370 <IO_read>
 8000a3c:	10bfffcc 	andi	r2,r2,65535
 8000a40:	100b883a 	mov	r5,r2
 8000a44:	01020074 	movhi	r4,2049
 8000a48:	21078104 	addi	r4,r4,7684
 8000a4c:	80024200 	call	8002420 <printf>

	IO_write(HPI_ADDR,0x0508);
 8000a50:	01414204 	movi	r5,1288
 8000a54:	01000084 	movi	r4,2
 8000a58:	80002f40 	call	80002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8000a5c:	0009883a 	mov	r4,zero
 8000a60:	80003700 	call	8000370 <IO_read>
 8000a64:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
 8000a68:	e0bffb0b 	ldhu	r2,-20(fp)
 8000a6c:	100b883a 	mov	r5,r2
 8000a70:	01020074 	movhi	r4,2049
 8000a74:	21078c04 	addi	r4,r4,7728
 8000a78:	80024200 	call	8002420 <printf>
	while (usb_ctl_val != 0x03)
 8000a7c:	e0bffb0b 	ldhu	r2,-20(fp)
 8000a80:	108000e0 	cmpeqi	r2,r2,3
 8000a84:	1000061e 	bne	r2,zero,8000aa0 <main+0x6a0>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000a88:	80022f00 	call	80022f0 <UsbGetRetryCnt>
 8000a8c:	e0bffb0d 	sth	r2,-20(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
 8000a90:	01020074 	movhi	r4,2049
 8000a94:	21075204 	addi	r4,r4,7496
 8000a98:	800251c0 	call	800251c <puts>
		goto USB_HOT_PLUG;
 8000a9c:	003e6306 	br	800042c <__alt_data_end+0xfc00042c>
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
 8000aa0:	01020074 	movhi	r4,2049
 8000aa4:	21079804 	addi	r4,r4,7776
 8000aa8:	800251c0 	call	800251c <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
 8000aac:	800197c0 	call	800197c <UsbGetConfigDesc2>

	usleep(100*1000);
 8000ab0:	010000b4 	movhi	r4,2
 8000ab4:	2121a804 	addi	r4,r4,-31072
 8000ab8:	800fb880 	call	800fb88 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000abc:	00000306 	br	8000acc <main+0x6cc>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
 8000ac0:	800197c0 	call	800197c <UsbGetConfigDesc2>
		usleep(10*1000);
 8000ac4:	0109c404 	movi	r4,10000
 8000ac8:	800fb880 	call	800fb88 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000acc:	010000c4 	movi	r4,3
 8000ad0:	80003700 	call	8000370 <IO_read>
 8000ad4:	10bfffcc 	andi	r2,r2,65535
 8000ad8:	1080040c 	andi	r2,r2,16
 8000adc:	103ff826 	beq	r2,zero,8000ac0 <__alt_data_end+0xfc000ac0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000ae0:	800226c0 	call	800226c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 8000ae4:	01414184 	movi	r5,1286
 8000ae8:	01000084 	movi	r4,2
 8000aec:	80002f40 	call	80002f4 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8000af0:	0009883a 	mov	r4,zero
 8000af4:	80003700 	call	8000370 <IO_read>
 8000af8:	10bfffcc 	andi	r2,r2,65535
 8000afc:	100b883a 	mov	r5,r2
 8000b00:	01020074 	movhi	r4,2049
 8000b04:	2107ab04 	addi	r4,r4,7852
 8000b08:	80024200 	call	8002420 <printf>

	IO_write(HPI_ADDR,0x0508);
 8000b0c:	01414204 	movi	r5,1288
 8000b10:	01000084 	movi	r4,2
 8000b14:	80002f40 	call	80002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8000b18:	0009883a 	mov	r4,zero
 8000b1c:	80003700 	call	8000370 <IO_read>
 8000b20:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
 8000b24:	e0bffb0b 	ldhu	r2,-20(fp)
 8000b28:	100b883a 	mov	r5,r2
 8000b2c:	01020074 	movhi	r4,2049
 8000b30:	2107b604 	addi	r4,r4,7896
 8000b34:	80024200 	call	8002420 <printf>
	while (usb_ctl_val != 0x03)
 8000b38:	e0bffb0b 	ldhu	r2,-20(fp)
 8000b3c:	108000e0 	cmpeqi	r2,r2,3
 8000b40:	1000061e 	bne	r2,zero,8000b5c <main+0x75c>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000b44:	80022f00 	call	80022f0 <UsbGetRetryCnt>
 8000b48:	e0bffb0d 	sth	r2,-20(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
 8000b4c:	01020074 	movhi	r4,2049
 8000b50:	21075204 	addi	r4,r4,7496
 8000b54:	800251c0 	call	800251c <puts>
		goto USB_HOT_PLUG;
 8000b58:	003e3406 	br	800042c <__alt_data_end+0xfc00042c>
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
 8000b5c:	01020074 	movhi	r4,2049
 8000b60:	2107c204 	addi	r4,r4,7944
 8000b64:	800251c0 	call	800251c <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
 8000b68:	01415b04 	movi	r5,1388
 8000b6c:	01000084 	movi	r4,2
 8000b70:	80002f40 	call	80002f4 <IO_write>
	code = IO_read(HPI_DATA);
 8000b74:	0009883a 	mov	r4,zero
 8000b78:	80003700 	call	8000370 <IO_read>
 8000b7c:	e0bffe8d 	sth	r2,-6(fp)
	code = code & 0x003;
 8000b80:	e0bffe8b 	ldhu	r2,-6(fp)
 8000b84:	108000cc 	andi	r2,r2,3
 8000b88:	e0bffe8d 	sth	r2,-6(fp)
	printf("\ncode = %x\n", code);
 8000b8c:	e0bffe8b 	ldhu	r2,-6(fp)
 8000b90:	100b883a 	mov	r5,r2
 8000b94:	01020074 	movhi	r4,2049
 8000b98:	2107d504 	addi	r4,r4,8020
 8000b9c:	80024200 	call	8002420 <printf>

	if (code == 0x01)
 8000ba0:	e0bffe8b 	ldhu	r2,-6(fp)
 8000ba4:	10800058 	cmpnei	r2,r2,1
 8000ba8:	1000041e 	bne	r2,zero,8000bbc <main+0x7bc>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
 8000bac:	01020074 	movhi	r4,2049
 8000bb0:	2107d804 	addi	r4,r4,8032
 8000bb4:	800251c0 	call	800251c <puts>
 8000bb8:	00000306 	br	8000bc8 <main+0x7c8>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
 8000bbc:	01020074 	movhi	r4,2049
 8000bc0:	2107e704 	addi	r4,r4,8092
 8000bc4:	800251c0 	call	800251c <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
 8000bc8:	01415d84 	movi	r5,1398
 8000bcc:	01000084 	movi	r4,2
 8000bd0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x073F);
 8000bd4:	0141cfc4 	movi	r5,1855
 8000bd8:	0009883a 	mov	r4,zero
 8000bdc:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x8105);
 8000be0:	01604154 	movui	r5,33029
 8000be4:	0009883a 	mov	r4,zero
 8000be8:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0003);
 8000bec:	014000c4 	movi	r5,3
 8000bf0:	0009883a 	mov	r4,zero
 8000bf4:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);
 8000bf8:	01400204 	movi	r5,8
 8000bfc:	0009883a 	mov	r4,zero
 8000c00:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
 8000c04:	016b0294 	movui	r5,44042
 8000c08:	0009883a 	mov	r4,zero
 8000c0c:	80002f40 	call	80002f4 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
 8000c10:	01415d84 	movi	r5,1398
 8000c14:	01006c04 	movi	r4,432
 8000c18:	80011c40 	call	80011c4 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
 8000c1c:	01415f04 	movi	r5,1404
 8000c20:	01000084 	movi	r4,2
 8000c24:	80002f40 	call	80002f4 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
 8000c28:	0009883a 	mov	r4,zero
 8000c2c:	80003700 	call	8000370 <IO_read>
 8000c30:	e0bfff05 	stb	r2,-4(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
 8000c34:	e0bfff03 	ldbu	r2,-4(fp)
 8000c38:	100b883a 	mov	r5,r2
 8000c3c:	01020074 	movhi	r4,2049
 8000c40:	2107f004 	addi	r4,r4,8128
 8000c44:	80024200 	call	8002420 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
 8000c48:	8001be40 	call	8001be4 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000c4c:	00000306 	br	8000c5c <main+0x85c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
 8000c50:	8001be40 	call	8001be4 <UsbSetConfig>
		usleep(10*1000);
 8000c54:	0109c404 	movi	r4,10000
 8000c58:	800fb880 	call	800fb88 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000c5c:	010000c4 	movi	r4,3
 8000c60:	80003700 	call	8000370 <IO_read>
 8000c64:	10bfffcc 	andi	r2,r2,65535
 8000c68:	1080040c 	andi	r2,r2,16
 8000c6c:	103ff826 	beq	r2,zero,8000c50 <__alt_data_end+0xfc000c50>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000c70:	800226c0 	call	800226c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 8000c74:	01414184 	movi	r5,1286
 8000c78:	01000084 	movi	r4,2
 8000c7c:	80002f40 	call	80002f4 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8000c80:	0009883a 	mov	r4,zero
 8000c84:	80003700 	call	8000370 <IO_read>
 8000c88:	10bfffcc 	andi	r2,r2,65535
 8000c8c:	100b883a 	mov	r5,r2
 8000c90:	01020074 	movhi	r4,2049
 8000c94:	2107fa04 	addi	r4,r4,8168
 8000c98:	80024200 	call	8002420 <printf>

	IO_write(HPI_ADDR,0x0508);
 8000c9c:	01414204 	movi	r5,1288
 8000ca0:	01000084 	movi	r4,2
 8000ca4:	80002f40 	call	80002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8000ca8:	0009883a 	mov	r4,zero
 8000cac:	80003700 	call	8000370 <IO_read>
 8000cb0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
 8000cb4:	e0bffb0b 	ldhu	r2,-20(fp)
 8000cb8:	100b883a 	mov	r5,r2
 8000cbc:	01020074 	movhi	r4,2049
 8000cc0:	21080504 	addi	r4,r4,8212
 8000cc4:	80024200 	call	8002420 <printf>
	while (usb_ctl_val != 0x03)
 8000cc8:	e0bffb0b 	ldhu	r2,-20(fp)
 8000ccc:	108000e0 	cmpeqi	r2,r2,3
 8000cd0:	1000061e 	bne	r2,zero,8000cec <main+0x8ec>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000cd4:	80022f00 	call	80022f0 <UsbGetRetryCnt>
 8000cd8:	e0bffb0d 	sth	r2,-20(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
 8000cdc:	01020074 	movhi	r4,2049
 8000ce0:	21075204 	addi	r4,r4,7496
 8000ce4:	800251c0 	call	800251c <puts>
		goto USB_HOT_PLUG;
 8000ce8:	003dd006 	br	800042c <__alt_data_end+0xfc00042c>
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
 8000cec:	01020074 	movhi	r4,2049
 8000cf0:	21081104 	addi	r4,r4,8260
 8000cf4:	800251c0 	call	800251c <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
 8000cf8:	8001ce40 	call	8001ce4 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000cfc:	00000306 	br	8000d0c <main+0x90c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
 8000d00:	8001ce40 	call	8001ce4 <UsbClassRequest>
		usleep(10*1000);
 8000d04:	0109c404 	movi	r4,10000
 8000d08:	800fb880 	call	800fb88 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000d0c:	010000c4 	movi	r4,3
 8000d10:	80003700 	call	8000370 <IO_read>
 8000d14:	10bfffcc 	andi	r2,r2,65535
 8000d18:	1080040c 	andi	r2,r2,16
 8000d1c:	103ff826 	beq	r2,zero,8000d00 <__alt_data_end+0xfc000d00>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000d20:	800226c0 	call	800226c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 8000d24:	01414184 	movi	r5,1286
 8000d28:	01000084 	movi	r4,2
 8000d2c:	80002f40 	call	80002f4 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8000d30:	0009883a 	mov	r4,zero
 8000d34:	80003700 	call	8000370 <IO_read>
 8000d38:	10bfffcc 	andi	r2,r2,65535
 8000d3c:	100b883a 	mov	r5,r2
 8000d40:	01020074 	movhi	r4,2049
 8000d44:	21082304 	addi	r4,r4,8332
 8000d48:	80024200 	call	8002420 <printf>

	IO_write(HPI_ADDR,0x0508);
 8000d4c:	01414204 	movi	r5,1288
 8000d50:	01000084 	movi	r4,2
 8000d54:	80002f40 	call	80002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8000d58:	0009883a 	mov	r4,zero
 8000d5c:	80003700 	call	8000370 <IO_read>
 8000d60:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
 8000d64:	e0bffb0b 	ldhu	r2,-20(fp)
 8000d68:	100b883a 	mov	r5,r2
 8000d6c:	01020074 	movhi	r4,2049
 8000d70:	21082e04 	addi	r4,r4,8376
 8000d74:	80024200 	call	8002420 <printf>
	while (usb_ctl_val != 0x03)
 8000d78:	e0bffb0b 	ldhu	r2,-20(fp)
 8000d7c:	108000e0 	cmpeqi	r2,r2,3
 8000d80:	1000061e 	bne	r2,zero,8000d9c <main+0x99c>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000d84:	80022f00 	call	80022f0 <UsbGetRetryCnt>
 8000d88:	e0bffb0d 	sth	r2,-20(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
 8000d8c:	01020074 	movhi	r4,2049
 8000d90:	21075204 	addi	r4,r4,7496
 8000d94:	800251c0 	call	800251c <puts>
		goto USB_HOT_PLUG;
 8000d98:	003da406 	br	800042c <__alt_data_end+0xfc00042c>
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
 8000d9c:	01020074 	movhi	r4,2049
 8000da0:	21083a04 	addi	r4,r4,8424
 8000da4:	800251c0 	call	800251c <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
 8000da8:	8001de40 	call	8001de4 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000dac:	00000306 	br	8000dbc <main+0x9bc>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
 8000db0:	8001de40 	call	8001de4 <UsbGetHidDesc>
		usleep(10*1000);
 8000db4:	0109c404 	movi	r4,10000
 8000db8:	800fb880 	call	800fb88 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000dbc:	010000c4 	movi	r4,3
 8000dc0:	80003700 	call	8000370 <IO_read>
 8000dc4:	10bfffcc 	andi	r2,r2,65535
 8000dc8:	1080040c 	andi	r2,r2,16
 8000dcc:	103ff826 	beq	r2,zero,8000db0 <__alt_data_end+0xfc000db0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000dd0:	800226c0 	call	800226c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 8000dd4:	01414184 	movi	r5,1286
 8000dd8:	01000084 	movi	r4,2
 8000ddc:	80002f40 	call	80002f4 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8000de0:	0009883a 	mov	r4,zero
 8000de4:	80003700 	call	8000370 <IO_read>
 8000de8:	10bfffcc 	andi	r2,r2,65535
 8000dec:	100b883a 	mov	r5,r2
 8000df0:	01020074 	movhi	r4,2049
 8000df4:	21082304 	addi	r4,r4,8332
 8000df8:	80024200 	call	8002420 <printf>

	IO_write(HPI_ADDR,0x0508);
 8000dfc:	01414204 	movi	r5,1288
 8000e00:	01000084 	movi	r4,2
 8000e04:	80002f40 	call	80002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8000e08:	0009883a 	mov	r4,zero
 8000e0c:	80003700 	call	8000370 <IO_read>
 8000e10:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
 8000e14:	e0bffb0b 	ldhu	r2,-20(fp)
 8000e18:	100b883a 	mov	r5,r2
 8000e1c:	01020074 	movhi	r4,2049
 8000e20:	21082e04 	addi	r4,r4,8376
 8000e24:	80024200 	call	8002420 <printf>
	while (usb_ctl_val != 0x03)
 8000e28:	e0bffb0b 	ldhu	r2,-20(fp)
 8000e2c:	108000e0 	cmpeqi	r2,r2,3
 8000e30:	1000061e 	bne	r2,zero,8000e4c <main+0xa4c>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000e34:	80022f00 	call	80022f0 <UsbGetRetryCnt>
 8000e38:	e0bffb0d 	sth	r2,-20(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
 8000e3c:	01020074 	movhi	r4,2049
 8000e40:	21075204 	addi	r4,r4,7496
 8000e44:	800251c0 	call	800251c <puts>
		goto USB_HOT_PLUG;
 8000e48:	003d7806 	br	800042c <__alt_data_end+0xfc00042c>
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
 8000e4c:	01020074 	movhi	r4,2049
 8000e50:	21084c04 	addi	r4,r4,8496
 8000e54:	800251c0 	call	800251c <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
 8000e58:	8001f2c0 	call	8001f2c <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000e5c:	00000306 	br	8000e6c <main+0xa6c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
 8000e60:	8001f2c0 	call	8001f2c <UsbGetReportDesc>
		usleep(10*1000);
 8000e64:	0109c404 	movi	r4,10000
 8000e68:	800fb880 	call	800fb88 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000e6c:	010000c4 	movi	r4,3
 8000e70:	80003700 	call	8000370 <IO_read>
 8000e74:	10bfffcc 	andi	r2,r2,65535
 8000e78:	1080040c 	andi	r2,r2,16
 8000e7c:	103ff826 	beq	r2,zero,8000e60 <__alt_data_end+0xfc000e60>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000e80:	800226c0 	call	800226c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 8000e84:	01414184 	movi	r5,1286
 8000e88:	01000084 	movi	r4,2
 8000e8c:	80002f40 	call	80002f4 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8000e90:	0009883a 	mov	r4,zero
 8000e94:	80003700 	call	8000370 <IO_read>
 8000e98:	10bfffcc 	andi	r2,r2,65535
 8000e9c:	100b883a 	mov	r5,r2
 8000ea0:	01020074 	movhi	r4,2049
 8000ea4:	21086004 	addi	r4,r4,8576
 8000ea8:	80024200 	call	8002420 <printf>

	IO_write(HPI_ADDR,0x0508);
 8000eac:	01414204 	movi	r5,1288
 8000eb0:	01000084 	movi	r4,2
 8000eb4:	80002f40 	call	80002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8000eb8:	0009883a 	mov	r4,zero
 8000ebc:	80003700 	call	8000370 <IO_read>
 8000ec0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
 8000ec4:	e0bffb0b 	ldhu	r2,-20(fp)
 8000ec8:	100b883a 	mov	r5,r2
 8000ecc:	01020074 	movhi	r4,2049
 8000ed0:	21086c04 	addi	r4,r4,8624
 8000ed4:	80024200 	call	8002420 <printf>
	while (usb_ctl_val != 0x03)
 8000ed8:	e0bffb0b 	ldhu	r2,-20(fp)
 8000edc:	108000e0 	cmpeqi	r2,r2,3
 8000ee0:	1000061e 	bne	r2,zero,8000efc <main+0xafc>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000ee4:	80022f00 	call	80022f0 <UsbGetRetryCnt>
 8000ee8:	e0bffb0d 	sth	r2,-20(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
 8000eec:	01020074 	movhi	r4,2049
 8000ef0:	21075204 	addi	r4,r4,7496
 8000ef4:	800251c0 	call	800251c <puts>
		goto USB_HOT_PLUG;
 8000ef8:	003d4c06 	br	800042c <__alt_data_end+0xfc00042c>
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
 8000efc:	01020074 	movhi	r4,2049
 8000f00:	21087804 	addi	r4,r4,8672
 8000f04:	800251c0 	call	800251c <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
 8000f08:	0109c404 	movi	r4,10000
 8000f0c:	800fb880 	call	800fb88 <usleep>
	while(1)
	{
		toggle++;
 8000f10:	e0bffb83 	ldbu	r2,-18(fp)
 8000f14:	10800044 	addi	r2,r2,1
 8000f18:	e0bffb85 	stb	r2,-18(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
 8000f1c:	01414004 	movi	r5,1280
 8000f20:	01000084 	movi	r4,2
 8000f24:	80002f40 	call	80002f4 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
 8000f28:	01414704 	movi	r5,1308
 8000f2c:	0009883a 	mov	r4,zero
 8000f30:	80002f40 	call	80002f4 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
 8000f34:	e0bfff03 	ldbu	r2,-4(fp)
 8000f38:	108003cc 	andi	r2,r2,15
 8000f3c:	100b883a 	mov	r5,r2
 8000f40:	0009883a 	mov	r4,zero
 8000f44:	80002f40 	call	80002f4 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
 8000f48:	0140a444 	movi	r5,657
 8000f4c:	0009883a 	mov	r4,zero
 8000f50:	80002f40 	call	80002f4 <IO_write>
		if(toggle%2)
 8000f54:	e0bffb83 	ldbu	r2,-18(fp)
 8000f58:	1080004c 	andi	r2,r2,1
 8000f5c:	10803fcc 	andi	r2,r2,255
 8000f60:	10000426 	beq	r2,zero,8000f74 <main+0xb74>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
 8000f64:	01400044 	movi	r5,1
 8000f68:	0009883a 	mov	r4,zero
 8000f6c:	80002f40 	call	80002f4 <IO_write>
 8000f70:	00000306 	br	8000f80 <main+0xb80>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
 8000f74:	01401044 	movi	r5,65
 8000f78:	0009883a 	mov	r4,zero
 8000f7c:	80002f40 	call	80002f4 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
 8000f80:	014004c4 	movi	r5,19
 8000f84:	0009883a 	mov	r4,zero
 8000f88:	80002f40 	call	80002f4 <IO_write>
		IO_write(HPI_DATA,0x0000);//a
 8000f8c:	000b883a 	mov	r5,zero
 8000f90:	0009883a 	mov	r4,zero
 8000f94:	80002f40 	call	80002f4 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8000f98:	01414004 	movi	r5,1280
 8000f9c:	01006c04 	movi	r4,432
 8000fa0:	80011c40 	call	80011c4 <UsbWrite>
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000fa4:	00002406 	br	8001038 <main+0xc38>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
 8000fa8:	01414004 	movi	r5,1280
 8000fac:	01000084 	movi	r4,2
 8000fb0:	80002f40 	call	80002f4 <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
 8000fb4:	01414704 	movi	r5,1308
 8000fb8:	0009883a 	mov	r4,zero
 8000fbc:	80002f40 	call	80002f4 <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
 8000fc0:	e0bfff03 	ldbu	r2,-4(fp)
 8000fc4:	108003cc 	andi	r2,r2,15
 8000fc8:	100b883a 	mov	r5,r2
 8000fcc:	0009883a 	mov	r4,zero
 8000fd0:	80002f40 	call	80002f4 <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
 8000fd4:	0140a444 	movi	r5,657
 8000fd8:	0009883a 	mov	r4,zero
 8000fdc:	80002f40 	call	80002f4 <IO_write>
			if(toggle%2)
 8000fe0:	e0bffb83 	ldbu	r2,-18(fp)
 8000fe4:	1080004c 	andi	r2,r2,1
 8000fe8:	10803fcc 	andi	r2,r2,255
 8000fec:	10000426 	beq	r2,zero,8001000 <main+0xc00>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
 8000ff0:	01400044 	movi	r5,1
 8000ff4:	0009883a 	mov	r4,zero
 8000ff8:	80002f40 	call	80002f4 <IO_write>
 8000ffc:	00000306 	br	800100c <main+0xc0c>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
 8001000:	01401044 	movi	r5,65
 8001004:	0009883a 	mov	r4,zero
 8001008:	80002f40 	call	80002f4 <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
 800100c:	014004c4 	movi	r5,19
 8001010:	0009883a 	mov	r4,zero
 8001014:	80002f40 	call	80002f4 <IO_write>
			IO_write(HPI_DATA,0x0000);//
 8001018:	000b883a 	mov	r5,zero
 800101c:	0009883a 	mov	r4,zero
 8001020:	80002f40 	call	80002f4 <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001024:	01414004 	movi	r5,1280
 8001028:	01006c04 	movi	r4,432
 800102c:	80011c40 	call	80011c4 <UsbWrite>
			usleep(10*1000);
 8001030:	0109c404 	movi	r4,10000
 8001034:	800fb880 	call	800fb88 <usleep>
		}
		IO_write(HPI_DATA,0x0013);//8
		IO_write(HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8001038:	010000c4 	movi	r4,3
 800103c:	80003700 	call	8000370 <IO_read>
 8001040:	10bfffcc 	andi	r2,r2,65535
 8001044:	1080040c 	andi	r2,r2,16
 8001048:	103fd726 	beq	r2,zero,8000fa8 <__alt_data_end+0xfc000fa8>
			IO_write(HPI_DATA,0x0000);//
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
			usleep(10*1000);
		}//end while

		usb_ctl_val = UsbWaitTDListDone();
 800104c:	800226c0 	call	800226c <UsbWaitTDListDone>
 8001050:	e0bffb0d 	sth	r2,-20(fp)

		// The first two keycodes are stored in 0x051E. Other keycodes are in 
		// subsequent addresses.
		keycode = UsbRead(0x051e);
 8001054:	01014784 	movi	r4,1310
 8001058:	80012340 	call	8001234 <UsbRead>
 800105c:	10bfffcc 	andi	r2,r2,65535
 8001060:	e0bffd15 	stw	r2,-12(fp)
		printf("\nfirst two keycode values are %04x\n",keycode);
 8001064:	e17ffd17 	ldw	r5,-12(fp)
 8001068:	01020074 	movhi	r4,2049
 800106c:	21088c04 	addi	r4,r4,8752
 8001070:	80024200 	call	8002420 <printf>
		// We only need the first keycode, which is at the lower byte of keycode.
		// Send the keycode to hardware via PIO.
		*keycode_base = keycode & 0xff; 
 8001074:	00802004 	movi	r2,128
 8001078:	e0fffd17 	ldw	r3,-12(fp)
 800107c:	10c00005 	stb	r3,0(r2)

		usleep(200);//usleep(5000);
 8001080:	01003204 	movi	r4,200
 8001084:	800fb880 	call	800fb88 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
 8001088:	d0a6cb0b 	ldhu	r2,-25812(gp)
 800108c:	10bfffcc 	andi	r2,r2,65535
 8001090:	1009883a 	mov	r4,r2
 8001094:	80012340 	call	8001234 <UsbRead>
 8001098:	e0bffb0d 	sth	r2,-20(fp)

		if(!(usb_ctl_val & no_device))
 800109c:	d0a6cb8b 	ldhu	r2,-25810(gp)
 80010a0:	e0fffb0b 	ldhu	r3,-20(fp)
 80010a4:	1884703a 	and	r2,r3,r2
 80010a8:	10bfffcc 	andi	r2,r2,65535
 80010ac:	10003f1e 	bne	r2,zero,80011ac <main+0xdac>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
 80010b0:	e03ffbc5 	stb	zero,-17(fp)
 80010b4:	00000f06 	br	80010f4 <main+0xcf4>
			{
				usleep(5*1000);
 80010b8:	0104e204 	movi	r4,5000
 80010bc:	800fb880 	call	800fb88 <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
 80010c0:	d0a6cb0b 	ldhu	r2,-25812(gp)
 80010c4:	10bfffcc 	andi	r2,r2,65535
 80010c8:	1009883a 	mov	r4,r2
 80010cc:	80012340 	call	8001234 <UsbRead>
 80010d0:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device) break;
 80010d4:	d0a6cb8b 	ldhu	r2,-25810(gp)
 80010d8:	e0fffb0b 	ldhu	r3,-20(fp)
 80010dc:	1884703a 	and	r2,r3,r2
 80010e0:	10bfffcc 	andi	r2,r2,65535
 80010e4:	1000071e 	bne	r2,zero,8001104 <main+0xd04>
		usb_ctl_val = UsbRead(ctl_reg);

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
 80010e8:	e0bffbc3 	ldbu	r2,-17(fp)
 80010ec:	10800044 	addi	r2,r2,1
 80010f0:	e0bffbc5 	stb	r2,-17(fp)
 80010f4:	e0bffbc3 	ldbu	r2,-17(fp)
 80010f8:	108001f0 	cmpltui	r2,r2,7
 80010fc:	103fee1e 	bne	r2,zero,80010b8 <__alt_data_end+0xfc0010b8>
 8001100:	00000106 	br	8001108 <main+0xd08>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
 8001104:	0001883a 	nop
			}
			if(!(usb_ctl_val & no_device))
 8001108:	d0a6cb8b 	ldhu	r2,-25810(gp)
 800110c:	e0fffb0b 	ldhu	r3,-20(fp)
 8001110:	1884703a 	and	r2,r3,r2
 8001114:	10bfffcc 	andi	r2,r2,65535
 8001118:	1000241e 	bne	r2,zero,80011ac <main+0xdac>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
 800111c:	01020074 	movhi	r4,2049
 8001120:	21089504 	addi	r4,r4,8788
 8001124:	800251c0 	call	800251c <puts>
				printf("[INFO]: please insert again!!! \n");
 8001128:	01020074 	movhi	r4,2049
 800112c:	2108a004 	addi	r4,r4,8832
 8001130:	800251c0 	call	800251c <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
 8001134:	00001d06 	br	80011ac <main+0xdac>
		{

			usb_ctl_val = UsbRead(ctl_reg);
 8001138:	d0a6cb0b 	ldhu	r2,-25812(gp)
 800113c:	10bfffcc 	andi	r2,r2,65535
 8001140:	1009883a 	mov	r4,r2
 8001144:	80012340 	call	8001234 <UsbRead>
 8001148:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
 800114c:	0104e204 	movi	r4,5000
 8001150:	800fb880 	call	800fb88 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
 8001154:	d0a6cb0b 	ldhu	r2,-25812(gp)
 8001158:	10bfffcc 	andi	r2,r2,65535
 800115c:	1009883a 	mov	r4,r2
 8001160:	80012340 	call	8001234 <UsbRead>
 8001164:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
 8001168:	0104e204 	movi	r4,5000
 800116c:	800fb880 	call	800fb88 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
 8001170:	d0a6cb0b 	ldhu	r2,-25812(gp)
 8001174:	10bfffcc 	andi	r2,r2,65535
 8001178:	1009883a 	mov	r4,r2
 800117c:	80012340 	call	8001234 <UsbRead>
 8001180:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
 8001184:	0104e204 	movi	r4,5000
 8001188:	800fb880 	call	800fb88 <usleep>

			if(usb_ctl_val & no_device)
 800118c:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8001190:	e0fffb0b 	ldhu	r3,-20(fp)
 8001194:	1884703a 	and	r2,r3,r2
 8001198:	10bfffcc 	andi	r2,r2,65535
 800119c:	10000126 	beq	r2,zero,80011a4 <main+0xda4>
				goto USB_HOT_PLUG;
 80011a0:	003ca206 	br	800042c <__alt_data_end+0xfc00042c>

			usleep(200);
 80011a4:	01003204 	movi	r4,200
 80011a8:	800fb880 	call	800fb88 <usleep>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}

		while (!(usb_ctl_val & no_device))
 80011ac:	d0a6cb8b 	ldhu	r2,-25810(gp)
 80011b0:	e0fffb0b 	ldhu	r3,-20(fp)
 80011b4:	1884703a 	and	r2,r3,r2
 80011b8:	10bfffcc 	andi	r2,r2,65535
 80011bc:	103fde26 	beq	r2,zero,8001138 <__alt_data_end+0xfc001138>
				goto USB_HOT_PLUG;

			usleep(200);
		}

	}//end while
 80011c0:	003f5306 	br	8000f10 <__alt_data_end+0xfc000f10>

080011c4 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
 80011c4:	defffc04 	addi	sp,sp,-16
 80011c8:	dfc00315 	stw	ra,12(sp)
 80011cc:	df000215 	stw	fp,8(sp)
 80011d0:	df000204 	addi	fp,sp,8
 80011d4:	2007883a 	mov	r3,r4
 80011d8:	2805883a 	mov	r2,r5
 80011dc:	e0fffe0d 	sth	r3,-8(fp)
 80011e0:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//

		// 1.
			IO_write(HPI_ADDR, Address);
 80011e4:	e0bffe0b 	ldhu	r2,-8(fp)
 80011e8:	100b883a 	mov	r5,r2
 80011ec:	01000084 	movi	r4,2
 80011f0:	80002f40 	call	80002f4 <IO_write>
			usleep(100000);
 80011f4:	010000b4 	movhi	r4,2
 80011f8:	2121a804 	addi	r4,r4,-31072
 80011fc:	800fb880 	call	800fb88 <usleep>
			usleep(500000);
 8001200:	01000234 	movhi	r4,8
 8001204:	21284804 	addi	r4,r4,-24288
 8001208:	800fb880 	call	800fb88 <usleep>

		// 2.
			IO_write(HPI_DATA, Data);
 800120c:	e0bfff0b 	ldhu	r2,-4(fp)
 8001210:	100b883a 	mov	r5,r2
 8001214:	0009883a 	mov	r4,zero
 8001218:	80002f40 	call	80002f4 <IO_write>

		// 3. EZ-OTG will store data to specified address.

		// 4. Unnecessary because only dealing with one keystroke at a time
}
 800121c:	0001883a 	nop
 8001220:	e037883a 	mov	sp,fp
 8001224:	dfc00117 	ldw	ra,4(sp)
 8001228:	df000017 	ldw	fp,0(sp)
 800122c:	dec00204 	addi	sp,sp,8
 8001230:	f800283a 	ret

08001234 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
 8001234:	defffc04 	addi	sp,sp,-16
 8001238:	dfc00315 	stw	ra,12(sp)
 800123c:	df000215 	stw	fp,8(sp)
 8001240:	df000204 	addi	fp,sp,8
 8001244:	2005883a 	mov	r2,r4
 8001248:	e0bfff0d 	sth	r2,-4(fp)
//							Write this function							   //
//*************************************************************************//
		alt_u16 ret;

		// 1.
		IO_write(HPI_ADDR, Address);
 800124c:	e0bfff0b 	ldhu	r2,-4(fp)
 8001250:	100b883a 	mov	r5,r2
 8001254:	01000084 	movi	r4,2
 8001258:	80002f40 	call	80002f4 <IO_write>

		// 2. EZ-OTG will fetch data from specified address and make it ready
		// to be transferred via HPI_DATA.
		usleep(100000);
 800125c:	010000b4 	movhi	r4,2
 8001260:	2121a804 	addi	r4,r4,-31072
 8001264:	800fb880 	call	800fb88 <usleep>
		usleep(500000);
 8001268:	01000234 	movhi	r4,8
 800126c:	21284804 	addi	r4,r4,-24288
 8001270:	800fb880 	call	800fb88 <usleep>

		// 3.
		ret = IO_read(HPI_DATA);
 8001274:	0009883a 	mov	r4,zero
 8001278:	80003700 	call	8000370 <IO_read>
 800127c:	e0bffe0d 	sth	r2,-8(fp)

		// 4. Unnecessary because only dealing with one keystroke at a time
		return ret;
 8001280:	e0bffe0b 	ldhu	r2,-8(fp)
}
 8001284:	e037883a 	mov	sp,fp
 8001288:	dfc00117 	ldw	ra,4(sp)
 800128c:	df000017 	ldw	fp,0(sp)
 8001290:	dec00204 	addi	sp,sp,8
 8001294:	f800283a 	ret

08001298 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
 8001298:	defffe04 	addi	sp,sp,-8
 800129c:	dfc00115 	stw	ra,4(sp)
 80012a0:	df000015 	stw	fp,0(sp)
 80012a4:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
 80012a8:	017e9414 	movui	r5,64080
 80012ac:	01000044 	movi	r4,1
 80012b0:	80002f40 	call	80002f4 <IO_write>
	usleep(100000);
 80012b4:	010000b4 	movhi	r4,2
 80012b8:	2121a804 	addi	r4,r4,-31072
 80012bc:	800fb880 	call	800fb88 <usleep>
	printf("[USB INIT]:reset finished!\n");
 80012c0:	01020074 	movhi	r4,2049
 80012c4:	2108a804 	addi	r4,r4,8864
 80012c8:	800251c0 	call	800251c <puts>

	usleep(500000);
 80012cc:	01000234 	movhi	r4,8
 80012d0:	21284804 	addi	r4,r4,-24288
 80012d4:	800fb880 	call	800fb88 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
 80012d8:	01020074 	movhi	r4,2049
 80012dc:	2108af04 	addi	r4,r4,8892
 80012e0:	800251c0 	call	800251c <puts>
	IO_read(HPI_MAILBOX);
 80012e4:	01000044 	movi	r4,1
 80012e8:	80003700 	call	8000370 <IO_read>
	printf ("This line is %d.\n", __LINE__);
 80012ec:	01401ec4 	movi	r5,123
 80012f0:	01020074 	movhi	r4,2049
 80012f4:	2108b804 	addi	r4,r4,8928
 80012f8:	80024200 	call	8002420 <printf>
	IO_read(HPI_STATUS);
 80012fc:	010000c4 	movi	r4,3
 8001300:	80003700 	call	8000370 <IO_read>
	printf ("This line is %d.\n", __LINE__);
 8001304:	01401f44 	movi	r5,125
 8001308:	01020074 	movhi	r4,2049
 800130c:	2108b804 	addi	r4,r4,8928
 8001310:	80024200 	call	8002420 <printf>
	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
 8001314:	01005104 	movi	r4,324
 8001318:	80012340 	call	8001234 <UsbRead>
	printf ("This line is %d.\n", __LINE__);
 800131c:	01402084 	movi	r5,130
 8001320:	01020074 	movhi	r4,2049
 8001324:	2108b804 	addi	r4,r4,8928
 8001328:	80024200 	call	8002420 <printf>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
 800132c:	000b883a 	mov	r5,zero
 8001330:	01005104 	movi	r4,324
 8001334:	80011c40 	call	80011c4 <UsbWrite>
	printf ("This line is %d.\n", __LINE__);
 8001338:	01402104 	movi	r5,132
 800133c:	01020074 	movhi	r4,2049
 8001340:	2108b804 	addi	r4,r4,8928
 8001344:	80024200 	call	8002420 <printf>
	UsbRead (HPI_SIE2_MSG_ADR);
 8001348:	01005204 	movi	r4,328
 800134c:	80012340 	call	8001234 <UsbRead>
	printf ("This line is %d.\n", __LINE__);
 8001350:	01402184 	movi	r5,134
 8001354:	01020074 	movhi	r4,2049
 8001358:	2108b804 	addi	r4,r4,8928
 800135c:	80024200 	call	8002420 <printf>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
 8001360:	000b883a 	mov	r5,zero
 8001364:	01005204 	movi	r4,328
 8001368:	80011c40 	call	80011c4 <UsbWrite>
	printf ("This line is %d.\n", __LINE__);
 800136c:	01402204 	movi	r5,136
 8001370:	01020074 	movhi	r4,2049
 8001374:	2108b804 	addi	r4,r4,8928
 8001378:	80024200 	call	8002420 <printf>

	UsbWrite (HOST1_STAT_REG, 0xFFFF);
 800137c:	017fffd4 	movui	r5,65535
 8001380:	01302414 	movui	r4,49296
 8001384:	80011c40 	call	80011c4 <UsbWrite>
	printf ("This line is %d.\n", __LINE__);
 8001388:	014022c4 	movi	r5,139
 800138c:	01020074 	movhi	r4,2049
 8001390:	2108b804 	addi	r4,r4,8928
 8001394:	80024200 	call	8002420 <printf>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
 8001398:	017fffd4 	movui	r5,65535
 800139c:	01302c14 	movui	r4,49328
 80013a0:	80011c40 	call	80011c4 <UsbWrite>
	printf ("This line is %d.\n", __LINE__);
 80013a4:	01402344 	movi	r5,141
 80013a8:	01020074 	movhi	r4,2049
 80013ac:	2108b804 	addi	r4,r4,8928
 80013b0:	80024200 	call	8002420 <printf>
}
 80013b4:	0001883a 	nop
 80013b8:	e037883a 	mov	sp,fp
 80013bc:	dfc00117 	ldw	ra,4(sp)
 80013c0:	df000017 	ldw	fp,0(sp)
 80013c4:	dec00204 	addi	sp,sp,8
 80013c8:	f800283a 	ret

080013cc <UsbSetAddress>:


void UsbSetAddress()
{
 80013cc:	defffe04 	addi	sp,sp,-8
 80013d0:	dfc00115 	stw	ra,4(sp)
 80013d4:	df000015 	stw	fp,0(sp)
 80013d8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 80013dc:	01414004 	movi	r5,1280
 80013e0:	01000084 	movi	r4,2
 80013e4:	80002f40 	call	80002f4 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
 80013e8:	01414304 	movi	r5,1292
 80013ec:	0009883a 	mov	r4,zero
 80013f0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 80013f4:	01400204 	movi	r5,8
 80013f8:	0009883a 	mov	r4,zero
 80013fc:	80002f40 	call	80002f4 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
 8001400:	01403404 	movi	r5,208
 8001404:	0009883a 	mov	r4,zero
 8001408:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
 800140c:	01400044 	movi	r5,1
 8001410:	0009883a 	mov	r4,zero
 8001414:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001418:	014004c4 	movi	r5,19
 800141c:	0009883a 	mov	r4,zero
 8001420:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
 8001424:	01414504 	movi	r5,1300
 8001428:	0009883a 	mov	r4,zero
 800142c:	80002f40 	call	80002f4 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
 8001430:	01414004 	movi	r5,1280
 8001434:	0009883a 	mov	r4,zero
 8001438:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0002);
 800143c:	01400084 	movi	r5,2
 8001440:	0009883a 	mov	r4,zero
 8001444:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001448:	000b883a 	mov	r5,zero
 800144c:	0009883a 	mov	r4,zero
 8001450:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001454:	000b883a 	mov	r5,zero
 8001458:	0009883a 	mov	r4,zero
 800145c:	80002f40 	call	80002f4 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
 8001460:	000b883a 	mov	r5,zero
 8001464:	0009883a 	mov	r4,zero
 8001468:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//
 800146c:	000b883a 	mov	r5,zero
 8001470:	0009883a 	mov	r4,zero
 8001474:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0090);//
 8001478:	01402404 	movi	r5,144
 800147c:	0009883a 	mov	r4,zero
 8001480:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
 8001484:	01401044 	movi	r5,65
 8001488:	0009883a 	mov	r4,zero
 800148c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001490:	014004c4 	movi	r5,19
 8001494:	0009883a 	mov	r4,zero
 8001498:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 800149c:	000b883a 	mov	r5,zero
 80014a0:	0009883a 	mov	r4,zero
 80014a4:	80002f40 	call	80002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 80014a8:	01414004 	movi	r5,1280
 80014ac:	01006c04 	movi	r4,432
 80014b0:	80011c40 	call	80011c4 <UsbWrite>
}
 80014b4:	0001883a 	nop
 80014b8:	e037883a 	mov	sp,fp
 80014bc:	dfc00117 	ldw	ra,4(sp)
 80014c0:	df000017 	ldw	fp,0(sp)
 80014c4:	dec00204 	addi	sp,sp,8
 80014c8:	f800283a 	ret

080014cc <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
 80014cc:	defffe04 	addi	sp,sp,-8
 80014d0:	dfc00115 	stw	ra,4(sp)
 80014d4:	df000015 	stw	fp,0(sp)
 80014d8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 80014dc:	01414004 	movi	r5,1280
 80014e0:	01000084 	movi	r4,2
 80014e4:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
 80014e8:	01414304 	movi	r5,1292
 80014ec:	0009883a 	mov	r4,zero
 80014f0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 80014f4:	01400204 	movi	r5,8
 80014f8:	0009883a 	mov	r4,zero
 80014fc:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 8001500:	0140b404 	movi	r5,720
 8001504:	0009883a 	mov	r4,zero
 8001508:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
 800150c:	01400044 	movi	r5,1
 8001510:	0009883a 	mov	r4,zero
 8001514:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001518:	014004c4 	movi	r5,19
 800151c:	0009883a 	mov	r4,zero
 8001520:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
 8001524:	01414504 	movi	r5,1300
 8001528:	0009883a 	mov	r4,zero
 800152c:	80002f40 	call	80002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 8001530:	0141a004 	movi	r5,1664
 8001534:	0009883a 	mov	r4,zero
 8001538:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
 800153c:	01404004 	movi	r5,256
 8001540:	0009883a 	mov	r4,zero
 8001544:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001548:	000b883a 	mov	r5,zero
 800154c:	0009883a 	mov	r4,zero
 8001550:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);
 8001554:	01400204 	movi	r5,8
 8001558:	0009883a 	mov	r4,zero
 800155c:	80002f40 	call	80002f4 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
 8001560:	01414b04 	movi	r5,1324
 8001564:	0009883a 	mov	r4,zero
 8001568:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//
 800156c:	01400204 	movi	r5,8
 8001570:	0009883a 	mov	r4,zero
 8001574:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//
 8001578:	0140a404 	movi	r5,656
 800157c:	0009883a 	mov	r4,zero
 8001580:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
 8001584:	01401044 	movi	r5,65
 8001588:	0009883a 	mov	r4,zero
 800158c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001590:	014004c4 	movi	r5,19
 8001594:	0009883a 	mov	r4,zero
 8001598:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);
 800159c:	01414804 	movi	r5,1312
 80015a0:	0009883a 	mov	r4,zero
 80015a4:	80002f40 	call	80002f4 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
 80015a8:	000b883a 	mov	r5,zero
 80015ac:	0009883a 	mov	r4,zero
 80015b0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
 80015b4:	000b883a 	mov	r5,zero
 80015b8:	0009883a 	mov	r4,zero
 80015bc:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
 80015c0:	01408404 	movi	r5,528
 80015c4:	0009883a 	mov	r4,zero
 80015c8:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
 80015cc:	01401044 	movi	r5,65
 80015d0:	0009883a 	mov	r4,zero
 80015d4:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 80015d8:	014004c4 	movi	r5,19
 80015dc:	0009883a 	mov	r4,zero
 80015e0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 80015e4:	000b883a 	mov	r5,zero
 80015e8:	0009883a 	mov	r4,zero
 80015ec:	80002f40 	call	80002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 80015f0:	01414004 	movi	r5,1280
 80015f4:	01006c04 	movi	r4,432
 80015f8:	80011c40 	call	80011c4 <UsbWrite>
}
 80015fc:	0001883a 	nop
 8001600:	e037883a 	mov	sp,fp
 8001604:	dfc00117 	ldw	ra,4(sp)
 8001608:	df000017 	ldw	fp,0(sp)
 800160c:	dec00204 	addi	sp,sp,8
 8001610:	f800283a 	ret

08001614 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
 8001614:	defffe04 	addi	sp,sp,-8
 8001618:	dfc00115 	stw	ra,4(sp)
 800161c:	df000015 	stw	fp,0(sp)
 8001620:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 8001624:	01414004 	movi	r5,1280
 8001628:	01000084 	movi	r4,2
 800162c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
 8001630:	01414304 	movi	r5,1292
 8001634:	0009883a 	mov	r4,zero
 8001638:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 800163c:	01400204 	movi	r5,8
 8001640:	0009883a 	mov	r4,zero
 8001644:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 8001648:	0140b404 	movi	r5,720
 800164c:	0009883a 	mov	r4,zero
 8001650:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
 8001654:	01400044 	movi	r5,1
 8001658:	0009883a 	mov	r4,zero
 800165c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001660:	014004c4 	movi	r5,19
 8001664:	0009883a 	mov	r4,zero
 8001668:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
 800166c:	01414504 	movi	r5,1300
 8001670:	0009883a 	mov	r4,zero
 8001674:	80002f40 	call	80002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 8001678:	0141a004 	movi	r5,1664
 800167c:	0009883a 	mov	r4,zero
 8001680:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
 8001684:	01404004 	movi	r5,256
 8001688:	0009883a 	mov	r4,zero
 800168c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 8001690:	000b883a 	mov	r5,zero
 8001694:	0009883a 	mov	r4,zero
 8001698:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
 800169c:	01400484 	movi	r5,18
 80016a0:	0009883a 	mov	r4,zero
 80016a4:	80002f40 	call	80002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
 80016a8:	01415104 	movi	r5,1348
 80016ac:	0009883a 	mov	r4,zero
 80016b0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 80016b4:	01400204 	movi	r5,8
 80016b8:	0009883a 	mov	r4,zero
 80016bc:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 80016c0:	0140a404 	movi	r5,656
 80016c4:	0009883a 	mov	r4,zero
 80016c8:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 80016cc:	01401044 	movi	r5,65
 80016d0:	0009883a 	mov	r4,zero
 80016d4:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 80016d8:	014004c4 	movi	r5,19
 80016dc:	0009883a 	mov	r4,zero
 80016e0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 80016e4:	01414804 	movi	r5,1312
 80016e8:	0009883a 	mov	r4,zero
 80016ec:	80002f40 	call	80002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
 80016f0:	01415304 	movi	r5,1356
 80016f4:	0009883a 	mov	r4,zero
 80016f8:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 80016fc:	01400204 	movi	r5,8
 8001700:	0009883a 	mov	r4,zero
 8001704:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 8001708:	0140a404 	movi	r5,656
 800170c:	0009883a 	mov	r4,zero
 8001710:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
 8001714:	01400044 	movi	r5,1
 8001718:	0009883a 	mov	r4,zero
 800171c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 8001720:	014004c4 	movi	r5,19
 8001724:	0009883a 	mov	r4,zero
 8001728:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 800172c:	01414b04 	movi	r5,1324
 8001730:	0009883a 	mov	r4,zero
 8001734:	80002f40 	call	80002f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
 8001738:	01415504 	movi	r5,1364
 800173c:	0009883a 	mov	r4,zero
 8001740:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
 8001744:	01400084 	movi	r5,2
 8001748:	0009883a 	mov	r4,zero
 800174c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
 8001750:	0140a404 	movi	r5,656
 8001754:	0009883a 	mov	r4,zero
 8001758:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 800175c:	01401044 	movi	r5,65
 8001760:	0009883a 	mov	r4,zero
 8001764:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 8001768:	014004c4 	movi	r5,19
 800176c:	0009883a 	mov	r4,zero
 8001770:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
 8001774:	01414e04 	movi	r5,1336
 8001778:	0009883a 	mov	r4,zero
 800177c:	80002f40 	call	80002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
 8001780:	000b883a 	mov	r5,zero
 8001784:	0009883a 	mov	r4,zero
 8001788:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
 800178c:	000b883a 	mov	r5,zero
 8001790:	0009883a 	mov	r4,zero
 8001794:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
 8001798:	01408404 	movi	r5,528
 800179c:	0009883a 	mov	r4,zero
 80017a0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
 80017a4:	01401044 	movi	r5,65
 80017a8:	0009883a 	mov	r4,zero
 80017ac:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
 80017b0:	014004c4 	movi	r5,19
 80017b4:	0009883a 	mov	r4,zero
 80017b8:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
 80017bc:	000b883a 	mov	r5,zero
 80017c0:	0009883a 	mov	r4,zero
 80017c4:	80002f40 	call	80002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 80017c8:	01414004 	movi	r5,1280
 80017cc:	01006c04 	movi	r4,432
 80017d0:	80011c40 	call	80011c4 <UsbWrite>
}
 80017d4:	0001883a 	nop
 80017d8:	e037883a 	mov	sp,fp
 80017dc:	dfc00117 	ldw	ra,4(sp)
 80017e0:	df000017 	ldw	fp,0(sp)
 80017e4:	dec00204 	addi	sp,sp,8
 80017e8:	f800283a 	ret

080017ec <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
 80017ec:	defffe04 	addi	sp,sp,-8
 80017f0:	dfc00115 	stw	ra,4(sp)
 80017f4:	df000015 	stw	fp,0(sp)
 80017f8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 80017fc:	01414004 	movi	r5,1280
 8001800:	01000084 	movi	r4,2
 8001804:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
 8001808:	01414304 	movi	r5,1292
 800180c:	0009883a 	mov	r4,zero
 8001810:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 8001814:	01400204 	movi	r5,8
 8001818:	0009883a 	mov	r4,zero
 800181c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 8001820:	0140b404 	movi	r5,720
 8001824:	0009883a 	mov	r4,zero
 8001828:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
 800182c:	01400044 	movi	r5,1
 8001830:	0009883a 	mov	r4,zero
 8001834:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001838:	014004c4 	movi	r5,19
 800183c:	0009883a 	mov	r4,zero
 8001840:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
 8001844:	01414504 	movi	r5,1300
 8001848:	0009883a 	mov	r4,zero
 800184c:	80002f40 	call	80002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 8001850:	0141a004 	movi	r5,1664
 8001854:	0009883a 	mov	r4,zero
 8001858:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
 800185c:	01408004 	movi	r5,512
 8001860:	0009883a 	mov	r4,zero
 8001864:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 8001868:	000b883a 	mov	r5,zero
 800186c:	0009883a 	mov	r4,zero
 8001870:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
 8001874:	01400244 	movi	r5,9
 8001878:	0009883a 	mov	r4,zero
 800187c:	80002f40 	call	80002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
 8001880:	01415104 	movi	r5,1348
 8001884:	0009883a 	mov	r4,zero
 8001888:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 800188c:	01400204 	movi	r5,8
 8001890:	0009883a 	mov	r4,zero
 8001894:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 8001898:	0140a404 	movi	r5,656
 800189c:	0009883a 	mov	r4,zero
 80018a0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 80018a4:	01401044 	movi	r5,65
 80018a8:	0009883a 	mov	r4,zero
 80018ac:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 80018b0:	014004c4 	movi	r5,19
 80018b4:	0009883a 	mov	r4,zero
 80018b8:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 80018bc:	01414804 	movi	r5,1312
 80018c0:	0009883a 	mov	r4,zero
 80018c4:	80002f40 	call	80002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
 80018c8:	01415304 	movi	r5,1356
 80018cc:	0009883a 	mov	r4,zero
 80018d0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
 80018d4:	01400044 	movi	r5,1
 80018d8:	0009883a 	mov	r4,zero
 80018dc:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 80018e0:	0140a404 	movi	r5,656
 80018e4:	0009883a 	mov	r4,zero
 80018e8:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 80018ec:	01400044 	movi	r5,1
 80018f0:	0009883a 	mov	r4,zero
 80018f4:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 80018f8:	014004c4 	movi	r5,19
 80018fc:	0009883a 	mov	r4,zero
 8001900:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 8001904:	01414b04 	movi	r5,1324
 8001908:	0009883a 	mov	r4,zero
 800190c:	80002f40 	call	80002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
 8001910:	000b883a 	mov	r5,zero
 8001914:	0009883a 	mov	r4,zero
 8001918:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
 800191c:	000b883a 	mov	r5,zero
 8001920:	0009883a 	mov	r4,zero
 8001924:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
 8001928:	01408404 	movi	r5,528
 800192c:	0009883a 	mov	r4,zero
 8001930:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 8001934:	01401044 	movi	r5,65
 8001938:	0009883a 	mov	r4,zero
 800193c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 8001940:	014004c4 	movi	r5,19
 8001944:	0009883a 	mov	r4,zero
 8001948:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
 800194c:	000b883a 	mov	r5,zero
 8001950:	0009883a 	mov	r4,zero
 8001954:	80002f40 	call	80002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001958:	01414004 	movi	r5,1280
 800195c:	01006c04 	movi	r4,432
 8001960:	80011c40 	call	80011c4 <UsbWrite>
}
 8001964:	0001883a 	nop
 8001968:	e037883a 	mov	sp,fp
 800196c:	dfc00117 	ldw	ra,4(sp)
 8001970:	df000017 	ldw	fp,0(sp)
 8001974:	dec00204 	addi	sp,sp,8
 8001978:	f800283a 	ret

0800197c <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
 800197c:	defffe04 	addi	sp,sp,-8
 8001980:	dfc00115 	stw	ra,4(sp)
 8001984:	df000015 	stw	fp,0(sp)
 8001988:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 800198c:	01414004 	movi	r5,1280
 8001990:	01000084 	movi	r4,2
 8001994:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
 8001998:	01414304 	movi	r5,1292
 800199c:	0009883a 	mov	r4,zero
 80019a0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 80019a4:	01400204 	movi	r5,8
 80019a8:	0009883a 	mov	r4,zero
 80019ac:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 80019b0:	0140b404 	movi	r5,720
 80019b4:	0009883a 	mov	r4,zero
 80019b8:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
 80019bc:	01400044 	movi	r5,1
 80019c0:	0009883a 	mov	r4,zero
 80019c4:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 80019c8:	014004c4 	movi	r5,19
 80019cc:	0009883a 	mov	r4,zero
 80019d0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
 80019d4:	01414504 	movi	r5,1300
 80019d8:	0009883a 	mov	r4,zero
 80019dc:	80002f40 	call	80002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 80019e0:	0141a004 	movi	r5,1664
 80019e4:	0009883a 	mov	r4,zero
 80019e8:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
 80019ec:	01408004 	movi	r5,512
 80019f0:	0009883a 	mov	r4,zero
 80019f4:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 80019f8:	000b883a 	mov	r5,zero
 80019fc:	0009883a 	mov	r4,zero
 8001a00:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
 8001a04:	01403fc4 	movi	r5,255
 8001a08:	0009883a 	mov	r4,zero
 8001a0c:	80002f40 	call	80002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
 8001a10:	01415704 	movi	r5,1372
 8001a14:	0009883a 	mov	r4,zero
 8001a18:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 8001a1c:	01400204 	movi	r5,8
 8001a20:	0009883a 	mov	r4,zero
 8001a24:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 8001a28:	0140a404 	movi	r5,656
 8001a2c:	0009883a 	mov	r4,zero
 8001a30:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 8001a34:	01401044 	movi	r5,65
 8001a38:	0009883a 	mov	r4,zero
 8001a3c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 8001a40:	014004c4 	movi	r5,19
 8001a44:	0009883a 	mov	r4,zero
 8001a48:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 8001a4c:	01414804 	movi	r5,1312
 8001a50:	0009883a 	mov	r4,zero
 8001a54:	80002f40 	call	80002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
 8001a58:	01415904 	movi	r5,1380
 8001a5c:	0009883a 	mov	r4,zero
 8001a60:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 8001a64:	01400204 	movi	r5,8
 8001a68:	0009883a 	mov	r4,zero
 8001a6c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 8001a70:	0140a404 	movi	r5,656
 8001a74:	0009883a 	mov	r4,zero
 8001a78:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 8001a7c:	01400044 	movi	r5,1
 8001a80:	0009883a 	mov	r4,zero
 8001a84:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 8001a88:	014004c4 	movi	r5,19
 8001a8c:	0009883a 	mov	r4,zero
 8001a90:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 8001a94:	01414b04 	movi	r5,1324
 8001a98:	0009883a 	mov	r4,zero
 8001a9c:	80002f40 	call	80002f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
 8001aa0:	01415b04 	movi	r5,1388
 8001aa4:	0009883a 	mov	r4,zero
 8001aa8:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
 8001aac:	01400204 	movi	r5,8
 8001ab0:	0009883a 	mov	r4,zero
 8001ab4:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
 8001ab8:	0140a404 	movi	r5,656
 8001abc:	0009883a 	mov	r4,zero
 8001ac0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 8001ac4:	01401044 	movi	r5,65
 8001ac8:	0009883a 	mov	r4,zero
 8001acc:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 8001ad0:	014004c4 	movi	r5,19
 8001ad4:	0009883a 	mov	r4,zero
 8001ad8:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
 8001adc:	01414e04 	movi	r5,1336
 8001ae0:	0009883a 	mov	r4,zero
 8001ae4:	80002f40 	call	80002f4 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
 8001ae8:	01415d04 	movi	r5,1396
 8001aec:	0009883a 	mov	r4,zero
 8001af0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
 8001af4:	01400204 	movi	r5,8
 8001af8:	0009883a 	mov	r4,zero
 8001afc:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
 8001b00:	0140a404 	movi	r5,656
 8001b04:	0009883a 	mov	r4,zero
 8001b08:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
 8001b0c:	01400044 	movi	r5,1
 8001b10:	0009883a 	mov	r4,zero
 8001b14:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
 8001b18:	014004c4 	movi	r5,19
 8001b1c:	0009883a 	mov	r4,zero
 8001b20:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
 8001b24:	01415104 	movi	r5,1348
 8001b28:	0009883a 	mov	r4,zero
 8001b2c:	80002f40 	call	80002f4 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
 8001b30:	01415f04 	movi	r5,1404
 8001b34:	0009883a 	mov	r4,zero
 8001b38:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
 8001b3c:	01400084 	movi	r5,2
 8001b40:	0009883a 	mov	r4,zero
 8001b44:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 8001b48:	0140a404 	movi	r5,656
 8001b4c:	0009883a 	mov	r4,zero
 8001b50:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
 8001b54:	01401044 	movi	r5,65
 8001b58:	0009883a 	mov	r4,zero
 8001b5c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 8001b60:	014004c4 	movi	r5,19
 8001b64:	0009883a 	mov	r4,zero
 8001b68:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
 8001b6c:	01415404 	movi	r5,1360
 8001b70:	0009883a 	mov	r4,zero
 8001b74:	80002f40 	call	80002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
 8001b78:	000b883a 	mov	r5,zero
 8001b7c:	0009883a 	mov	r4,zero
 8001b80:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
 8001b84:	000b883a 	mov	r5,zero
 8001b88:	0009883a 	mov	r4,zero
 8001b8c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
 8001b90:	01408404 	movi	r5,528
 8001b94:	0009883a 	mov	r4,zero
 8001b98:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
 8001b9c:	01401044 	movi	r5,65
 8001ba0:	0009883a 	mov	r4,zero
 8001ba4:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 8001ba8:	014004c4 	movi	r5,19
 8001bac:	0009883a 	mov	r4,zero
 8001bb0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
 8001bb4:	000b883a 	mov	r5,zero
 8001bb8:	0009883a 	mov	r4,zero
 8001bbc:	80002f40 	call	80002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001bc0:	01414004 	movi	r5,1280
 8001bc4:	01006c04 	movi	r4,432
 8001bc8:	80011c40 	call	80011c4 <UsbWrite>
}
 8001bcc:	0001883a 	nop
 8001bd0:	e037883a 	mov	sp,fp
 8001bd4:	dfc00117 	ldw	ra,4(sp)
 8001bd8:	df000017 	ldw	fp,0(sp)
 8001bdc:	dec00204 	addi	sp,sp,8
 8001be0:	f800283a 	ret

08001be4 <UsbSetConfig>:

void UsbSetConfig()
{
 8001be4:	defffe04 	addi	sp,sp,-8
 8001be8:	dfc00115 	stw	ra,4(sp)
 8001bec:	df000015 	stw	fp,0(sp)
 8001bf0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 8001bf4:	01414004 	movi	r5,1280
 8001bf8:	01000084 	movi	r4,2
 8001bfc:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
 8001c00:	01414304 	movi	r5,1292
 8001c04:	0009883a 	mov	r4,zero
 8001c08:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 8001c0c:	01400204 	movi	r5,8
 8001c10:	0009883a 	mov	r4,zero
 8001c14:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
 8001c18:	0140b404 	movi	r5,720
 8001c1c:	0009883a 	mov	r4,zero
 8001c20:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
 8001c24:	01400044 	movi	r5,1
 8001c28:	0009883a 	mov	r4,zero
 8001c2c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001c30:	014004c4 	movi	r5,19
 8001c34:	0009883a 	mov	r4,zero
 8001c38:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
 8001c3c:	01414504 	movi	r5,1300
 8001c40:	0009883a 	mov	r4,zero
 8001c44:	80002f40 	call	80002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
 8001c48:	01424004 	movi	r5,2304
 8001c4c:	0009883a 	mov	r4,zero
 8001c50:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
 8001c54:	01400044 	movi	r5,1
 8001c58:	0009883a 	mov	r4,zero
 8001c5c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001c60:	000b883a 	mov	r5,zero
 8001c64:	0009883a 	mov	r4,zero
 8001c68:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001c6c:	000b883a 	mov	r5,zero
 8001c70:	0009883a 	mov	r4,zero
 8001c74:	80002f40 	call	80002f4 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
 8001c78:	000b883a 	mov	r5,zero
 8001c7c:	0009883a 	mov	r4,zero
 8001c80:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
 8001c84:	000b883a 	mov	r5,zero
 8001c88:	0009883a 	mov	r4,zero
 8001c8c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
 8001c90:	0140a404 	movi	r5,656
 8001c94:	0009883a 	mov	r4,zero
 8001c98:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
 8001c9c:	01401044 	movi	r5,65
 8001ca0:	0009883a 	mov	r4,zero
 8001ca4:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001ca8:	014004c4 	movi	r5,19
 8001cac:	0009883a 	mov	r4,zero
 8001cb0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001cb4:	000b883a 	mov	r5,zero
 8001cb8:	0009883a 	mov	r4,zero
 8001cbc:	80002f40 	call	80002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001cc0:	01414004 	movi	r5,1280
 8001cc4:	01006c04 	movi	r4,432
 8001cc8:	80011c40 	call	80011c4 <UsbWrite>

}
 8001ccc:	0001883a 	nop
 8001cd0:	e037883a 	mov	sp,fp
 8001cd4:	dfc00117 	ldw	ra,4(sp)
 8001cd8:	df000017 	ldw	fp,0(sp)
 8001cdc:	dec00204 	addi	sp,sp,8
 8001ce0:	f800283a 	ret

08001ce4 <UsbClassRequest>:

void UsbClassRequest()
{
 8001ce4:	defffe04 	addi	sp,sp,-8
 8001ce8:	dfc00115 	stw	ra,4(sp)
 8001cec:	df000015 	stw	fp,0(sp)
 8001cf0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 8001cf4:	01414004 	movi	r5,1280
 8001cf8:	01000084 	movi	r4,2
 8001cfc:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
 8001d00:	01414304 	movi	r5,1292
 8001d04:	0009883a 	mov	r4,zero
 8001d08:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 8001d0c:	01400204 	movi	r5,8
 8001d10:	0009883a 	mov	r4,zero
 8001d14:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
 8001d18:	0140b404 	movi	r5,720
 8001d1c:	0009883a 	mov	r4,zero
 8001d20:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
 8001d24:	01400044 	movi	r5,1
 8001d28:	0009883a 	mov	r4,zero
 8001d2c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001d30:	014004c4 	movi	r5,19
 8001d34:	0009883a 	mov	r4,zero
 8001d38:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
 8001d3c:	01414504 	movi	r5,1300
 8001d40:	0009883a 	mov	r4,zero
 8001d44:	80002f40 	call	80002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
 8001d48:	01428844 	movi	r5,2593
 8001d4c:	0009883a 	mov	r4,zero
 8001d50:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
 8001d54:	000b883a 	mov	r5,zero
 8001d58:	0009883a 	mov	r4,zero
 8001d5c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001d60:	000b883a 	mov	r5,zero
 8001d64:	0009883a 	mov	r4,zero
 8001d68:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001d6c:	000b883a 	mov	r5,zero
 8001d70:	0009883a 	mov	r4,zero
 8001d74:	80002f40 	call	80002f4 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
 8001d78:	000b883a 	mov	r5,zero
 8001d7c:	0009883a 	mov	r4,zero
 8001d80:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
 8001d84:	000b883a 	mov	r5,zero
 8001d88:	0009883a 	mov	r4,zero
 8001d8c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
 8001d90:	0140a404 	movi	r5,656
 8001d94:	0009883a 	mov	r4,zero
 8001d98:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
 8001d9c:	01401044 	movi	r5,65
 8001da0:	0009883a 	mov	r4,zero
 8001da4:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001da8:	014004c4 	movi	r5,19
 8001dac:	0009883a 	mov	r4,zero
 8001db0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001db4:	000b883a 	mov	r5,zero
 8001db8:	0009883a 	mov	r4,zero
 8001dbc:	80002f40 	call	80002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001dc0:	01414004 	movi	r5,1280
 8001dc4:	01006c04 	movi	r4,432
 8001dc8:	80011c40 	call	80011c4 <UsbWrite>
}
 8001dcc:	0001883a 	nop
 8001dd0:	e037883a 	mov	sp,fp
 8001dd4:	dfc00117 	ldw	ra,4(sp)
 8001dd8:	df000017 	ldw	fp,0(sp)
 8001ddc:	dec00204 	addi	sp,sp,8
 8001de0:	f800283a 	ret

08001de4 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
 8001de4:	defffe04 	addi	sp,sp,-8
 8001de8:	dfc00115 	stw	ra,4(sp)
 8001dec:	df000015 	stw	fp,0(sp)
 8001df0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 8001df4:	01414004 	movi	r5,1280
 8001df8:	01000084 	movi	r4,2
 8001dfc:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
 8001e00:	01414304 	movi	r5,1292
 8001e04:	0009883a 	mov	r4,zero
 8001e08:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 8001e0c:	01400204 	movi	r5,8
 8001e10:	0009883a 	mov	r4,zero
 8001e14:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
 8001e18:	0140b404 	movi	r5,720
 8001e1c:	0009883a 	mov	r4,zero
 8001e20:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
 8001e24:	01400044 	movi	r5,1
 8001e28:	0009883a 	mov	r4,zero
 8001e2c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001e30:	014004c4 	movi	r5,19
 8001e34:	0009883a 	mov	r4,zero
 8001e38:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
 8001e3c:	01414504 	movi	r5,1300
 8001e40:	0009883a 	mov	r4,zero
 8001e44:	80002f40 	call	80002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
 8001e48:	0141a044 	movi	r5,1665
 8001e4c:	0009883a 	mov	r4,zero
 8001e50:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
 8001e54:	01484004 	movi	r5,8448
 8001e58:	0009883a 	mov	r4,zero
 8001e5c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 8001e60:	000b883a 	mov	r5,zero
 8001e64:	0009883a 	mov	r4,zero
 8001e68:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
 8001e6c:	01401ec4 	movi	r5,123
 8001e70:	0009883a 	mov	r4,zero
 8001e74:	80002f40 	call	80002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
 8001e78:	01415104 	movi	r5,1348
 8001e7c:	0009883a 	mov	r4,zero
 8001e80:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 8001e84:	01400204 	movi	r5,8
 8001e88:	0009883a 	mov	r4,zero
 8001e8c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 8001e90:	0140a404 	movi	r5,656
 8001e94:	0009883a 	mov	r4,zero
 8001e98:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 8001e9c:	01401044 	movi	r5,65
 8001ea0:	0009883a 	mov	r4,zero
 8001ea4:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 8001ea8:	014004c4 	movi	r5,19
 8001eac:	0009883a 	mov	r4,zero
 8001eb0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 8001eb4:	01414804 	movi	r5,1312
 8001eb8:	0009883a 	mov	r4,zero
 8001ebc:	80002f40 	call	80002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
 8001ec0:	000b883a 	mov	r5,zero
 8001ec4:	0009883a 	mov	r4,zero
 8001ec8:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
 8001ecc:	000b883a 	mov	r5,zero
 8001ed0:	0009883a 	mov	r4,zero
 8001ed4:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
 8001ed8:	01408404 	movi	r5,528
 8001edc:	0009883a 	mov	r4,zero
 8001ee0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 8001ee4:	01401044 	movi	r5,65
 8001ee8:	0009883a 	mov	r4,zero
 8001eec:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 8001ef0:	014004c4 	movi	r5,19
 8001ef4:	0009883a 	mov	r4,zero
 8001ef8:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
 8001efc:	000b883a 	mov	r5,zero
 8001f00:	0009883a 	mov	r4,zero
 8001f04:	80002f40 	call	80002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001f08:	01414004 	movi	r5,1280
 8001f0c:	01006c04 	movi	r4,432
 8001f10:	80011c40 	call	80011c4 <UsbWrite>

}
 8001f14:	0001883a 	nop
 8001f18:	e037883a 	mov	sp,fp
 8001f1c:	dfc00117 	ldw	ra,4(sp)
 8001f20:	df000017 	ldw	fp,0(sp)
 8001f24:	dec00204 	addi	sp,sp,8
 8001f28:	f800283a 	ret

08001f2c <UsbGetReportDesc>:


void UsbGetReportDesc()
{
 8001f2c:	defffe04 	addi	sp,sp,-8
 8001f30:	dfc00115 	stw	ra,4(sp)
 8001f34:	df000015 	stw	fp,0(sp)
 8001f38:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 8001f3c:	01414004 	movi	r5,1280
 8001f40:	01000084 	movi	r4,2
 8001f44:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
 8001f48:	01414304 	movi	r5,1292
 8001f4c:	0009883a 	mov	r4,zero
 8001f50:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 8001f54:	01400204 	movi	r5,8
 8001f58:	0009883a 	mov	r4,zero
 8001f5c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 8001f60:	0140b404 	movi	r5,720
 8001f64:	0009883a 	mov	r4,zero
 8001f68:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
 8001f6c:	01400044 	movi	r5,1
 8001f70:	0009883a 	mov	r4,zero
 8001f74:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001f78:	014004c4 	movi	r5,19
 8001f7c:	0009883a 	mov	r4,zero
 8001f80:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
 8001f84:	01414504 	movi	r5,1300
 8001f88:	0009883a 	mov	r4,zero
 8001f8c:	80002f40 	call	80002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
 8001f90:	0141a044 	movi	r5,1665
 8001f94:	0009883a 	mov	r4,zero
 8001f98:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
 8001f9c:	01488004 	movi	r5,8704
 8001fa0:	0009883a 	mov	r4,zero
 8001fa4:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 8001fa8:	000b883a 	mov	r5,zero
 8001fac:	0009883a 	mov	r4,zero
 8001fb0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
 8001fb4:	01401ec4 	movi	r5,123
 8001fb8:	0009883a 	mov	r4,zero
 8001fbc:	80002f40 	call	80002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
 8001fc0:	01416004 	movi	r5,1408
 8001fc4:	0009883a 	mov	r4,zero
 8001fc8:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 8001fcc:	01400204 	movi	r5,8
 8001fd0:	0009883a 	mov	r4,zero
 8001fd4:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 8001fd8:	0140a404 	movi	r5,656
 8001fdc:	0009883a 	mov	r4,zero
 8001fe0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 8001fe4:	01401044 	movi	r5,65
 8001fe8:	0009883a 	mov	r4,zero
 8001fec:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 8001ff0:	014004c4 	movi	r5,19
 8001ff4:	0009883a 	mov	r4,zero
 8001ff8:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 8001ffc:	01414804 	movi	r5,1312
 8002000:	0009883a 	mov	r4,zero
 8002004:	80002f40 	call	80002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
 8002008:	01416204 	movi	r5,1416
 800200c:	0009883a 	mov	r4,zero
 8002010:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 8002014:	01400204 	movi	r5,8
 8002018:	0009883a 	mov	r4,zero
 800201c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 8002020:	0140a404 	movi	r5,656
 8002024:	0009883a 	mov	r4,zero
 8002028:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 800202c:	01400044 	movi	r5,1
 8002030:	0009883a 	mov	r4,zero
 8002034:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 8002038:	014004c4 	movi	r5,19
 800203c:	0009883a 	mov	r4,zero
 8002040:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 8002044:	01414b04 	movi	r5,1324
 8002048:	0009883a 	mov	r4,zero
 800204c:	80002f40 	call	80002f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
 8002050:	01416404 	movi	r5,1424
 8002054:	0009883a 	mov	r4,zero
 8002058:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
 800205c:	01400204 	movi	r5,8
 8002060:	0009883a 	mov	r4,zero
 8002064:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
 8002068:	0140a404 	movi	r5,656
 800206c:	0009883a 	mov	r4,zero
 8002070:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 8002074:	01401044 	movi	r5,65
 8002078:	0009883a 	mov	r4,zero
 800207c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 8002080:	014004c4 	movi	r5,19
 8002084:	0009883a 	mov	r4,zero
 8002088:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
 800208c:	01414e04 	movi	r5,1336
 8002090:	0009883a 	mov	r4,zero
 8002094:	80002f40 	call	80002f4 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
 8002098:	01416604 	movi	r5,1432
 800209c:	0009883a 	mov	r4,zero
 80020a0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
 80020a4:	01400204 	movi	r5,8
 80020a8:	0009883a 	mov	r4,zero
 80020ac:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
 80020b0:	0140a404 	movi	r5,656
 80020b4:	0009883a 	mov	r4,zero
 80020b8:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
 80020bc:	01400044 	movi	r5,1
 80020c0:	0009883a 	mov	r4,zero
 80020c4:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
 80020c8:	014004c4 	movi	r5,19
 80020cc:	0009883a 	mov	r4,zero
 80020d0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
 80020d4:	01415104 	movi	r5,1348
 80020d8:	0009883a 	mov	r4,zero
 80020dc:	80002f40 	call	80002f4 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
 80020e0:	01416804 	movi	r5,1440
 80020e4:	0009883a 	mov	r4,zero
 80020e8:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 80020ec:	01400204 	movi	r5,8
 80020f0:	0009883a 	mov	r4,zero
 80020f4:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 80020f8:	0140a404 	movi	r5,656
 80020fc:	0009883a 	mov	r4,zero
 8002100:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
 8002104:	01401044 	movi	r5,65
 8002108:	0009883a 	mov	r4,zero
 800210c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 8002110:	014004c4 	movi	r5,19
 8002114:	0009883a 	mov	r4,zero
 8002118:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
 800211c:	01415404 	movi	r5,1360
 8002120:	0009883a 	mov	r4,zero
 8002124:	80002f40 	call	80002f4 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
 8002128:	01416a04 	movi	r5,1448
 800212c:	0009883a 	mov	r4,zero
 8002130:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 8002134:	01400204 	movi	r5,8
 8002138:	0009883a 	mov	r4,zero
 800213c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 8002140:	0140a404 	movi	r5,656
 8002144:	0009883a 	mov	r4,zero
 8002148:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 800214c:	01400044 	movi	r5,1
 8002150:	0009883a 	mov	r4,zero
 8002154:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 8002158:	014004c4 	movi	r5,19
 800215c:	0009883a 	mov	r4,zero
 8002160:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
 8002164:	01415704 	movi	r5,1372
 8002168:	0009883a 	mov	r4,zero
 800216c:	80002f40 	call	80002f4 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
 8002170:	01416c04 	movi	r5,1456
 8002174:	0009883a 	mov	r4,zero
 8002178:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
 800217c:	01400204 	movi	r5,8
 8002180:	0009883a 	mov	r4,zero
 8002184:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
 8002188:	0140a404 	movi	r5,656
 800218c:	0009883a 	mov	r4,zero
 8002190:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
 8002194:	01401044 	movi	r5,65
 8002198:	0009883a 	mov	r4,zero
 800219c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 80021a0:	014004c4 	movi	r5,19
 80021a4:	0009883a 	mov	r4,zero
 80021a8:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
 80021ac:	01415a04 	movi	r5,1384
 80021b0:	0009883a 	mov	r4,zero
 80021b4:	80002f40 	call	80002f4 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
 80021b8:	01416e04 	movi	r5,1464
 80021bc:	0009883a 	mov	r4,zero
 80021c0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
 80021c4:	014000c4 	movi	r5,3
 80021c8:	0009883a 	mov	r4,zero
 80021cc:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
 80021d0:	0140a404 	movi	r5,656
 80021d4:	0009883a 	mov	r4,zero
 80021d8:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
 80021dc:	01400044 	movi	r5,1
 80021e0:	0009883a 	mov	r4,zero
 80021e4:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
 80021e8:	014004c4 	movi	r5,19
 80021ec:	0009883a 	mov	r4,zero
 80021f0:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
 80021f4:	01415d04 	movi	r5,1396
 80021f8:	0009883a 	mov	r4,zero
 80021fc:	80002f40 	call	80002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
 8002200:	000b883a 	mov	r5,zero
 8002204:	0009883a 	mov	r4,zero
 8002208:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
 800220c:	000b883a 	mov	r5,zero
 8002210:	0009883a 	mov	r4,zero
 8002214:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
 8002218:	01408404 	movi	r5,528
 800221c:	0009883a 	mov	r4,zero
 8002220:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 8002224:	01401044 	movi	r5,65
 8002228:	0009883a 	mov	r4,zero
 800222c:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 8002230:	014004c4 	movi	r5,19
 8002234:	0009883a 	mov	r4,zero
 8002238:	80002f40 	call	80002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
 800223c:	000b883a 	mov	r5,zero
 8002240:	0009883a 	mov	r4,zero
 8002244:	80002f40 	call	80002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8002248:	01414004 	movi	r5,1280
 800224c:	01006c04 	movi	r4,432
 8002250:	80011c40 	call	80011c4 <UsbWrite>

}
 8002254:	0001883a 	nop
 8002258:	e037883a 	mov	sp,fp
 800225c:	dfc00117 	ldw	ra,4(sp)
 8002260:	df000017 	ldw	fp,0(sp)
 8002264:	dec00204 	addi	sp,sp,8
 8002268:	f800283a 	ret

0800226c <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
 800226c:	defffd04 	addi	sp,sp,-12
 8002270:	dfc00215 	stw	ra,8(sp)
 8002274:	df000115 	stw	fp,4(sp)
 8002278:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
 800227c:	01005104 	movi	r4,324
 8002280:	80012340 	call	8001234 <UsbRead>
 8002284:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
 8002288:	000b883a 	mov	r5,zero
 800228c:	01005104 	movi	r4,324
 8002290:	80011c40 	call	80011c4 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
 8002294:	00000d06 	br	80022cc <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
 8002298:	e0bfff0b 	ldhu	r2,-4(fp)
 800229c:	10000526 	beq	r2,zero,80022b4 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
 80022a0:	e0bfff0b 	ldhu	r2,-4(fp)
 80022a4:	100b883a 	mov	r5,r2
 80022a8:	01020074 	movhi	r4,2049
 80022ac:	2108bd04 	addi	r4,r4,8948
 80022b0:	80024200 	call	8002420 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
 80022b4:	01005104 	movi	r4,324
 80022b8:	80012340 	call	8001234 <UsbRead>
 80022bc:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
 80022c0:	000b883a 	mov	r5,zero
 80022c4:	01005104 	movi	r4,324
 80022c8:	80011c40 	call	80011c4 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
 80022cc:	e0bfff0b 	ldhu	r2,-4(fp)
 80022d0:	10840018 	cmpnei	r2,r2,4096
 80022d4:	103ff01e 	bne	r2,zero,8002298 <__alt_data_end+0xfc002298>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
 80022d8:	e0bfff0b 	ldhu	r2,-4(fp)
}
 80022dc:	e037883a 	mov	sp,fp
 80022e0:	dfc00117 	ldw	ra,4(sp)
 80022e4:	df000017 	ldw	fp,0(sp)
 80022e8:	dec00204 	addi	sp,sp,8
 80022ec:	f800283a 	ret

080022f0 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
 80022f0:	defffd04 	addi	sp,sp,-12
 80022f4:	dfc00215 	stw	ra,8(sp)
 80022f8:	df000115 	stw	fp,4(sp)
 80022fc:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
 8002300:	010000c4 	movi	r4,3
 8002304:	80003700 	call	8000370 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
 8002308:	01005104 	movi	r4,324
 800230c:	80012340 	call	8001234 <UsbRead>
 8002310:	10bfffcc 	andi	r2,r2,65535
 8002314:	10840018 	cmpnei	r2,r2,4096
 8002318:	1000091e 	bne	r2,zero,8002340 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
 800231c:	000b883a 	mov	r5,zero
 8002320:	01005104 	movi	r4,324
 8002324:	80011c40 	call	80011c4 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8002328:	0001883a 	nop
 800232c:	010000c4 	movi	r4,3
 8002330:	80003700 	call	8000370 <IO_read>
 8002334:	10bfffcc 	andi	r2,r2,65535
 8002338:	1080040c 	andi	r2,r2,16
 800233c:	103ffb26 	beq	r2,zero,800232c <__alt_data_end+0xfc00232c>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
 8002340:	01414204 	movi	r5,1288
 8002344:	01000084 	movi	r4,2
 8002348:	80002f40 	call	80002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 800234c:	0009883a 	mov	r4,zero
 8002350:	80003700 	call	8000370 <IO_read>
 8002354:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
 8002358:	e0bfff0b 	ldhu	r2,-4(fp)
}
 800235c:	e037883a 	mov	sp,fp
 8002360:	dfc00117 	ldw	ra,4(sp)
 8002364:	df000017 	ldw	fp,0(sp)
 8002368:	dec00204 	addi	sp,sp,8
 800236c:	f800283a 	ret

08002370 <UsbPrintMem>:


void UsbPrintMem()
{
 8002370:	defffc04 	addi	sp,sp,-16
 8002374:	dfc00315 	stw	ra,12(sp)
 8002378:	df000215 	stw	fp,8(sp)
 800237c:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
 8002380:	01414004 	movi	r5,1280
 8002384:	01000084 	movi	r4,2
 8002388:	80002f40 	call	80002f4 <IO_write>
	for (i = 0; i <= 200; i += 2)
 800238c:	e03ffe15 	stw	zero,-8(fp)
 8002390:	00000e06 	br	80023cc <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
 8002394:	0009883a 	mov	r4,zero
 8002398:	80003700 	call	8000370 <IO_read>
 800239c:	10bfffcc 	andi	r2,r2,65535
 80023a0:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
 80023a4:	e0bffe17 	ldw	r2,-8(fp)
 80023a8:	10814004 	addi	r2,r2,1280
 80023ac:	e1bfff17 	ldw	r6,-4(fp)
 80023b0:	100b883a 	mov	r5,r2
 80023b4:	01020074 	movhi	r4,2049
 80023b8:	2108c504 	addi	r4,r4,8980
 80023bc:	80024200 	call	8002420 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
 80023c0:	e0bffe17 	ldw	r2,-8(fp)
 80023c4:	10800084 	addi	r2,r2,2
 80023c8:	e0bffe15 	stw	r2,-8(fp)
 80023cc:	e0bffe17 	ldw	r2,-8(fp)
 80023d0:	10803250 	cmplti	r2,r2,201
 80023d4:	103fef1e 	bne	r2,zero,8002394 <__alt_data_end+0xfc002394>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
 80023d8:	0001883a 	nop
 80023dc:	e037883a 	mov	sp,fp
 80023e0:	dfc00117 	ldw	ra,4(sp)
 80023e4:	df000017 	ldw	fp,0(sp)
 80023e8:	dec00204 	addi	sp,sp,8
 80023ec:	f800283a 	ret

080023f0 <_printf_r>:
 80023f0:	defffd04 	addi	sp,sp,-12
 80023f4:	2805883a 	mov	r2,r5
 80023f8:	dfc00015 	stw	ra,0(sp)
 80023fc:	d9800115 	stw	r6,4(sp)
 8002400:	d9c00215 	stw	r7,8(sp)
 8002404:	21400217 	ldw	r5,8(r4)
 8002408:	d9c00104 	addi	r7,sp,4
 800240c:	100d883a 	mov	r6,r2
 8002410:	80025c80 	call	80025c8 <___vfprintf_internal_r>
 8002414:	dfc00017 	ldw	ra,0(sp)
 8002418:	dec00304 	addi	sp,sp,12
 800241c:	f800283a 	ret

08002420 <printf>:
 8002420:	defffc04 	addi	sp,sp,-16
 8002424:	dfc00015 	stw	ra,0(sp)
 8002428:	d9400115 	stw	r5,4(sp)
 800242c:	d9800215 	stw	r6,8(sp)
 8002430:	d9c00315 	stw	r7,12(sp)
 8002434:	00820074 	movhi	r2,2049
 8002438:	10903604 	addi	r2,r2,16600
 800243c:	10800017 	ldw	r2,0(r2)
 8002440:	200b883a 	mov	r5,r4
 8002444:	d9800104 	addi	r6,sp,4
 8002448:	11000217 	ldw	r4,8(r2)
 800244c:	80048a40 	call	80048a4 <__vfprintf_internal>
 8002450:	dfc00017 	ldw	ra,0(sp)
 8002454:	dec00404 	addi	sp,sp,16
 8002458:	f800283a 	ret

0800245c <_puts_r>:
 800245c:	defff604 	addi	sp,sp,-40
 8002460:	dc000715 	stw	r16,28(sp)
 8002464:	2021883a 	mov	r16,r4
 8002468:	2809883a 	mov	r4,r5
 800246c:	dc400815 	stw	r17,32(sp)
 8002470:	dfc00915 	stw	ra,36(sp)
 8002474:	2823883a 	mov	r17,r5
 8002478:	80025300 	call	8002530 <strlen>
 800247c:	10c00044 	addi	r3,r2,1
 8002480:	d8800115 	stw	r2,4(sp)
 8002484:	00820074 	movhi	r2,2049
 8002488:	1088ca04 	addi	r2,r2,9000
 800248c:	d8800215 	stw	r2,8(sp)
 8002490:	00800044 	movi	r2,1
 8002494:	d8800315 	stw	r2,12(sp)
 8002498:	00800084 	movi	r2,2
 800249c:	dc400015 	stw	r17,0(sp)
 80024a0:	d8c00615 	stw	r3,24(sp)
 80024a4:	dec00415 	stw	sp,16(sp)
 80024a8:	d8800515 	stw	r2,20(sp)
 80024ac:	80000226 	beq	r16,zero,80024b8 <_puts_r+0x5c>
 80024b0:	80800e17 	ldw	r2,56(r16)
 80024b4:	10001426 	beq	r2,zero,8002508 <_puts_r+0xac>
 80024b8:	81400217 	ldw	r5,8(r16)
 80024bc:	2880030b 	ldhu	r2,12(r5)
 80024c0:	10c8000c 	andi	r3,r2,8192
 80024c4:	1800061e 	bne	r3,zero,80024e0 <_puts_r+0x84>
 80024c8:	29001917 	ldw	r4,100(r5)
 80024cc:	00f7ffc4 	movi	r3,-8193
 80024d0:	10880014 	ori	r2,r2,8192
 80024d4:	20c6703a 	and	r3,r4,r3
 80024d8:	2880030d 	sth	r2,12(r5)
 80024dc:	28c01915 	stw	r3,100(r5)
 80024e0:	d9800404 	addi	r6,sp,16
 80024e4:	8009883a 	mov	r4,r16
 80024e8:	8006e0c0 	call	8006e0c <__sfvwrite_r>
 80024ec:	1000091e 	bne	r2,zero,8002514 <_puts_r+0xb8>
 80024f0:	00800284 	movi	r2,10
 80024f4:	dfc00917 	ldw	ra,36(sp)
 80024f8:	dc400817 	ldw	r17,32(sp)
 80024fc:	dc000717 	ldw	r16,28(sp)
 8002500:	dec00a04 	addi	sp,sp,40
 8002504:	f800283a 	ret
 8002508:	8009883a 	mov	r4,r16
 800250c:	80069880 	call	8006988 <__sinit>
 8002510:	003fe906 	br	80024b8 <__alt_data_end+0xfc0024b8>
 8002514:	00bfffc4 	movi	r2,-1
 8002518:	003ff606 	br	80024f4 <__alt_data_end+0xfc0024f4>

0800251c <puts>:
 800251c:	00820074 	movhi	r2,2049
 8002520:	10903604 	addi	r2,r2,16600
 8002524:	200b883a 	mov	r5,r4
 8002528:	11000017 	ldw	r4,0(r2)
 800252c:	800245c1 	jmpi	800245c <_puts_r>

08002530 <strlen>:
 8002530:	208000cc 	andi	r2,r4,3
 8002534:	10002026 	beq	r2,zero,80025b8 <strlen+0x88>
 8002538:	20800007 	ldb	r2,0(r4)
 800253c:	10002026 	beq	r2,zero,80025c0 <strlen+0x90>
 8002540:	2005883a 	mov	r2,r4
 8002544:	00000206 	br	8002550 <strlen+0x20>
 8002548:	10c00007 	ldb	r3,0(r2)
 800254c:	18001826 	beq	r3,zero,80025b0 <strlen+0x80>
 8002550:	10800044 	addi	r2,r2,1
 8002554:	10c000cc 	andi	r3,r2,3
 8002558:	183ffb1e 	bne	r3,zero,8002548 <__alt_data_end+0xfc002548>
 800255c:	10c00017 	ldw	r3,0(r2)
 8002560:	01ffbff4 	movhi	r7,65279
 8002564:	39ffbfc4 	addi	r7,r7,-257
 8002568:	00ca303a 	nor	r5,zero,r3
 800256c:	01a02074 	movhi	r6,32897
 8002570:	19c7883a 	add	r3,r3,r7
 8002574:	31a02004 	addi	r6,r6,-32640
 8002578:	1946703a 	and	r3,r3,r5
 800257c:	1986703a 	and	r3,r3,r6
 8002580:	1800091e 	bne	r3,zero,80025a8 <strlen+0x78>
 8002584:	10800104 	addi	r2,r2,4
 8002588:	10c00017 	ldw	r3,0(r2)
 800258c:	19cb883a 	add	r5,r3,r7
 8002590:	00c6303a 	nor	r3,zero,r3
 8002594:	28c6703a 	and	r3,r5,r3
 8002598:	1986703a 	and	r3,r3,r6
 800259c:	183ff926 	beq	r3,zero,8002584 <__alt_data_end+0xfc002584>
 80025a0:	00000106 	br	80025a8 <strlen+0x78>
 80025a4:	10800044 	addi	r2,r2,1
 80025a8:	10c00007 	ldb	r3,0(r2)
 80025ac:	183ffd1e 	bne	r3,zero,80025a4 <__alt_data_end+0xfc0025a4>
 80025b0:	1105c83a 	sub	r2,r2,r4
 80025b4:	f800283a 	ret
 80025b8:	2005883a 	mov	r2,r4
 80025bc:	003fe706 	br	800255c <__alt_data_end+0xfc00255c>
 80025c0:	0005883a 	mov	r2,zero
 80025c4:	f800283a 	ret

080025c8 <___vfprintf_internal_r>:
 80025c8:	deffb804 	addi	sp,sp,-288
 80025cc:	dfc04715 	stw	ra,284(sp)
 80025d0:	ddc04515 	stw	r23,276(sp)
 80025d4:	dd404315 	stw	r21,268(sp)
 80025d8:	d9002d15 	stw	r4,180(sp)
 80025dc:	282f883a 	mov	r23,r5
 80025e0:	302b883a 	mov	r21,r6
 80025e4:	d9c02e15 	stw	r7,184(sp)
 80025e8:	df004615 	stw	fp,280(sp)
 80025ec:	dd804415 	stw	r22,272(sp)
 80025f0:	dd004215 	stw	r20,264(sp)
 80025f4:	dcc04115 	stw	r19,260(sp)
 80025f8:	dc804015 	stw	r18,256(sp)
 80025fc:	dc403f15 	stw	r17,252(sp)
 8002600:	dc003e15 	stw	r16,248(sp)
 8002604:	80075080 	call	8007508 <_localeconv_r>
 8002608:	10800017 	ldw	r2,0(r2)
 800260c:	1009883a 	mov	r4,r2
 8002610:	d8803415 	stw	r2,208(sp)
 8002614:	80025300 	call	8002530 <strlen>
 8002618:	d8803715 	stw	r2,220(sp)
 800261c:	d8802d17 	ldw	r2,180(sp)
 8002620:	10000226 	beq	r2,zero,800262c <___vfprintf_internal_r+0x64>
 8002624:	10800e17 	ldw	r2,56(r2)
 8002628:	1000fb26 	beq	r2,zero,8002a18 <___vfprintf_internal_r+0x450>
 800262c:	b880030b 	ldhu	r2,12(r23)
 8002630:	10c8000c 	andi	r3,r2,8192
 8002634:	1800061e 	bne	r3,zero,8002650 <___vfprintf_internal_r+0x88>
 8002638:	b9001917 	ldw	r4,100(r23)
 800263c:	00f7ffc4 	movi	r3,-8193
 8002640:	10880014 	ori	r2,r2,8192
 8002644:	20c6703a 	and	r3,r4,r3
 8002648:	b880030d 	sth	r2,12(r23)
 800264c:	b8c01915 	stw	r3,100(r23)
 8002650:	10c0020c 	andi	r3,r2,8
 8002654:	1800c326 	beq	r3,zero,8002964 <___vfprintf_internal_r+0x39c>
 8002658:	b8c00417 	ldw	r3,16(r23)
 800265c:	1800c126 	beq	r3,zero,8002964 <___vfprintf_internal_r+0x39c>
 8002660:	1080068c 	andi	r2,r2,26
 8002664:	00c00284 	movi	r3,10
 8002668:	10c0c626 	beq	r2,r3,8002984 <___vfprintf_internal_r+0x3bc>
 800266c:	d8c00404 	addi	r3,sp,16
 8002670:	05020074 	movhi	r20,2049
 8002674:	d9001e04 	addi	r4,sp,120
 8002678:	a508db84 	addi	r20,r20,9070
 800267c:	d8c01e15 	stw	r3,120(sp)
 8002680:	d8002015 	stw	zero,128(sp)
 8002684:	d8001f15 	stw	zero,124(sp)
 8002688:	d8003315 	stw	zero,204(sp)
 800268c:	d8003615 	stw	zero,216(sp)
 8002690:	d8003815 	stw	zero,224(sp)
 8002694:	1811883a 	mov	r8,r3
 8002698:	d8003915 	stw	zero,228(sp)
 800269c:	d8003a15 	stw	zero,232(sp)
 80026a0:	d8002f15 	stw	zero,188(sp)
 80026a4:	d9002815 	stw	r4,160(sp)
 80026a8:	a8800007 	ldb	r2,0(r21)
 80026ac:	10028b26 	beq	r2,zero,80030dc <___vfprintf_internal_r+0xb14>
 80026b0:	00c00944 	movi	r3,37
 80026b4:	a823883a 	mov	r17,r21
 80026b8:	10c0021e 	bne	r2,r3,80026c4 <___vfprintf_internal_r+0xfc>
 80026bc:	00001406 	br	8002710 <___vfprintf_internal_r+0x148>
 80026c0:	10c00326 	beq	r2,r3,80026d0 <___vfprintf_internal_r+0x108>
 80026c4:	8c400044 	addi	r17,r17,1
 80026c8:	88800007 	ldb	r2,0(r17)
 80026cc:	103ffc1e 	bne	r2,zero,80026c0 <__alt_data_end+0xfc0026c0>
 80026d0:	8d61c83a 	sub	r16,r17,r21
 80026d4:	80000e26 	beq	r16,zero,8002710 <___vfprintf_internal_r+0x148>
 80026d8:	d8c02017 	ldw	r3,128(sp)
 80026dc:	d8801f17 	ldw	r2,124(sp)
 80026e0:	45400015 	stw	r21,0(r8)
 80026e4:	1c07883a 	add	r3,r3,r16
 80026e8:	10800044 	addi	r2,r2,1
 80026ec:	d8c02015 	stw	r3,128(sp)
 80026f0:	44000115 	stw	r16,4(r8)
 80026f4:	d8801f15 	stw	r2,124(sp)
 80026f8:	00c001c4 	movi	r3,7
 80026fc:	1880a916 	blt	r3,r2,80029a4 <___vfprintf_internal_r+0x3dc>
 8002700:	42000204 	addi	r8,r8,8
 8002704:	d9402f17 	ldw	r5,188(sp)
 8002708:	2c0b883a 	add	r5,r5,r16
 800270c:	d9402f15 	stw	r5,188(sp)
 8002710:	88800007 	ldb	r2,0(r17)
 8002714:	1000aa26 	beq	r2,zero,80029c0 <___vfprintf_internal_r+0x3f8>
 8002718:	8d400044 	addi	r21,r17,1
 800271c:	8c400047 	ldb	r17,1(r17)
 8002720:	0021883a 	mov	r16,zero
 8002724:	00bfffc4 	movi	r2,-1
 8002728:	0025883a 	mov	r18,zero
 800272c:	dc002905 	stb	r16,164(sp)
 8002730:	d8002785 	stb	zero,158(sp)
 8002734:	d8002b05 	stb	zero,172(sp)
 8002738:	d8802a15 	stw	r2,168(sp)
 800273c:	d8003115 	stw	zero,196(sp)
 8002740:	04c01604 	movi	r19,88
 8002744:	05800244 	movi	r22,9
 8002748:	9021883a 	mov	r16,r18
 800274c:	4039883a 	mov	fp,r8
 8002750:	ad400044 	addi	r21,r21,1
 8002754:	88bff804 	addi	r2,r17,-32
 8002758:	98833236 	bltu	r19,r2,8003424 <___vfprintf_internal_r+0xe5c>
 800275c:	100490ba 	slli	r2,r2,2
 8002760:	00c20034 	movhi	r3,2048
 8002764:	18c9dd04 	addi	r3,r3,10100
 8002768:	10c5883a 	add	r2,r2,r3
 800276c:	10800017 	ldw	r2,0(r2)
 8002770:	1000683a 	jmp	r2
 8002774:	0800331c 	xori	zero,at,204
 8002778:	08003424 	muli	zero,at,208
 800277c:	08003424 	muli	zero,at,208
 8002780:	0800333c 	xorhi	zero,at,204
 8002784:	08003424 	muli	zero,at,208
 8002788:	08003424 	muli	zero,at,208
 800278c:	08003424 	muli	zero,at,208
 8002790:	08003424 	muli	zero,at,208
 8002794:	08003424 	muli	zero,at,208
 8002798:	08003424 	muli	zero,at,208
 800279c:	08002a24 	muli	zero,at,168
 80027a0:	0800322c 	andhi	zero,at,200
 80027a4:	08003424 	muli	zero,at,208
 80027a8:	080028e8 	cmpgeui	zero,at,163
 80027ac:	08002a48 	cmpgei	zero,at,169
 80027b0:	08003424 	muli	zero,at,208
 80027b4:	08002a98 	cmpnei	zero,at,170
 80027b8:	08002aa4 	muli	zero,at,170
 80027bc:	08002aa4 	muli	zero,at,170
 80027c0:	08002aa4 	muli	zero,at,170
 80027c4:	08002aa4 	muli	zero,at,170
 80027c8:	08002aa4 	muli	zero,at,170
 80027cc:	08002aa4 	muli	zero,at,170
 80027d0:	08002aa4 	muli	zero,at,170
 80027d4:	08002aa4 	muli	zero,at,170
 80027d8:	08002aa4 	muli	zero,at,170
 80027dc:	08003424 	muli	zero,at,208
 80027e0:	08003424 	muli	zero,at,208
 80027e4:	08003424 	muli	zero,at,208
 80027e8:	08003424 	muli	zero,at,208
 80027ec:	08003424 	muli	zero,at,208
 80027f0:	08003424 	muli	zero,at,208
 80027f4:	08003424 	muli	zero,at,208
 80027f8:	08003424 	muli	zero,at,208
 80027fc:	08003424 	muli	zero,at,208
 8002800:	08003424 	muli	zero,at,208
 8002804:	08002ae0 	cmpeqi	zero,at,171
 8002808:	08002ba8 	cmpgeui	zero,at,174
 800280c:	08003424 	muli	zero,at,208
 8002810:	08002ba8 	cmpgeui	zero,at,174
 8002814:	08003424 	muli	zero,at,208
 8002818:	08003424 	muli	zero,at,208
 800281c:	08003424 	muli	zero,at,208
 8002820:	08003424 	muli	zero,at,208
 8002824:	08002c54 	ori	zero,at,177
 8002828:	08003424 	muli	zero,at,208
 800282c:	08003424 	muli	zero,at,208
 8002830:	08002c60 	cmpeqi	zero,at,177
 8002834:	08003424 	muli	zero,at,208
 8002838:	08003424 	muli	zero,at,208
 800283c:	08003424 	muli	zero,at,208
 8002840:	08003424 	muli	zero,at,208
 8002844:	08003424 	muli	zero,at,208
 8002848:	080030e4 	muli	zero,at,195
 800284c:	08003424 	muli	zero,at,208
 8002850:	08003424 	muli	zero,at,208
 8002854:	08003150 	cmplti	zero,at,197
 8002858:	08003424 	muli	zero,at,208
 800285c:	08003424 	muli	zero,at,208
 8002860:	08003424 	muli	zero,at,208
 8002864:	08003424 	muli	zero,at,208
 8002868:	08003424 	muli	zero,at,208
 800286c:	08003424 	muli	zero,at,208
 8002870:	08003424 	muli	zero,at,208
 8002874:	08003424 	muli	zero,at,208
 8002878:	08003424 	muli	zero,at,208
 800287c:	08003424 	muli	zero,at,208
 8002880:	080033c8 	cmpgei	zero,at,207
 8002884:	08003348 	cmpgei	zero,at,205
 8002888:	08002ba8 	cmpgeui	zero,at,174
 800288c:	08002ba8 	cmpgeui	zero,at,174
 8002890:	08002ba8 	cmpgeui	zero,at,174
 8002894:	08003368 	cmpgeui	zero,at,205
 8002898:	08003348 	cmpgei	zero,at,205
 800289c:	08003424 	muli	zero,at,208
 80028a0:	08003424 	muli	zero,at,208
 80028a4:	08003374 	orhi	zero,at,205
 80028a8:	08003424 	muli	zero,at,208
 80028ac:	08003388 	cmpgei	zero,at,206
 80028b0:	0800320c 	andi	zero,at,200
 80028b4:	080028f4 	orhi	zero,at,163
 80028b8:	08003244 	addi	zero,at,201
 80028bc:	08003424 	muli	zero,at,208
 80028c0:	08003250 	cmplti	zero,at,201
 80028c4:	08003424 	muli	zero,at,208
 80028c8:	080032b4 	orhi	zero,at,202
 80028cc:	08003424 	muli	zero,at,208
 80028d0:	08003424 	muli	zero,at,208
 80028d4:	080032d4 	ori	zero,at,203
 80028d8:	d8c03117 	ldw	r3,196(sp)
 80028dc:	d8802e15 	stw	r2,184(sp)
 80028e0:	00c7c83a 	sub	r3,zero,r3
 80028e4:	d8c03115 	stw	r3,196(sp)
 80028e8:	84000114 	ori	r16,r16,4
 80028ec:	ac400007 	ldb	r17,0(r21)
 80028f0:	003f9706 	br	8002750 <__alt_data_end+0xfc002750>
 80028f4:	00800c04 	movi	r2,48
 80028f8:	d8802705 	stb	r2,156(sp)
 80028fc:	00801e04 	movi	r2,120
 8002900:	d8802745 	stb	r2,157(sp)
 8002904:	d9002a17 	ldw	r4,168(sp)
 8002908:	d8802e17 	ldw	r2,184(sp)
 800290c:	d8002785 	stb	zero,158(sp)
 8002910:	e011883a 	mov	r8,fp
 8002914:	10c00104 	addi	r3,r2,4
 8002918:	14c00017 	ldw	r19,0(r2)
 800291c:	002d883a 	mov	r22,zero
 8002920:	80800094 	ori	r2,r16,2
 8002924:	2002ca16 	blt	r4,zero,8003450 <___vfprintf_internal_r+0xe88>
 8002928:	00bfdfc4 	movi	r2,-129
 800292c:	80a4703a 	and	r18,r16,r2
 8002930:	d8c02e15 	stw	r3,184(sp)
 8002934:	94800094 	ori	r18,r18,2
 8002938:	9802b41e 	bne	r19,zero,800340c <___vfprintf_internal_r+0xe44>
 800293c:	01420074 	movhi	r5,2049
 8002940:	2948d404 	addi	r5,r5,9040
 8002944:	d9403915 	stw	r5,228(sp)
 8002948:	04401e04 	movi	r17,120
 800294c:	d8802a17 	ldw	r2,168(sp)
 8002950:	0039883a 	mov	fp,zero
 8002954:	1001fa26 	beq	r2,zero,8003140 <___vfprintf_internal_r+0xb78>
 8002958:	0027883a 	mov	r19,zero
 800295c:	002d883a 	mov	r22,zero
 8002960:	00021906 	br	80031c8 <___vfprintf_internal_r+0xc00>
 8002964:	d9002d17 	ldw	r4,180(sp)
 8002968:	b80b883a 	mov	r5,r23
 800296c:	800497c0 	call	800497c <__swsetup_r>
 8002970:	1005dc1e 	bne	r2,zero,80040e4 <___vfprintf_internal_r+0x1b1c>
 8002974:	b880030b 	ldhu	r2,12(r23)
 8002978:	00c00284 	movi	r3,10
 800297c:	1080068c 	andi	r2,r2,26
 8002980:	10ff3a1e 	bne	r2,r3,800266c <__alt_data_end+0xfc00266c>
 8002984:	b880038f 	ldh	r2,14(r23)
 8002988:	103f3816 	blt	r2,zero,800266c <__alt_data_end+0xfc00266c>
 800298c:	d9c02e17 	ldw	r7,184(sp)
 8002990:	d9002d17 	ldw	r4,180(sp)
 8002994:	a80d883a 	mov	r6,r21
 8002998:	b80b883a 	mov	r5,r23
 800299c:	80048c00 	call	80048c0 <__sbprintf>
 80029a0:	00001106 	br	80029e8 <___vfprintf_internal_r+0x420>
 80029a4:	d9002d17 	ldw	r4,180(sp)
 80029a8:	d9801e04 	addi	r6,sp,120
 80029ac:	b80b883a 	mov	r5,r23
 80029b0:	8009da80 	call	8009da8 <__sprint_r>
 80029b4:	1000081e 	bne	r2,zero,80029d8 <___vfprintf_internal_r+0x410>
 80029b8:	da000404 	addi	r8,sp,16
 80029bc:	003f5106 	br	8002704 <__alt_data_end+0xfc002704>
 80029c0:	d8802017 	ldw	r2,128(sp)
 80029c4:	10000426 	beq	r2,zero,80029d8 <___vfprintf_internal_r+0x410>
 80029c8:	d9002d17 	ldw	r4,180(sp)
 80029cc:	d9801e04 	addi	r6,sp,120
 80029d0:	b80b883a 	mov	r5,r23
 80029d4:	8009da80 	call	8009da8 <__sprint_r>
 80029d8:	b880030b 	ldhu	r2,12(r23)
 80029dc:	1080100c 	andi	r2,r2,64
 80029e0:	1005c01e 	bne	r2,zero,80040e4 <___vfprintf_internal_r+0x1b1c>
 80029e4:	d8802f17 	ldw	r2,188(sp)
 80029e8:	dfc04717 	ldw	ra,284(sp)
 80029ec:	df004617 	ldw	fp,280(sp)
 80029f0:	ddc04517 	ldw	r23,276(sp)
 80029f4:	dd804417 	ldw	r22,272(sp)
 80029f8:	dd404317 	ldw	r21,268(sp)
 80029fc:	dd004217 	ldw	r20,264(sp)
 8002a00:	dcc04117 	ldw	r19,260(sp)
 8002a04:	dc804017 	ldw	r18,256(sp)
 8002a08:	dc403f17 	ldw	r17,252(sp)
 8002a0c:	dc003e17 	ldw	r16,248(sp)
 8002a10:	dec04804 	addi	sp,sp,288
 8002a14:	f800283a 	ret
 8002a18:	d9002d17 	ldw	r4,180(sp)
 8002a1c:	80069880 	call	8006988 <__sinit>
 8002a20:	003f0206 	br	800262c <__alt_data_end+0xfc00262c>
 8002a24:	d9002e17 	ldw	r4,184(sp)
 8002a28:	d9402e17 	ldw	r5,184(sp)
 8002a2c:	21000017 	ldw	r4,0(r4)
 8002a30:	28800104 	addi	r2,r5,4
 8002a34:	d9003115 	stw	r4,196(sp)
 8002a38:	203fa716 	blt	r4,zero,80028d8 <__alt_data_end+0xfc0028d8>
 8002a3c:	d8802e15 	stw	r2,184(sp)
 8002a40:	ac400007 	ldb	r17,0(r21)
 8002a44:	003f4206 	br	8002750 <__alt_data_end+0xfc002750>
 8002a48:	ac400007 	ldb	r17,0(r21)
 8002a4c:	01000a84 	movi	r4,42
 8002a50:	a8c00044 	addi	r3,r21,1
 8002a54:	89075826 	beq	r17,r4,80047b8 <___vfprintf_internal_r+0x21f0>
 8002a58:	8cbff404 	addi	r18,r17,-48
 8002a5c:	b486ae36 	bltu	r22,r18,8004518 <___vfprintf_internal_r+0x1f50>
 8002a60:	0009883a 	mov	r4,zero
 8002a64:	1823883a 	mov	r17,r3
 8002a68:	01400284 	movi	r5,10
 8002a6c:	800ca640 	call	800ca64 <__mulsi3>
 8002a70:	88c00007 	ldb	r3,0(r17)
 8002a74:	1489883a 	add	r4,r2,r18
 8002a78:	8d400044 	addi	r21,r17,1
 8002a7c:	1cbff404 	addi	r18,r3,-48
 8002a80:	a823883a 	mov	r17,r21
 8002a84:	b4bff82e 	bgeu	r22,r18,8002a68 <__alt_data_end+0xfc002a68>
 8002a88:	1823883a 	mov	r17,r3
 8002a8c:	2005f616 	blt	r4,zero,8004268 <___vfprintf_internal_r+0x1ca0>
 8002a90:	d9002a15 	stw	r4,168(sp)
 8002a94:	003f2f06 	br	8002754 <__alt_data_end+0xfc002754>
 8002a98:	84002014 	ori	r16,r16,128
 8002a9c:	ac400007 	ldb	r17,0(r21)
 8002aa0:	003f2b06 	br	8002750 <__alt_data_end+0xfc002750>
 8002aa4:	8cbff404 	addi	r18,r17,-48
 8002aa8:	d8003115 	stw	zero,196(sp)
 8002aac:	0009883a 	mov	r4,zero
 8002ab0:	a823883a 	mov	r17,r21
 8002ab4:	01400284 	movi	r5,10
 8002ab8:	800ca640 	call	800ca64 <__mulsi3>
 8002abc:	88c00007 	ldb	r3,0(r17)
 8002ac0:	9089883a 	add	r4,r18,r2
 8002ac4:	ad400044 	addi	r21,r21,1
 8002ac8:	1cbff404 	addi	r18,r3,-48
 8002acc:	a823883a 	mov	r17,r21
 8002ad0:	b4bff82e 	bgeu	r22,r18,8002ab4 <__alt_data_end+0xfc002ab4>
 8002ad4:	1823883a 	mov	r17,r3
 8002ad8:	d9003115 	stw	r4,196(sp)
 8002adc:	003f1d06 	br	8002754 <__alt_data_end+0xfc002754>
 8002ae0:	8025883a 	mov	r18,r16
 8002ae4:	dc002903 	ldbu	r16,164(sp)
 8002ae8:	e011883a 	mov	r8,fp
 8002aec:	84003fcc 	andi	r16,r16,255
 8002af0:	8007531e 	bne	r16,zero,8004840 <___vfprintf_internal_r+0x2278>
 8002af4:	94800414 	ori	r18,r18,16
 8002af8:	9080080c 	andi	r2,r18,32
 8002afc:	1003a326 	beq	r2,zero,800398c <___vfprintf_internal_r+0x13c4>
 8002b00:	d9002e17 	ldw	r4,184(sp)
 8002b04:	20800117 	ldw	r2,4(r4)
 8002b08:	24c00017 	ldw	r19,0(r4)
 8002b0c:	21000204 	addi	r4,r4,8
 8002b10:	d9002e15 	stw	r4,184(sp)
 8002b14:	102d883a 	mov	r22,r2
 8002b18:	10047316 	blt	r2,zero,8003ce8 <___vfprintf_internal_r+0x1720>
 8002b1c:	d9002a17 	ldw	r4,168(sp)
 8002b20:	df002783 	ldbu	fp,158(sp)
 8002b24:	2003e416 	blt	r4,zero,8003ab8 <___vfprintf_internal_r+0x14f0>
 8002b28:	00ffdfc4 	movi	r3,-129
 8002b2c:	9d84b03a 	or	r2,r19,r22
 8002b30:	90e4703a 	and	r18,r18,r3
 8002b34:	10018026 	beq	r2,zero,8003138 <___vfprintf_internal_r+0xb70>
 8002b38:	b003ab26 	beq	r22,zero,80039e8 <___vfprintf_internal_r+0x1420>
 8002b3c:	dc402915 	stw	r17,164(sp)
 8002b40:	dc001e04 	addi	r16,sp,120
 8002b44:	b023883a 	mov	r17,r22
 8002b48:	402d883a 	mov	r22,r8
 8002b4c:	9809883a 	mov	r4,r19
 8002b50:	880b883a 	mov	r5,r17
 8002b54:	01800284 	movi	r6,10
 8002b58:	000f883a 	mov	r7,zero
 8002b5c:	800c2ec0 	call	800c2ec <__umoddi3>
 8002b60:	10800c04 	addi	r2,r2,48
 8002b64:	843fffc4 	addi	r16,r16,-1
 8002b68:	9809883a 	mov	r4,r19
 8002b6c:	880b883a 	mov	r5,r17
 8002b70:	80800005 	stb	r2,0(r16)
 8002b74:	01800284 	movi	r6,10
 8002b78:	000f883a 	mov	r7,zero
 8002b7c:	800bcf00 	call	800bcf0 <__udivdi3>
 8002b80:	1027883a 	mov	r19,r2
 8002b84:	10c4b03a 	or	r2,r2,r3
 8002b88:	1823883a 	mov	r17,r3
 8002b8c:	103fef1e 	bne	r2,zero,8002b4c <__alt_data_end+0xfc002b4c>
 8002b90:	d8c02817 	ldw	r3,160(sp)
 8002b94:	dc402917 	ldw	r17,164(sp)
 8002b98:	b011883a 	mov	r8,r22
 8002b9c:	1c07c83a 	sub	r3,r3,r16
 8002ba0:	d8c02b15 	stw	r3,172(sp)
 8002ba4:	00005f06 	br	8002d24 <___vfprintf_internal_r+0x75c>
 8002ba8:	8025883a 	mov	r18,r16
 8002bac:	dc002903 	ldbu	r16,164(sp)
 8002bb0:	e011883a 	mov	r8,fp
 8002bb4:	84003fcc 	andi	r16,r16,255
 8002bb8:	80071e1e 	bne	r16,zero,8004834 <___vfprintf_internal_r+0x226c>
 8002bbc:	9080020c 	andi	r2,r18,8
 8002bc0:	1004af26 	beq	r2,zero,8003e80 <___vfprintf_internal_r+0x18b8>
 8002bc4:	d9002e17 	ldw	r4,184(sp)
 8002bc8:	d9402e17 	ldw	r5,184(sp)
 8002bcc:	d8802e17 	ldw	r2,184(sp)
 8002bd0:	21000017 	ldw	r4,0(r4)
 8002bd4:	29400117 	ldw	r5,4(r5)
 8002bd8:	10800204 	addi	r2,r2,8
 8002bdc:	d9003615 	stw	r4,216(sp)
 8002be0:	d9403815 	stw	r5,224(sp)
 8002be4:	d8802e15 	stw	r2,184(sp)
 8002be8:	d9003617 	ldw	r4,216(sp)
 8002bec:	d9403817 	ldw	r5,224(sp)
 8002bf0:	da003d15 	stw	r8,244(sp)
 8002bf4:	04000044 	movi	r16,1
 8002bf8:	80099cc0 	call	80099cc <__fpclassifyd>
 8002bfc:	da003d17 	ldw	r8,244(sp)
 8002c00:	1404441e 	bne	r2,r16,8003d14 <___vfprintf_internal_r+0x174c>
 8002c04:	d9003617 	ldw	r4,216(sp)
 8002c08:	d9403817 	ldw	r5,224(sp)
 8002c0c:	000d883a 	mov	r6,zero
 8002c10:	000f883a 	mov	r7,zero
 8002c14:	800de6c0 	call	800de6c <__ledf2>
 8002c18:	da003d17 	ldw	r8,244(sp)
 8002c1c:	1005e316 	blt	r2,zero,80043ac <___vfprintf_internal_r+0x1de4>
 8002c20:	df002783 	ldbu	fp,158(sp)
 8002c24:	008011c4 	movi	r2,71
 8002c28:	1445580e 	bge	r2,r17,800418c <___vfprintf_internal_r+0x1bc4>
 8002c2c:	04020074 	movhi	r16,2049
 8002c30:	8408cc04 	addi	r16,r16,9008
 8002c34:	00c000c4 	movi	r3,3
 8002c38:	00bfdfc4 	movi	r2,-129
 8002c3c:	d8c02915 	stw	r3,164(sp)
 8002c40:	90a4703a 	and	r18,r18,r2
 8002c44:	d8c02b15 	stw	r3,172(sp)
 8002c48:	d8002a15 	stw	zero,168(sp)
 8002c4c:	d8003215 	stw	zero,200(sp)
 8002c50:	00003a06 	br	8002d3c <___vfprintf_internal_r+0x774>
 8002c54:	84000214 	ori	r16,r16,8
 8002c58:	ac400007 	ldb	r17,0(r21)
 8002c5c:	003ebc06 	br	8002750 <__alt_data_end+0xfc002750>
 8002c60:	8025883a 	mov	r18,r16
 8002c64:	dc002903 	ldbu	r16,164(sp)
 8002c68:	e011883a 	mov	r8,fp
 8002c6c:	84003fcc 	andi	r16,r16,255
 8002c70:	8007001e 	bne	r16,zero,8004874 <___vfprintf_internal_r+0x22ac>
 8002c74:	94800414 	ori	r18,r18,16
 8002c78:	9080080c 	andi	r2,r18,32
 8002c7c:	1002fa26 	beq	r2,zero,8003868 <___vfprintf_internal_r+0x12a0>
 8002c80:	d9002e17 	ldw	r4,184(sp)
 8002c84:	d9402a17 	ldw	r5,168(sp)
 8002c88:	d8002785 	stb	zero,158(sp)
 8002c8c:	20800204 	addi	r2,r4,8
 8002c90:	24c00017 	ldw	r19,0(r4)
 8002c94:	25800117 	ldw	r22,4(r4)
 8002c98:	2804b116 	blt	r5,zero,8003f60 <___vfprintf_internal_r+0x1998>
 8002c9c:	013fdfc4 	movi	r4,-129
 8002ca0:	9d86b03a 	or	r3,r19,r22
 8002ca4:	d8802e15 	stw	r2,184(sp)
 8002ca8:	9124703a 	and	r18,r18,r4
 8002cac:	1802fb1e 	bne	r3,zero,800389c <___vfprintf_internal_r+0x12d4>
 8002cb0:	d8c02a17 	ldw	r3,168(sp)
 8002cb4:	0039883a 	mov	fp,zero
 8002cb8:	1805e526 	beq	r3,zero,8004450 <___vfprintf_internal_r+0x1e88>
 8002cbc:	0027883a 	mov	r19,zero
 8002cc0:	002d883a 	mov	r22,zero
 8002cc4:	dc001e04 	addi	r16,sp,120
 8002cc8:	9806d0fa 	srli	r3,r19,3
 8002ccc:	b008977a 	slli	r4,r22,29
 8002cd0:	b02cd0fa 	srli	r22,r22,3
 8002cd4:	9cc001cc 	andi	r19,r19,7
 8002cd8:	98800c04 	addi	r2,r19,48
 8002cdc:	843fffc4 	addi	r16,r16,-1
 8002ce0:	20e6b03a 	or	r19,r4,r3
 8002ce4:	80800005 	stb	r2,0(r16)
 8002ce8:	9d86b03a 	or	r3,r19,r22
 8002cec:	183ff61e 	bne	r3,zero,8002cc8 <__alt_data_end+0xfc002cc8>
 8002cf0:	90c0004c 	andi	r3,r18,1
 8002cf4:	18014126 	beq	r3,zero,80031fc <___vfprintf_internal_r+0xc34>
 8002cf8:	10803fcc 	andi	r2,r2,255
 8002cfc:	1080201c 	xori	r2,r2,128
 8002d00:	10bfe004 	addi	r2,r2,-128
 8002d04:	00c00c04 	movi	r3,48
 8002d08:	10c13c26 	beq	r2,r3,80031fc <___vfprintf_internal_r+0xc34>
 8002d0c:	80ffffc5 	stb	r3,-1(r16)
 8002d10:	d8c02817 	ldw	r3,160(sp)
 8002d14:	80bfffc4 	addi	r2,r16,-1
 8002d18:	1021883a 	mov	r16,r2
 8002d1c:	1887c83a 	sub	r3,r3,r2
 8002d20:	d8c02b15 	stw	r3,172(sp)
 8002d24:	d8802b17 	ldw	r2,172(sp)
 8002d28:	d9002a17 	ldw	r4,168(sp)
 8002d2c:	1100010e 	bge	r2,r4,8002d34 <___vfprintf_internal_r+0x76c>
 8002d30:	2005883a 	mov	r2,r4
 8002d34:	d8802915 	stw	r2,164(sp)
 8002d38:	d8003215 	stw	zero,200(sp)
 8002d3c:	e7003fcc 	andi	fp,fp,255
 8002d40:	e700201c 	xori	fp,fp,128
 8002d44:	e73fe004 	addi	fp,fp,-128
 8002d48:	e0000326 	beq	fp,zero,8002d58 <___vfprintf_internal_r+0x790>
 8002d4c:	d8c02917 	ldw	r3,164(sp)
 8002d50:	18c00044 	addi	r3,r3,1
 8002d54:	d8c02915 	stw	r3,164(sp)
 8002d58:	90c0008c 	andi	r3,r18,2
 8002d5c:	d8c02c15 	stw	r3,176(sp)
 8002d60:	18000326 	beq	r3,zero,8002d70 <___vfprintf_internal_r+0x7a8>
 8002d64:	d8c02917 	ldw	r3,164(sp)
 8002d68:	18c00084 	addi	r3,r3,2
 8002d6c:	d8c02915 	stw	r3,164(sp)
 8002d70:	90c0210c 	andi	r3,r18,132
 8002d74:	d8c03015 	stw	r3,192(sp)
 8002d78:	1801c51e 	bne	r3,zero,8003490 <___vfprintf_internal_r+0xec8>
 8002d7c:	d9003117 	ldw	r4,196(sp)
 8002d80:	d8c02917 	ldw	r3,164(sp)
 8002d84:	20e7c83a 	sub	r19,r4,r3
 8002d88:	04c1c10e 	bge	zero,r19,8003490 <___vfprintf_internal_r+0xec8>
 8002d8c:	02400404 	movi	r9,16
 8002d90:	d8c02017 	ldw	r3,128(sp)
 8002d94:	d8801f17 	ldw	r2,124(sp)
 8002d98:	4cc52f0e 	bge	r9,r19,8004258 <___vfprintf_internal_r+0x1c90>
 8002d9c:	01420074 	movhi	r5,2049
 8002da0:	2948df84 	addi	r5,r5,9086
 8002da4:	dc403b15 	stw	r17,236(sp)
 8002da8:	d9403515 	stw	r5,212(sp)
 8002dac:	9823883a 	mov	r17,r19
 8002db0:	482d883a 	mov	r22,r9
 8002db4:	9027883a 	mov	r19,r18
 8002db8:	070001c4 	movi	fp,7
 8002dbc:	8025883a 	mov	r18,r16
 8002dc0:	dc002d17 	ldw	r16,180(sp)
 8002dc4:	00000306 	br	8002dd4 <___vfprintf_internal_r+0x80c>
 8002dc8:	8c7ffc04 	addi	r17,r17,-16
 8002dcc:	42000204 	addi	r8,r8,8
 8002dd0:	b440130e 	bge	r22,r17,8002e20 <___vfprintf_internal_r+0x858>
 8002dd4:	01020074 	movhi	r4,2049
 8002dd8:	18c00404 	addi	r3,r3,16
 8002ddc:	10800044 	addi	r2,r2,1
 8002de0:	2108df84 	addi	r4,r4,9086
 8002de4:	41000015 	stw	r4,0(r8)
 8002de8:	45800115 	stw	r22,4(r8)
 8002dec:	d8c02015 	stw	r3,128(sp)
 8002df0:	d8801f15 	stw	r2,124(sp)
 8002df4:	e0bff40e 	bge	fp,r2,8002dc8 <__alt_data_end+0xfc002dc8>
 8002df8:	d9801e04 	addi	r6,sp,120
 8002dfc:	b80b883a 	mov	r5,r23
 8002e00:	8009883a 	mov	r4,r16
 8002e04:	8009da80 	call	8009da8 <__sprint_r>
 8002e08:	103ef31e 	bne	r2,zero,80029d8 <__alt_data_end+0xfc0029d8>
 8002e0c:	8c7ffc04 	addi	r17,r17,-16
 8002e10:	d8c02017 	ldw	r3,128(sp)
 8002e14:	d8801f17 	ldw	r2,124(sp)
 8002e18:	da000404 	addi	r8,sp,16
 8002e1c:	b47fed16 	blt	r22,r17,8002dd4 <__alt_data_end+0xfc002dd4>
 8002e20:	9021883a 	mov	r16,r18
 8002e24:	9825883a 	mov	r18,r19
 8002e28:	8827883a 	mov	r19,r17
 8002e2c:	dc403b17 	ldw	r17,236(sp)
 8002e30:	d9403517 	ldw	r5,212(sp)
 8002e34:	98c7883a 	add	r3,r19,r3
 8002e38:	10800044 	addi	r2,r2,1
 8002e3c:	41400015 	stw	r5,0(r8)
 8002e40:	44c00115 	stw	r19,4(r8)
 8002e44:	d8c02015 	stw	r3,128(sp)
 8002e48:	d8801f15 	stw	r2,124(sp)
 8002e4c:	010001c4 	movi	r4,7
 8002e50:	2082c516 	blt	r4,r2,8003968 <___vfprintf_internal_r+0x13a0>
 8002e54:	df002787 	ldb	fp,158(sp)
 8002e58:	42000204 	addi	r8,r8,8
 8002e5c:	e0000c26 	beq	fp,zero,8002e90 <___vfprintf_internal_r+0x8c8>
 8002e60:	d8801f17 	ldw	r2,124(sp)
 8002e64:	d9002784 	addi	r4,sp,158
 8002e68:	18c00044 	addi	r3,r3,1
 8002e6c:	10800044 	addi	r2,r2,1
 8002e70:	41000015 	stw	r4,0(r8)
 8002e74:	01000044 	movi	r4,1
 8002e78:	41000115 	stw	r4,4(r8)
 8002e7c:	d8c02015 	stw	r3,128(sp)
 8002e80:	d8801f15 	stw	r2,124(sp)
 8002e84:	010001c4 	movi	r4,7
 8002e88:	20825e16 	blt	r4,r2,8003804 <___vfprintf_internal_r+0x123c>
 8002e8c:	42000204 	addi	r8,r8,8
 8002e90:	d8802c17 	ldw	r2,176(sp)
 8002e94:	10000c26 	beq	r2,zero,8002ec8 <___vfprintf_internal_r+0x900>
 8002e98:	d8801f17 	ldw	r2,124(sp)
 8002e9c:	d9002704 	addi	r4,sp,156
 8002ea0:	18c00084 	addi	r3,r3,2
 8002ea4:	10800044 	addi	r2,r2,1
 8002ea8:	41000015 	stw	r4,0(r8)
 8002eac:	01000084 	movi	r4,2
 8002eb0:	41000115 	stw	r4,4(r8)
 8002eb4:	d8c02015 	stw	r3,128(sp)
 8002eb8:	d8801f15 	stw	r2,124(sp)
 8002ebc:	010001c4 	movi	r4,7
 8002ec0:	20825816 	blt	r4,r2,8003824 <___vfprintf_internal_r+0x125c>
 8002ec4:	42000204 	addi	r8,r8,8
 8002ec8:	d9003017 	ldw	r4,192(sp)
 8002ecc:	00802004 	movi	r2,128
 8002ed0:	2081bb26 	beq	r4,r2,80035c0 <___vfprintf_internal_r+0xff8>
 8002ed4:	d9402a17 	ldw	r5,168(sp)
 8002ed8:	d8802b17 	ldw	r2,172(sp)
 8002edc:	28adc83a 	sub	r22,r5,r2
 8002ee0:	0580310e 	bge	zero,r22,8002fa8 <___vfprintf_internal_r+0x9e0>
 8002ee4:	07000404 	movi	fp,16
 8002ee8:	d8801f17 	ldw	r2,124(sp)
 8002eec:	e584360e 	bge	fp,r22,8003fc8 <___vfprintf_internal_r+0x1a00>
 8002ef0:	01420074 	movhi	r5,2049
 8002ef4:	2948db84 	addi	r5,r5,9070
 8002ef8:	dc402a15 	stw	r17,168(sp)
 8002efc:	d9402c15 	stw	r5,176(sp)
 8002f00:	b023883a 	mov	r17,r22
 8002f04:	04c001c4 	movi	r19,7
 8002f08:	a82d883a 	mov	r22,r21
 8002f0c:	902b883a 	mov	r21,r18
 8002f10:	8025883a 	mov	r18,r16
 8002f14:	dc002d17 	ldw	r16,180(sp)
 8002f18:	00000306 	br	8002f28 <___vfprintf_internal_r+0x960>
 8002f1c:	8c7ffc04 	addi	r17,r17,-16
 8002f20:	42000204 	addi	r8,r8,8
 8002f24:	e440110e 	bge	fp,r17,8002f6c <___vfprintf_internal_r+0x9a4>
 8002f28:	18c00404 	addi	r3,r3,16
 8002f2c:	10800044 	addi	r2,r2,1
 8002f30:	45000015 	stw	r20,0(r8)
 8002f34:	47000115 	stw	fp,4(r8)
 8002f38:	d8c02015 	stw	r3,128(sp)
 8002f3c:	d8801f15 	stw	r2,124(sp)
 8002f40:	98bff60e 	bge	r19,r2,8002f1c <__alt_data_end+0xfc002f1c>
 8002f44:	d9801e04 	addi	r6,sp,120
 8002f48:	b80b883a 	mov	r5,r23
 8002f4c:	8009883a 	mov	r4,r16
 8002f50:	8009da80 	call	8009da8 <__sprint_r>
 8002f54:	103ea01e 	bne	r2,zero,80029d8 <__alt_data_end+0xfc0029d8>
 8002f58:	8c7ffc04 	addi	r17,r17,-16
 8002f5c:	d8c02017 	ldw	r3,128(sp)
 8002f60:	d8801f17 	ldw	r2,124(sp)
 8002f64:	da000404 	addi	r8,sp,16
 8002f68:	e47fef16 	blt	fp,r17,8002f28 <__alt_data_end+0xfc002f28>
 8002f6c:	9021883a 	mov	r16,r18
 8002f70:	a825883a 	mov	r18,r21
 8002f74:	b02b883a 	mov	r21,r22
 8002f78:	882d883a 	mov	r22,r17
 8002f7c:	dc402a17 	ldw	r17,168(sp)
 8002f80:	d9002c17 	ldw	r4,176(sp)
 8002f84:	1d87883a 	add	r3,r3,r22
 8002f88:	10800044 	addi	r2,r2,1
 8002f8c:	41000015 	stw	r4,0(r8)
 8002f90:	45800115 	stw	r22,4(r8)
 8002f94:	d8c02015 	stw	r3,128(sp)
 8002f98:	d8801f15 	stw	r2,124(sp)
 8002f9c:	010001c4 	movi	r4,7
 8002fa0:	20821016 	blt	r4,r2,80037e4 <___vfprintf_internal_r+0x121c>
 8002fa4:	42000204 	addi	r8,r8,8
 8002fa8:	9080400c 	andi	r2,r18,256
 8002fac:	10013a1e 	bne	r2,zero,8003498 <___vfprintf_internal_r+0xed0>
 8002fb0:	d9402b17 	ldw	r5,172(sp)
 8002fb4:	d8801f17 	ldw	r2,124(sp)
 8002fb8:	44000015 	stw	r16,0(r8)
 8002fbc:	1947883a 	add	r3,r3,r5
 8002fc0:	10800044 	addi	r2,r2,1
 8002fc4:	41400115 	stw	r5,4(r8)
 8002fc8:	d8c02015 	stw	r3,128(sp)
 8002fcc:	d8801f15 	stw	r2,124(sp)
 8002fd0:	010001c4 	movi	r4,7
 8002fd4:	2081f516 	blt	r4,r2,80037ac <___vfprintf_internal_r+0x11e4>
 8002fd8:	42000204 	addi	r8,r8,8
 8002fdc:	9480010c 	andi	r18,r18,4
 8002fe0:	90003226 	beq	r18,zero,80030ac <___vfprintf_internal_r+0xae4>
 8002fe4:	d9403117 	ldw	r5,196(sp)
 8002fe8:	d8802917 	ldw	r2,164(sp)
 8002fec:	28a1c83a 	sub	r16,r5,r2
 8002ff0:	04002e0e 	bge	zero,r16,80030ac <___vfprintf_internal_r+0xae4>
 8002ff4:	04400404 	movi	r17,16
 8002ff8:	d8801f17 	ldw	r2,124(sp)
 8002ffc:	8c04c40e 	bge	r17,r16,8004310 <___vfprintf_internal_r+0x1d48>
 8003000:	01420074 	movhi	r5,2049
 8003004:	2948df84 	addi	r5,r5,9086
 8003008:	d9403515 	stw	r5,212(sp)
 800300c:	048001c4 	movi	r18,7
 8003010:	dcc02d17 	ldw	r19,180(sp)
 8003014:	00000306 	br	8003024 <___vfprintf_internal_r+0xa5c>
 8003018:	843ffc04 	addi	r16,r16,-16
 800301c:	42000204 	addi	r8,r8,8
 8003020:	8c00130e 	bge	r17,r16,8003070 <___vfprintf_internal_r+0xaa8>
 8003024:	01020074 	movhi	r4,2049
 8003028:	18c00404 	addi	r3,r3,16
 800302c:	10800044 	addi	r2,r2,1
 8003030:	2108df84 	addi	r4,r4,9086
 8003034:	41000015 	stw	r4,0(r8)
 8003038:	44400115 	stw	r17,4(r8)
 800303c:	d8c02015 	stw	r3,128(sp)
 8003040:	d8801f15 	stw	r2,124(sp)
 8003044:	90bff40e 	bge	r18,r2,8003018 <__alt_data_end+0xfc003018>
 8003048:	d9801e04 	addi	r6,sp,120
 800304c:	b80b883a 	mov	r5,r23
 8003050:	9809883a 	mov	r4,r19
 8003054:	8009da80 	call	8009da8 <__sprint_r>
 8003058:	103e5f1e 	bne	r2,zero,80029d8 <__alt_data_end+0xfc0029d8>
 800305c:	843ffc04 	addi	r16,r16,-16
 8003060:	d8c02017 	ldw	r3,128(sp)
 8003064:	d8801f17 	ldw	r2,124(sp)
 8003068:	da000404 	addi	r8,sp,16
 800306c:	8c3fed16 	blt	r17,r16,8003024 <__alt_data_end+0xfc003024>
 8003070:	d9403517 	ldw	r5,212(sp)
 8003074:	1c07883a 	add	r3,r3,r16
 8003078:	10800044 	addi	r2,r2,1
 800307c:	41400015 	stw	r5,0(r8)
 8003080:	44000115 	stw	r16,4(r8)
 8003084:	d8c02015 	stw	r3,128(sp)
 8003088:	d8801f15 	stw	r2,124(sp)
 800308c:	010001c4 	movi	r4,7
 8003090:	2080060e 	bge	r4,r2,80030ac <___vfprintf_internal_r+0xae4>
 8003094:	d9002d17 	ldw	r4,180(sp)
 8003098:	d9801e04 	addi	r6,sp,120
 800309c:	b80b883a 	mov	r5,r23
 80030a0:	8009da80 	call	8009da8 <__sprint_r>
 80030a4:	103e4c1e 	bne	r2,zero,80029d8 <__alt_data_end+0xfc0029d8>
 80030a8:	d8c02017 	ldw	r3,128(sp)
 80030ac:	d8803117 	ldw	r2,196(sp)
 80030b0:	d9002917 	ldw	r4,164(sp)
 80030b4:	1100010e 	bge	r2,r4,80030bc <___vfprintf_internal_r+0xaf4>
 80030b8:	2005883a 	mov	r2,r4
 80030bc:	d9402f17 	ldw	r5,188(sp)
 80030c0:	288b883a 	add	r5,r5,r2
 80030c4:	d9402f15 	stw	r5,188(sp)
 80030c8:	1801c01e 	bne	r3,zero,80037cc <___vfprintf_internal_r+0x1204>
 80030cc:	a8800007 	ldb	r2,0(r21)
 80030d0:	d8001f15 	stw	zero,124(sp)
 80030d4:	da000404 	addi	r8,sp,16
 80030d8:	103d751e 	bne	r2,zero,80026b0 <__alt_data_end+0xfc0026b0>
 80030dc:	a823883a 	mov	r17,r21
 80030e0:	003d8b06 	br	8002710 <__alt_data_end+0xfc002710>
 80030e4:	8025883a 	mov	r18,r16
 80030e8:	dc002903 	ldbu	r16,164(sp)
 80030ec:	e011883a 	mov	r8,fp
 80030f0:	84003fcc 	andi	r16,r16,255
 80030f4:	8005e51e 	bne	r16,zero,800488c <___vfprintf_internal_r+0x22c4>
 80030f8:	94800414 	ori	r18,r18,16
 80030fc:	9080080c 	andi	r2,r18,32
 8003100:	10022b26 	beq	r2,zero,80039b0 <___vfprintf_internal_r+0x13e8>
 8003104:	d9002e17 	ldw	r4,184(sp)
 8003108:	d9402a17 	ldw	r5,168(sp)
 800310c:	d8002785 	stb	zero,158(sp)
 8003110:	20c00204 	addi	r3,r4,8
 8003114:	24c00017 	ldw	r19,0(r4)
 8003118:	25800117 	ldw	r22,4(r4)
 800311c:	28042e16 	blt	r5,zero,80041d8 <___vfprintf_internal_r+0x1c10>
 8003120:	013fdfc4 	movi	r4,-129
 8003124:	9d84b03a 	or	r2,r19,r22
 8003128:	d8c02e15 	stw	r3,184(sp)
 800312c:	9124703a 	and	r18,r18,r4
 8003130:	0039883a 	mov	fp,zero
 8003134:	103e801e 	bne	r2,zero,8002b38 <__alt_data_end+0xfc002b38>
 8003138:	d9002a17 	ldw	r4,168(sp)
 800313c:	2002e01e 	bne	r4,zero,8003cc0 <___vfprintf_internal_r+0x16f8>
 8003140:	d8002a15 	stw	zero,168(sp)
 8003144:	d8002b15 	stw	zero,172(sp)
 8003148:	dc001e04 	addi	r16,sp,120
 800314c:	003ef506 	br	8002d24 <__alt_data_end+0xfc002d24>
 8003150:	8025883a 	mov	r18,r16
 8003154:	dc002903 	ldbu	r16,164(sp)
 8003158:	e011883a 	mov	r8,fp
 800315c:	84003fcc 	andi	r16,r16,255
 8003160:	8005ba1e 	bne	r16,zero,800484c <___vfprintf_internal_r+0x2284>
 8003164:	01020074 	movhi	r4,2049
 8003168:	2108cf04 	addi	r4,r4,9020
 800316c:	d9003915 	stw	r4,228(sp)
 8003170:	9080080c 	andi	r2,r18,32
 8003174:	10006126 	beq	r2,zero,80032fc <___vfprintf_internal_r+0xd34>
 8003178:	d9402e17 	ldw	r5,184(sp)
 800317c:	2cc00017 	ldw	r19,0(r5)
 8003180:	2d800117 	ldw	r22,4(r5)
 8003184:	29400204 	addi	r5,r5,8
 8003188:	d9402e15 	stw	r5,184(sp)
 800318c:	9080004c 	andi	r2,r18,1
 8003190:	1001ac26 	beq	r2,zero,8003844 <___vfprintf_internal_r+0x127c>
 8003194:	9d84b03a 	or	r2,r19,r22
 8003198:	10038526 	beq	r2,zero,8003fb0 <___vfprintf_internal_r+0x19e8>
 800319c:	d8c02a17 	ldw	r3,168(sp)
 80031a0:	00800c04 	movi	r2,48
 80031a4:	d8802705 	stb	r2,156(sp)
 80031a8:	dc402745 	stb	r17,157(sp)
 80031ac:	d8002785 	stb	zero,158(sp)
 80031b0:	90800094 	ori	r2,r18,2
 80031b4:	18047916 	blt	r3,zero,800439c <___vfprintf_internal_r+0x1dd4>
 80031b8:	00bfdfc4 	movi	r2,-129
 80031bc:	90a4703a 	and	r18,r18,r2
 80031c0:	94800094 	ori	r18,r18,2
 80031c4:	0039883a 	mov	fp,zero
 80031c8:	d9003917 	ldw	r4,228(sp)
 80031cc:	dc001e04 	addi	r16,sp,120
 80031d0:	988003cc 	andi	r2,r19,15
 80031d4:	b006973a 	slli	r3,r22,28
 80031d8:	2085883a 	add	r2,r4,r2
 80031dc:	9826d13a 	srli	r19,r19,4
 80031e0:	10800003 	ldbu	r2,0(r2)
 80031e4:	b02cd13a 	srli	r22,r22,4
 80031e8:	843fffc4 	addi	r16,r16,-1
 80031ec:	1ce6b03a 	or	r19,r3,r19
 80031f0:	80800005 	stb	r2,0(r16)
 80031f4:	9d84b03a 	or	r2,r19,r22
 80031f8:	103ff51e 	bne	r2,zero,80031d0 <__alt_data_end+0xfc0031d0>
 80031fc:	d8c02817 	ldw	r3,160(sp)
 8003200:	1c07c83a 	sub	r3,r3,r16
 8003204:	d8c02b15 	stw	r3,172(sp)
 8003208:	003ec606 	br	8002d24 <__alt_data_end+0xfc002d24>
 800320c:	8025883a 	mov	r18,r16
 8003210:	dc002903 	ldbu	r16,164(sp)
 8003214:	e011883a 	mov	r8,fp
 8003218:	84003fcc 	andi	r16,r16,255
 800321c:	803e9626 	beq	r16,zero,8002c78 <__alt_data_end+0xfc002c78>
 8003220:	d8c02b03 	ldbu	r3,172(sp)
 8003224:	d8c02785 	stb	r3,158(sp)
 8003228:	003e9306 	br	8002c78 <__alt_data_end+0xfc002c78>
 800322c:	00c00044 	movi	r3,1
 8003230:	d8c02905 	stb	r3,164(sp)
 8003234:	00c00ac4 	movi	r3,43
 8003238:	d8c02b05 	stb	r3,172(sp)
 800323c:	ac400007 	ldb	r17,0(r21)
 8003240:	003d4306 	br	8002750 <__alt_data_end+0xfc002750>
 8003244:	84000814 	ori	r16,r16,32
 8003248:	ac400007 	ldb	r17,0(r21)
 800324c:	003d4006 	br	8002750 <__alt_data_end+0xfc002750>
 8003250:	d8802e17 	ldw	r2,184(sp)
 8003254:	8025883a 	mov	r18,r16
 8003258:	d8002785 	stb	zero,158(sp)
 800325c:	14000017 	ldw	r16,0(r2)
 8003260:	e011883a 	mov	r8,fp
 8003264:	14c00104 	addi	r19,r2,4
 8003268:	80042d26 	beq	r16,zero,8004320 <___vfprintf_internal_r+0x1d58>
 800326c:	d8c02a17 	ldw	r3,168(sp)
 8003270:	1803e416 	blt	r3,zero,8004204 <___vfprintf_internal_r+0x1c3c>
 8003274:	180d883a 	mov	r6,r3
 8003278:	000b883a 	mov	r5,zero
 800327c:	8009883a 	mov	r4,r16
 8003280:	df003d15 	stw	fp,244(sp)
 8003284:	8007f000 	call	8007f00 <memchr>
 8003288:	da003d17 	ldw	r8,244(sp)
 800328c:	10046826 	beq	r2,zero,8004430 <___vfprintf_internal_r+0x1e68>
 8003290:	1405c83a 	sub	r2,r2,r16
 8003294:	d8802b15 	stw	r2,172(sp)
 8003298:	1003e016 	blt	r2,zero,800421c <___vfprintf_internal_r+0x1c54>
 800329c:	df002783 	ldbu	fp,158(sp)
 80032a0:	d8802915 	stw	r2,164(sp)
 80032a4:	dcc02e15 	stw	r19,184(sp)
 80032a8:	d8002a15 	stw	zero,168(sp)
 80032ac:	d8003215 	stw	zero,200(sp)
 80032b0:	003ea206 	br	8002d3c <__alt_data_end+0xfc002d3c>
 80032b4:	8025883a 	mov	r18,r16
 80032b8:	dc002903 	ldbu	r16,164(sp)
 80032bc:	e011883a 	mov	r8,fp
 80032c0:	84003fcc 	andi	r16,r16,255
 80032c4:	803f8d26 	beq	r16,zero,80030fc <__alt_data_end+0xfc0030fc>
 80032c8:	d8c02b03 	ldbu	r3,172(sp)
 80032cc:	d8c02785 	stb	r3,158(sp)
 80032d0:	003f8a06 	br	80030fc <__alt_data_end+0xfc0030fc>
 80032d4:	8025883a 	mov	r18,r16
 80032d8:	dc002903 	ldbu	r16,164(sp)
 80032dc:	e011883a 	mov	r8,fp
 80032e0:	84003fcc 	andi	r16,r16,255
 80032e4:	8005661e 	bne	r16,zero,8004880 <___vfprintf_internal_r+0x22b8>
 80032e8:	01020074 	movhi	r4,2049
 80032ec:	2108d404 	addi	r4,r4,9040
 80032f0:	d9003915 	stw	r4,228(sp)
 80032f4:	9080080c 	andi	r2,r18,32
 80032f8:	103f9f1e 	bne	r2,zero,8003178 <__alt_data_end+0xfc003178>
 80032fc:	9080040c 	andi	r2,r18,16
 8003300:	1002eb26 	beq	r2,zero,8003eb0 <___vfprintf_internal_r+0x18e8>
 8003304:	d8802e17 	ldw	r2,184(sp)
 8003308:	002d883a 	mov	r22,zero
 800330c:	14c00017 	ldw	r19,0(r2)
 8003310:	10800104 	addi	r2,r2,4
 8003314:	d8802e15 	stw	r2,184(sp)
 8003318:	003f9c06 	br	800318c <__alt_data_end+0xfc00318c>
 800331c:	d8802b07 	ldb	r2,172(sp)
 8003320:	1002e11e 	bne	r2,zero,8003ea8 <___vfprintf_internal_r+0x18e0>
 8003324:	00c00044 	movi	r3,1
 8003328:	d8c02905 	stb	r3,164(sp)
 800332c:	00c00804 	movi	r3,32
 8003330:	d8c02b05 	stb	r3,172(sp)
 8003334:	ac400007 	ldb	r17,0(r21)
 8003338:	003d0506 	br	8002750 <__alt_data_end+0xfc002750>
 800333c:	84000054 	ori	r16,r16,1
 8003340:	ac400007 	ldb	r17,0(r21)
 8003344:	003d0206 	br	8002750 <__alt_data_end+0xfc002750>
 8003348:	8025883a 	mov	r18,r16
 800334c:	dc002903 	ldbu	r16,164(sp)
 8003350:	e011883a 	mov	r8,fp
 8003354:	84003fcc 	andi	r16,r16,255
 8003358:	803de726 	beq	r16,zero,8002af8 <__alt_data_end+0xfc002af8>
 800335c:	d8c02b03 	ldbu	r3,172(sp)
 8003360:	d8c02785 	stb	r3,158(sp)
 8003364:	003de406 	br	8002af8 <__alt_data_end+0xfc002af8>
 8003368:	84001014 	ori	r16,r16,64
 800336c:	ac400007 	ldb	r17,0(r21)
 8003370:	003cf706 	br	8002750 <__alt_data_end+0xfc002750>
 8003374:	ac400007 	ldb	r17,0(r21)
 8003378:	00801b04 	movi	r2,108
 800337c:	88838f26 	beq	r17,r2,80041bc <___vfprintf_internal_r+0x1bf4>
 8003380:	84000414 	ori	r16,r16,16
 8003384:	003cf206 	br	8002750 <__alt_data_end+0xfc002750>
 8003388:	8025883a 	mov	r18,r16
 800338c:	dc002903 	ldbu	r16,164(sp)
 8003390:	e011883a 	mov	r8,fp
 8003394:	84003fcc 	andi	r16,r16,255
 8003398:	80053f1e 	bne	r16,zero,8004898 <___vfprintf_internal_r+0x22d0>
 800339c:	9080080c 	andi	r2,r18,32
 80033a0:	1002d226 	beq	r2,zero,8003eec <___vfprintf_internal_r+0x1924>
 80033a4:	d9002e17 	ldw	r4,184(sp)
 80033a8:	d9402f17 	ldw	r5,188(sp)
 80033ac:	20800017 	ldw	r2,0(r4)
 80033b0:	2807d7fa 	srai	r3,r5,31
 80033b4:	21000104 	addi	r4,r4,4
 80033b8:	d9002e15 	stw	r4,184(sp)
 80033bc:	11400015 	stw	r5,0(r2)
 80033c0:	10c00115 	stw	r3,4(r2)
 80033c4:	003cb806 	br	80026a8 <__alt_data_end+0xfc0026a8>
 80033c8:	d8c02e17 	ldw	r3,184(sp)
 80033cc:	d9002e17 	ldw	r4,184(sp)
 80033d0:	8025883a 	mov	r18,r16
 80033d4:	18800017 	ldw	r2,0(r3)
 80033d8:	21000104 	addi	r4,r4,4
 80033dc:	00c00044 	movi	r3,1
 80033e0:	e011883a 	mov	r8,fp
 80033e4:	d8c02915 	stw	r3,164(sp)
 80033e8:	d8002785 	stb	zero,158(sp)
 80033ec:	d8801405 	stb	r2,80(sp)
 80033f0:	d9002e15 	stw	r4,184(sp)
 80033f4:	d8c02b15 	stw	r3,172(sp)
 80033f8:	d8002a15 	stw	zero,168(sp)
 80033fc:	d8003215 	stw	zero,200(sp)
 8003400:	dc001404 	addi	r16,sp,80
 8003404:	0039883a 	mov	fp,zero
 8003408:	003e5306 	br	8002d58 <__alt_data_end+0xfc002d58>
 800340c:	01020074 	movhi	r4,2049
 8003410:	2108d404 	addi	r4,r4,9040
 8003414:	0039883a 	mov	fp,zero
 8003418:	d9003915 	stw	r4,228(sp)
 800341c:	04401e04 	movi	r17,120
 8003420:	003f6906 	br	80031c8 <__alt_data_end+0xfc0031c8>
 8003424:	8025883a 	mov	r18,r16
 8003428:	dc002903 	ldbu	r16,164(sp)
 800342c:	e011883a 	mov	r8,fp
 8003430:	84003fcc 	andi	r16,r16,255
 8003434:	8005081e 	bne	r16,zero,8004858 <___vfprintf_internal_r+0x2290>
 8003438:	883d6126 	beq	r17,zero,80029c0 <__alt_data_end+0xfc0029c0>
 800343c:	00c00044 	movi	r3,1
 8003440:	d8c02915 	stw	r3,164(sp)
 8003444:	dc401405 	stb	r17,80(sp)
 8003448:	d8002785 	stb	zero,158(sp)
 800344c:	003fe906 	br	80033f4 <__alt_data_end+0xfc0033f4>
 8003450:	01420074 	movhi	r5,2049
 8003454:	2948d404 	addi	r5,r5,9040
 8003458:	d9403915 	stw	r5,228(sp)
 800345c:	d8c02e15 	stw	r3,184(sp)
 8003460:	1025883a 	mov	r18,r2
 8003464:	04401e04 	movi	r17,120
 8003468:	9d84b03a 	or	r2,r19,r22
 800346c:	1000fc1e 	bne	r2,zero,8003860 <___vfprintf_internal_r+0x1298>
 8003470:	0039883a 	mov	fp,zero
 8003474:	00800084 	movi	r2,2
 8003478:	10803fcc 	andi	r2,r2,255
 800347c:	00c00044 	movi	r3,1
 8003480:	10c20f26 	beq	r2,r3,8003cc0 <___vfprintf_internal_r+0x16f8>
 8003484:	00c00084 	movi	r3,2
 8003488:	10fd3326 	beq	r2,r3,8002958 <__alt_data_end+0xfc002958>
 800348c:	003e0b06 	br	8002cbc <__alt_data_end+0xfc002cbc>
 8003490:	d8c02017 	ldw	r3,128(sp)
 8003494:	003e7106 	br	8002e5c <__alt_data_end+0xfc002e5c>
 8003498:	00801944 	movi	r2,101
 800349c:	14407e0e 	bge	r2,r17,8003698 <___vfprintf_internal_r+0x10d0>
 80034a0:	d9003617 	ldw	r4,216(sp)
 80034a4:	d9403817 	ldw	r5,224(sp)
 80034a8:	000d883a 	mov	r6,zero
 80034ac:	000f883a 	mov	r7,zero
 80034b0:	d8c03c15 	stw	r3,240(sp)
 80034b4:	da003d15 	stw	r8,244(sp)
 80034b8:	800dd080 	call	800dd08 <__eqdf2>
 80034bc:	d8c03c17 	ldw	r3,240(sp)
 80034c0:	da003d17 	ldw	r8,244(sp)
 80034c4:	1000f71e 	bne	r2,zero,80038a4 <___vfprintf_internal_r+0x12dc>
 80034c8:	d8801f17 	ldw	r2,124(sp)
 80034cc:	01020074 	movhi	r4,2049
 80034d0:	2108db04 	addi	r4,r4,9068
 80034d4:	18c00044 	addi	r3,r3,1
 80034d8:	10800044 	addi	r2,r2,1
 80034dc:	41000015 	stw	r4,0(r8)
 80034e0:	01000044 	movi	r4,1
 80034e4:	41000115 	stw	r4,4(r8)
 80034e8:	d8c02015 	stw	r3,128(sp)
 80034ec:	d8801f15 	stw	r2,124(sp)
 80034f0:	010001c4 	movi	r4,7
 80034f4:	2082b816 	blt	r4,r2,8003fd8 <___vfprintf_internal_r+0x1a10>
 80034f8:	42000204 	addi	r8,r8,8
 80034fc:	d8802617 	ldw	r2,152(sp)
 8003500:	d9403317 	ldw	r5,204(sp)
 8003504:	11400216 	blt	r2,r5,8003510 <___vfprintf_internal_r+0xf48>
 8003508:	9080004c 	andi	r2,r18,1
 800350c:	103eb326 	beq	r2,zero,8002fdc <__alt_data_end+0xfc002fdc>
 8003510:	d8803717 	ldw	r2,220(sp)
 8003514:	d9003417 	ldw	r4,208(sp)
 8003518:	d9403717 	ldw	r5,220(sp)
 800351c:	1887883a 	add	r3,r3,r2
 8003520:	d8801f17 	ldw	r2,124(sp)
 8003524:	41000015 	stw	r4,0(r8)
 8003528:	41400115 	stw	r5,4(r8)
 800352c:	10800044 	addi	r2,r2,1
 8003530:	d8c02015 	stw	r3,128(sp)
 8003534:	d8801f15 	stw	r2,124(sp)
 8003538:	010001c4 	movi	r4,7
 800353c:	20832916 	blt	r4,r2,80041e4 <___vfprintf_internal_r+0x1c1c>
 8003540:	42000204 	addi	r8,r8,8
 8003544:	d8803317 	ldw	r2,204(sp)
 8003548:	143fffc4 	addi	r16,r2,-1
 800354c:	043ea30e 	bge	zero,r16,8002fdc <__alt_data_end+0xfc002fdc>
 8003550:	04400404 	movi	r17,16
 8003554:	d8801f17 	ldw	r2,124(sp)
 8003558:	8c00880e 	bge	r17,r16,800377c <___vfprintf_internal_r+0x11b4>
 800355c:	01420074 	movhi	r5,2049
 8003560:	2948db84 	addi	r5,r5,9070
 8003564:	d9402c15 	stw	r5,176(sp)
 8003568:	058001c4 	movi	r22,7
 800356c:	dcc02d17 	ldw	r19,180(sp)
 8003570:	00000306 	br	8003580 <___vfprintf_internal_r+0xfb8>
 8003574:	42000204 	addi	r8,r8,8
 8003578:	843ffc04 	addi	r16,r16,-16
 800357c:	8c00820e 	bge	r17,r16,8003788 <___vfprintf_internal_r+0x11c0>
 8003580:	18c00404 	addi	r3,r3,16
 8003584:	10800044 	addi	r2,r2,1
 8003588:	45000015 	stw	r20,0(r8)
 800358c:	44400115 	stw	r17,4(r8)
 8003590:	d8c02015 	stw	r3,128(sp)
 8003594:	d8801f15 	stw	r2,124(sp)
 8003598:	b0bff60e 	bge	r22,r2,8003574 <__alt_data_end+0xfc003574>
 800359c:	d9801e04 	addi	r6,sp,120
 80035a0:	b80b883a 	mov	r5,r23
 80035a4:	9809883a 	mov	r4,r19
 80035a8:	8009da80 	call	8009da8 <__sprint_r>
 80035ac:	103d0a1e 	bne	r2,zero,80029d8 <__alt_data_end+0xfc0029d8>
 80035b0:	d8c02017 	ldw	r3,128(sp)
 80035b4:	d8801f17 	ldw	r2,124(sp)
 80035b8:	da000404 	addi	r8,sp,16
 80035bc:	003fee06 	br	8003578 <__alt_data_end+0xfc003578>
 80035c0:	d9403117 	ldw	r5,196(sp)
 80035c4:	d8802917 	ldw	r2,164(sp)
 80035c8:	28adc83a 	sub	r22,r5,r2
 80035cc:	05be410e 	bge	zero,r22,8002ed4 <__alt_data_end+0xfc002ed4>
 80035d0:	07000404 	movi	fp,16
 80035d4:	d8801f17 	ldw	r2,124(sp)
 80035d8:	e5838f0e 	bge	fp,r22,8004418 <___vfprintf_internal_r+0x1e50>
 80035dc:	01420074 	movhi	r5,2049
 80035e0:	2948db84 	addi	r5,r5,9070
 80035e4:	dc403015 	stw	r17,192(sp)
 80035e8:	d9402c15 	stw	r5,176(sp)
 80035ec:	b023883a 	mov	r17,r22
 80035f0:	04c001c4 	movi	r19,7
 80035f4:	a82d883a 	mov	r22,r21
 80035f8:	902b883a 	mov	r21,r18
 80035fc:	8025883a 	mov	r18,r16
 8003600:	dc002d17 	ldw	r16,180(sp)
 8003604:	00000306 	br	8003614 <___vfprintf_internal_r+0x104c>
 8003608:	8c7ffc04 	addi	r17,r17,-16
 800360c:	42000204 	addi	r8,r8,8
 8003610:	e440110e 	bge	fp,r17,8003658 <___vfprintf_internal_r+0x1090>
 8003614:	18c00404 	addi	r3,r3,16
 8003618:	10800044 	addi	r2,r2,1
 800361c:	45000015 	stw	r20,0(r8)
 8003620:	47000115 	stw	fp,4(r8)
 8003624:	d8c02015 	stw	r3,128(sp)
 8003628:	d8801f15 	stw	r2,124(sp)
 800362c:	98bff60e 	bge	r19,r2,8003608 <__alt_data_end+0xfc003608>
 8003630:	d9801e04 	addi	r6,sp,120
 8003634:	b80b883a 	mov	r5,r23
 8003638:	8009883a 	mov	r4,r16
 800363c:	8009da80 	call	8009da8 <__sprint_r>
 8003640:	103ce51e 	bne	r2,zero,80029d8 <__alt_data_end+0xfc0029d8>
 8003644:	8c7ffc04 	addi	r17,r17,-16
 8003648:	d8c02017 	ldw	r3,128(sp)
 800364c:	d8801f17 	ldw	r2,124(sp)
 8003650:	da000404 	addi	r8,sp,16
 8003654:	e47fef16 	blt	fp,r17,8003614 <__alt_data_end+0xfc003614>
 8003658:	9021883a 	mov	r16,r18
 800365c:	a825883a 	mov	r18,r21
 8003660:	b02b883a 	mov	r21,r22
 8003664:	882d883a 	mov	r22,r17
 8003668:	dc403017 	ldw	r17,192(sp)
 800366c:	d9002c17 	ldw	r4,176(sp)
 8003670:	1d87883a 	add	r3,r3,r22
 8003674:	10800044 	addi	r2,r2,1
 8003678:	41000015 	stw	r4,0(r8)
 800367c:	45800115 	stw	r22,4(r8)
 8003680:	d8c02015 	stw	r3,128(sp)
 8003684:	d8801f15 	stw	r2,124(sp)
 8003688:	010001c4 	movi	r4,7
 800368c:	20818e16 	blt	r4,r2,8003cc8 <___vfprintf_internal_r+0x1700>
 8003690:	42000204 	addi	r8,r8,8
 8003694:	003e0f06 	br	8002ed4 <__alt_data_end+0xfc002ed4>
 8003698:	d9403317 	ldw	r5,204(sp)
 800369c:	00800044 	movi	r2,1
 80036a0:	18c00044 	addi	r3,r3,1
 80036a4:	1141530e 	bge	r2,r5,8003bf4 <___vfprintf_internal_r+0x162c>
 80036a8:	dc401f17 	ldw	r17,124(sp)
 80036ac:	00800044 	movi	r2,1
 80036b0:	40800115 	stw	r2,4(r8)
 80036b4:	8c400044 	addi	r17,r17,1
 80036b8:	44000015 	stw	r16,0(r8)
 80036bc:	d8c02015 	stw	r3,128(sp)
 80036c0:	dc401f15 	stw	r17,124(sp)
 80036c4:	008001c4 	movi	r2,7
 80036c8:	14416b16 	blt	r2,r17,8003c78 <___vfprintf_internal_r+0x16b0>
 80036cc:	42000204 	addi	r8,r8,8
 80036d0:	d8803717 	ldw	r2,220(sp)
 80036d4:	d9003417 	ldw	r4,208(sp)
 80036d8:	8c400044 	addi	r17,r17,1
 80036dc:	10c7883a 	add	r3,r2,r3
 80036e0:	40800115 	stw	r2,4(r8)
 80036e4:	41000015 	stw	r4,0(r8)
 80036e8:	d8c02015 	stw	r3,128(sp)
 80036ec:	dc401f15 	stw	r17,124(sp)
 80036f0:	008001c4 	movi	r2,7
 80036f4:	14416916 	blt	r2,r17,8003c9c <___vfprintf_internal_r+0x16d4>
 80036f8:	45800204 	addi	r22,r8,8
 80036fc:	d9003617 	ldw	r4,216(sp)
 8003700:	d9403817 	ldw	r5,224(sp)
 8003704:	000d883a 	mov	r6,zero
 8003708:	000f883a 	mov	r7,zero
 800370c:	d8c03c15 	stw	r3,240(sp)
 8003710:	800dd080 	call	800dd08 <__eqdf2>
 8003714:	d8c03c17 	ldw	r3,240(sp)
 8003718:	1000bc26 	beq	r2,zero,8003a0c <___vfprintf_internal_r+0x1444>
 800371c:	d9403317 	ldw	r5,204(sp)
 8003720:	84000044 	addi	r16,r16,1
 8003724:	8c400044 	addi	r17,r17,1
 8003728:	28bfffc4 	addi	r2,r5,-1
 800372c:	1887883a 	add	r3,r3,r2
 8003730:	b0800115 	stw	r2,4(r22)
 8003734:	b4000015 	stw	r16,0(r22)
 8003738:	d8c02015 	stw	r3,128(sp)
 800373c:	dc401f15 	stw	r17,124(sp)
 8003740:	008001c4 	movi	r2,7
 8003744:	14414316 	blt	r2,r17,8003c54 <___vfprintf_internal_r+0x168c>
 8003748:	b5800204 	addi	r22,r22,8
 800374c:	d9003a17 	ldw	r4,232(sp)
 8003750:	df0022c4 	addi	fp,sp,139
 8003754:	8c400044 	addi	r17,r17,1
 8003758:	20c7883a 	add	r3,r4,r3
 800375c:	b7000015 	stw	fp,0(r22)
 8003760:	b1000115 	stw	r4,4(r22)
 8003764:	d8c02015 	stw	r3,128(sp)
 8003768:	dc401f15 	stw	r17,124(sp)
 800376c:	008001c4 	movi	r2,7
 8003770:	14400e16 	blt	r2,r17,80037ac <___vfprintf_internal_r+0x11e4>
 8003774:	b2000204 	addi	r8,r22,8
 8003778:	003e1806 	br	8002fdc <__alt_data_end+0xfc002fdc>
 800377c:	01020074 	movhi	r4,2049
 8003780:	2108db84 	addi	r4,r4,9070
 8003784:	d9002c15 	stw	r4,176(sp)
 8003788:	d9002c17 	ldw	r4,176(sp)
 800378c:	1c07883a 	add	r3,r3,r16
 8003790:	44000115 	stw	r16,4(r8)
 8003794:	41000015 	stw	r4,0(r8)
 8003798:	10800044 	addi	r2,r2,1
 800379c:	d8c02015 	stw	r3,128(sp)
 80037a0:	d8801f15 	stw	r2,124(sp)
 80037a4:	010001c4 	movi	r4,7
 80037a8:	20be0b0e 	bge	r4,r2,8002fd8 <__alt_data_end+0xfc002fd8>
 80037ac:	d9002d17 	ldw	r4,180(sp)
 80037b0:	d9801e04 	addi	r6,sp,120
 80037b4:	b80b883a 	mov	r5,r23
 80037b8:	8009da80 	call	8009da8 <__sprint_r>
 80037bc:	103c861e 	bne	r2,zero,80029d8 <__alt_data_end+0xfc0029d8>
 80037c0:	d8c02017 	ldw	r3,128(sp)
 80037c4:	da000404 	addi	r8,sp,16
 80037c8:	003e0406 	br	8002fdc <__alt_data_end+0xfc002fdc>
 80037cc:	d9002d17 	ldw	r4,180(sp)
 80037d0:	d9801e04 	addi	r6,sp,120
 80037d4:	b80b883a 	mov	r5,r23
 80037d8:	8009da80 	call	8009da8 <__sprint_r>
 80037dc:	103e3b26 	beq	r2,zero,80030cc <__alt_data_end+0xfc0030cc>
 80037e0:	003c7d06 	br	80029d8 <__alt_data_end+0xfc0029d8>
 80037e4:	d9002d17 	ldw	r4,180(sp)
 80037e8:	d9801e04 	addi	r6,sp,120
 80037ec:	b80b883a 	mov	r5,r23
 80037f0:	8009da80 	call	8009da8 <__sprint_r>
 80037f4:	103c781e 	bne	r2,zero,80029d8 <__alt_data_end+0xfc0029d8>
 80037f8:	d8c02017 	ldw	r3,128(sp)
 80037fc:	da000404 	addi	r8,sp,16
 8003800:	003de906 	br	8002fa8 <__alt_data_end+0xfc002fa8>
 8003804:	d9002d17 	ldw	r4,180(sp)
 8003808:	d9801e04 	addi	r6,sp,120
 800380c:	b80b883a 	mov	r5,r23
 8003810:	8009da80 	call	8009da8 <__sprint_r>
 8003814:	103c701e 	bne	r2,zero,80029d8 <__alt_data_end+0xfc0029d8>
 8003818:	d8c02017 	ldw	r3,128(sp)
 800381c:	da000404 	addi	r8,sp,16
 8003820:	003d9b06 	br	8002e90 <__alt_data_end+0xfc002e90>
 8003824:	d9002d17 	ldw	r4,180(sp)
 8003828:	d9801e04 	addi	r6,sp,120
 800382c:	b80b883a 	mov	r5,r23
 8003830:	8009da80 	call	8009da8 <__sprint_r>
 8003834:	103c681e 	bne	r2,zero,80029d8 <__alt_data_end+0xfc0029d8>
 8003838:	d8c02017 	ldw	r3,128(sp)
 800383c:	da000404 	addi	r8,sp,16
 8003840:	003da106 	br	8002ec8 <__alt_data_end+0xfc002ec8>
 8003844:	d9402a17 	ldw	r5,168(sp)
 8003848:	d8002785 	stb	zero,158(sp)
 800384c:	283f0616 	blt	r5,zero,8003468 <__alt_data_end+0xfc003468>
 8003850:	00ffdfc4 	movi	r3,-129
 8003854:	9d84b03a 	or	r2,r19,r22
 8003858:	90e4703a 	and	r18,r18,r3
 800385c:	103c3b26 	beq	r2,zero,800294c <__alt_data_end+0xfc00294c>
 8003860:	0039883a 	mov	fp,zero
 8003864:	003e5806 	br	80031c8 <__alt_data_end+0xfc0031c8>
 8003868:	9080040c 	andi	r2,r18,16
 800386c:	1001b326 	beq	r2,zero,8003f3c <___vfprintf_internal_r+0x1974>
 8003870:	d8c02e17 	ldw	r3,184(sp)
 8003874:	d9002a17 	ldw	r4,168(sp)
 8003878:	d8002785 	stb	zero,158(sp)
 800387c:	18800104 	addi	r2,r3,4
 8003880:	1cc00017 	ldw	r19,0(r3)
 8003884:	002d883a 	mov	r22,zero
 8003888:	2001b516 	blt	r4,zero,8003f60 <___vfprintf_internal_r+0x1998>
 800388c:	00ffdfc4 	movi	r3,-129
 8003890:	d8802e15 	stw	r2,184(sp)
 8003894:	90e4703a 	and	r18,r18,r3
 8003898:	983d0526 	beq	r19,zero,8002cb0 <__alt_data_end+0xfc002cb0>
 800389c:	0039883a 	mov	fp,zero
 80038a0:	003d0806 	br	8002cc4 <__alt_data_end+0xfc002cc4>
 80038a4:	dc402617 	ldw	r17,152(sp)
 80038a8:	0441d30e 	bge	zero,r17,8003ff8 <___vfprintf_internal_r+0x1a30>
 80038ac:	dc403217 	ldw	r17,200(sp)
 80038b0:	d8803317 	ldw	r2,204(sp)
 80038b4:	1440010e 	bge	r2,r17,80038bc <___vfprintf_internal_r+0x12f4>
 80038b8:	1023883a 	mov	r17,r2
 80038bc:	04400a0e 	bge	zero,r17,80038e8 <___vfprintf_internal_r+0x1320>
 80038c0:	d8801f17 	ldw	r2,124(sp)
 80038c4:	1c47883a 	add	r3,r3,r17
 80038c8:	44000015 	stw	r16,0(r8)
 80038cc:	10800044 	addi	r2,r2,1
 80038d0:	44400115 	stw	r17,4(r8)
 80038d4:	d8c02015 	stw	r3,128(sp)
 80038d8:	d8801f15 	stw	r2,124(sp)
 80038dc:	010001c4 	movi	r4,7
 80038e0:	20826516 	blt	r4,r2,8004278 <___vfprintf_internal_r+0x1cb0>
 80038e4:	42000204 	addi	r8,r8,8
 80038e8:	88026116 	blt	r17,zero,8004270 <___vfprintf_internal_r+0x1ca8>
 80038ec:	d9003217 	ldw	r4,200(sp)
 80038f0:	2463c83a 	sub	r17,r4,r17
 80038f4:	04407b0e 	bge	zero,r17,8003ae4 <___vfprintf_internal_r+0x151c>
 80038f8:	05800404 	movi	r22,16
 80038fc:	d8801f17 	ldw	r2,124(sp)
 8003900:	b4419d0e 	bge	r22,r17,8003f78 <___vfprintf_internal_r+0x19b0>
 8003904:	01020074 	movhi	r4,2049
 8003908:	2108db84 	addi	r4,r4,9070
 800390c:	d9002c15 	stw	r4,176(sp)
 8003910:	070001c4 	movi	fp,7
 8003914:	dcc02d17 	ldw	r19,180(sp)
 8003918:	00000306 	br	8003928 <___vfprintf_internal_r+0x1360>
 800391c:	42000204 	addi	r8,r8,8
 8003920:	8c7ffc04 	addi	r17,r17,-16
 8003924:	b441970e 	bge	r22,r17,8003f84 <___vfprintf_internal_r+0x19bc>
 8003928:	18c00404 	addi	r3,r3,16
 800392c:	10800044 	addi	r2,r2,1
 8003930:	45000015 	stw	r20,0(r8)
 8003934:	45800115 	stw	r22,4(r8)
 8003938:	d8c02015 	stw	r3,128(sp)
 800393c:	d8801f15 	stw	r2,124(sp)
 8003940:	e0bff60e 	bge	fp,r2,800391c <__alt_data_end+0xfc00391c>
 8003944:	d9801e04 	addi	r6,sp,120
 8003948:	b80b883a 	mov	r5,r23
 800394c:	9809883a 	mov	r4,r19
 8003950:	8009da80 	call	8009da8 <__sprint_r>
 8003954:	103c201e 	bne	r2,zero,80029d8 <__alt_data_end+0xfc0029d8>
 8003958:	d8c02017 	ldw	r3,128(sp)
 800395c:	d8801f17 	ldw	r2,124(sp)
 8003960:	da000404 	addi	r8,sp,16
 8003964:	003fee06 	br	8003920 <__alt_data_end+0xfc003920>
 8003968:	d9002d17 	ldw	r4,180(sp)
 800396c:	d9801e04 	addi	r6,sp,120
 8003970:	b80b883a 	mov	r5,r23
 8003974:	8009da80 	call	8009da8 <__sprint_r>
 8003978:	103c171e 	bne	r2,zero,80029d8 <__alt_data_end+0xfc0029d8>
 800397c:	d8c02017 	ldw	r3,128(sp)
 8003980:	df002787 	ldb	fp,158(sp)
 8003984:	da000404 	addi	r8,sp,16
 8003988:	003d3406 	br	8002e5c <__alt_data_end+0xfc002e5c>
 800398c:	9080040c 	andi	r2,r18,16
 8003990:	10016126 	beq	r2,zero,8003f18 <___vfprintf_internal_r+0x1950>
 8003994:	d9402e17 	ldw	r5,184(sp)
 8003998:	2cc00017 	ldw	r19,0(r5)
 800399c:	29400104 	addi	r5,r5,4
 80039a0:	d9402e15 	stw	r5,184(sp)
 80039a4:	982dd7fa 	srai	r22,r19,31
 80039a8:	b005883a 	mov	r2,r22
 80039ac:	003c5a06 	br	8002b18 <__alt_data_end+0xfc002b18>
 80039b0:	9080040c 	andi	r2,r18,16
 80039b4:	10003526 	beq	r2,zero,8003a8c <___vfprintf_internal_r+0x14c4>
 80039b8:	d8c02e17 	ldw	r3,184(sp)
 80039bc:	d9002a17 	ldw	r4,168(sp)
 80039c0:	d8002785 	stb	zero,158(sp)
 80039c4:	18800104 	addi	r2,r3,4
 80039c8:	1cc00017 	ldw	r19,0(r3)
 80039cc:	002d883a 	mov	r22,zero
 80039d0:	20003716 	blt	r4,zero,8003ab0 <___vfprintf_internal_r+0x14e8>
 80039d4:	00ffdfc4 	movi	r3,-129
 80039d8:	d8802e15 	stw	r2,184(sp)
 80039dc:	90e4703a 	and	r18,r18,r3
 80039e0:	0039883a 	mov	fp,zero
 80039e4:	983dd426 	beq	r19,zero,8003138 <__alt_data_end+0xfc003138>
 80039e8:	00800244 	movi	r2,9
 80039ec:	14fc5336 	bltu	r2,r19,8002b3c <__alt_data_end+0xfc002b3c>
 80039f0:	d8c02817 	ldw	r3,160(sp)
 80039f4:	dc001dc4 	addi	r16,sp,119
 80039f8:	9cc00c04 	addi	r19,r19,48
 80039fc:	1c07c83a 	sub	r3,r3,r16
 8003a00:	dcc01dc5 	stb	r19,119(sp)
 8003a04:	d8c02b15 	stw	r3,172(sp)
 8003a08:	003cc606 	br	8002d24 <__alt_data_end+0xfc002d24>
 8003a0c:	d8803317 	ldw	r2,204(sp)
 8003a10:	143fffc4 	addi	r16,r2,-1
 8003a14:	043f4d0e 	bge	zero,r16,800374c <__alt_data_end+0xfc00374c>
 8003a18:	07000404 	movi	fp,16
 8003a1c:	e400810e 	bge	fp,r16,8003c24 <___vfprintf_internal_r+0x165c>
 8003a20:	01420074 	movhi	r5,2049
 8003a24:	2948db84 	addi	r5,r5,9070
 8003a28:	d9402c15 	stw	r5,176(sp)
 8003a2c:	01c001c4 	movi	r7,7
 8003a30:	dcc02d17 	ldw	r19,180(sp)
 8003a34:	00000306 	br	8003a44 <___vfprintf_internal_r+0x147c>
 8003a38:	b5800204 	addi	r22,r22,8
 8003a3c:	843ffc04 	addi	r16,r16,-16
 8003a40:	e4007b0e 	bge	fp,r16,8003c30 <___vfprintf_internal_r+0x1668>
 8003a44:	18c00404 	addi	r3,r3,16
 8003a48:	8c400044 	addi	r17,r17,1
 8003a4c:	b5000015 	stw	r20,0(r22)
 8003a50:	b7000115 	stw	fp,4(r22)
 8003a54:	d8c02015 	stw	r3,128(sp)
 8003a58:	dc401f15 	stw	r17,124(sp)
 8003a5c:	3c7ff60e 	bge	r7,r17,8003a38 <__alt_data_end+0xfc003a38>
 8003a60:	d9801e04 	addi	r6,sp,120
 8003a64:	b80b883a 	mov	r5,r23
 8003a68:	9809883a 	mov	r4,r19
 8003a6c:	d9c03c15 	stw	r7,240(sp)
 8003a70:	8009da80 	call	8009da8 <__sprint_r>
 8003a74:	d9c03c17 	ldw	r7,240(sp)
 8003a78:	103bd71e 	bne	r2,zero,80029d8 <__alt_data_end+0xfc0029d8>
 8003a7c:	d8c02017 	ldw	r3,128(sp)
 8003a80:	dc401f17 	ldw	r17,124(sp)
 8003a84:	dd800404 	addi	r22,sp,16
 8003a88:	003fec06 	br	8003a3c <__alt_data_end+0xfc003a3c>
 8003a8c:	9080100c 	andi	r2,r18,64
 8003a90:	d8002785 	stb	zero,158(sp)
 8003a94:	10010e26 	beq	r2,zero,8003ed0 <___vfprintf_internal_r+0x1908>
 8003a98:	d9402e17 	ldw	r5,184(sp)
 8003a9c:	d8c02a17 	ldw	r3,168(sp)
 8003aa0:	002d883a 	mov	r22,zero
 8003aa4:	28800104 	addi	r2,r5,4
 8003aa8:	2cc0000b 	ldhu	r19,0(r5)
 8003aac:	183fc90e 	bge	r3,zero,80039d4 <__alt_data_end+0xfc0039d4>
 8003ab0:	d8802e15 	stw	r2,184(sp)
 8003ab4:	0039883a 	mov	fp,zero
 8003ab8:	9d84b03a 	or	r2,r19,r22
 8003abc:	103c1e1e 	bne	r2,zero,8002b38 <__alt_data_end+0xfc002b38>
 8003ac0:	00800044 	movi	r2,1
 8003ac4:	003e6c06 	br	8003478 <__alt_data_end+0xfc003478>
 8003ac8:	d9002d17 	ldw	r4,180(sp)
 8003acc:	d9801e04 	addi	r6,sp,120
 8003ad0:	b80b883a 	mov	r5,r23
 8003ad4:	8009da80 	call	8009da8 <__sprint_r>
 8003ad8:	103bbf1e 	bne	r2,zero,80029d8 <__alt_data_end+0xfc0029d8>
 8003adc:	d8c02017 	ldw	r3,128(sp)
 8003ae0:	da000404 	addi	r8,sp,16
 8003ae4:	d9003217 	ldw	r4,200(sp)
 8003ae8:	d8802617 	ldw	r2,152(sp)
 8003aec:	d9403317 	ldw	r5,204(sp)
 8003af0:	8123883a 	add	r17,r16,r4
 8003af4:	11400216 	blt	r2,r5,8003b00 <___vfprintf_internal_r+0x1538>
 8003af8:	9100004c 	andi	r4,r18,1
 8003afc:	20000d26 	beq	r4,zero,8003b34 <___vfprintf_internal_r+0x156c>
 8003b00:	d9003717 	ldw	r4,220(sp)
 8003b04:	d9403417 	ldw	r5,208(sp)
 8003b08:	1907883a 	add	r3,r3,r4
 8003b0c:	d9001f17 	ldw	r4,124(sp)
 8003b10:	41400015 	stw	r5,0(r8)
 8003b14:	d9403717 	ldw	r5,220(sp)
 8003b18:	21000044 	addi	r4,r4,1
 8003b1c:	d8c02015 	stw	r3,128(sp)
 8003b20:	41400115 	stw	r5,4(r8)
 8003b24:	d9001f15 	stw	r4,124(sp)
 8003b28:	014001c4 	movi	r5,7
 8003b2c:	2901e816 	blt	r5,r4,80042d0 <___vfprintf_internal_r+0x1d08>
 8003b30:	42000204 	addi	r8,r8,8
 8003b34:	d9003317 	ldw	r4,204(sp)
 8003b38:	8121883a 	add	r16,r16,r4
 8003b3c:	2085c83a 	sub	r2,r4,r2
 8003b40:	8461c83a 	sub	r16,r16,r17
 8003b44:	1400010e 	bge	r2,r16,8003b4c <___vfprintf_internal_r+0x1584>
 8003b48:	1021883a 	mov	r16,r2
 8003b4c:	04000a0e 	bge	zero,r16,8003b78 <___vfprintf_internal_r+0x15b0>
 8003b50:	d9001f17 	ldw	r4,124(sp)
 8003b54:	1c07883a 	add	r3,r3,r16
 8003b58:	44400015 	stw	r17,0(r8)
 8003b5c:	21000044 	addi	r4,r4,1
 8003b60:	44000115 	stw	r16,4(r8)
 8003b64:	d8c02015 	stw	r3,128(sp)
 8003b68:	d9001f15 	stw	r4,124(sp)
 8003b6c:	014001c4 	movi	r5,7
 8003b70:	2901fb16 	blt	r5,r4,8004360 <___vfprintf_internal_r+0x1d98>
 8003b74:	42000204 	addi	r8,r8,8
 8003b78:	8001f716 	blt	r16,zero,8004358 <___vfprintf_internal_r+0x1d90>
 8003b7c:	1421c83a 	sub	r16,r2,r16
 8003b80:	043d160e 	bge	zero,r16,8002fdc <__alt_data_end+0xfc002fdc>
 8003b84:	04400404 	movi	r17,16
 8003b88:	d8801f17 	ldw	r2,124(sp)
 8003b8c:	8c3efb0e 	bge	r17,r16,800377c <__alt_data_end+0xfc00377c>
 8003b90:	01420074 	movhi	r5,2049
 8003b94:	2948db84 	addi	r5,r5,9070
 8003b98:	d9402c15 	stw	r5,176(sp)
 8003b9c:	058001c4 	movi	r22,7
 8003ba0:	dcc02d17 	ldw	r19,180(sp)
 8003ba4:	00000306 	br	8003bb4 <___vfprintf_internal_r+0x15ec>
 8003ba8:	42000204 	addi	r8,r8,8
 8003bac:	843ffc04 	addi	r16,r16,-16
 8003bb0:	8c3ef50e 	bge	r17,r16,8003788 <__alt_data_end+0xfc003788>
 8003bb4:	18c00404 	addi	r3,r3,16
 8003bb8:	10800044 	addi	r2,r2,1
 8003bbc:	45000015 	stw	r20,0(r8)
 8003bc0:	44400115 	stw	r17,4(r8)
 8003bc4:	d8c02015 	stw	r3,128(sp)
 8003bc8:	d8801f15 	stw	r2,124(sp)
 8003bcc:	b0bff60e 	bge	r22,r2,8003ba8 <__alt_data_end+0xfc003ba8>
 8003bd0:	d9801e04 	addi	r6,sp,120
 8003bd4:	b80b883a 	mov	r5,r23
 8003bd8:	9809883a 	mov	r4,r19
 8003bdc:	8009da80 	call	8009da8 <__sprint_r>
 8003be0:	103b7d1e 	bne	r2,zero,80029d8 <__alt_data_end+0xfc0029d8>
 8003be4:	d8c02017 	ldw	r3,128(sp)
 8003be8:	d8801f17 	ldw	r2,124(sp)
 8003bec:	da000404 	addi	r8,sp,16
 8003bf0:	003fee06 	br	8003bac <__alt_data_end+0xfc003bac>
 8003bf4:	9088703a 	and	r4,r18,r2
 8003bf8:	203eab1e 	bne	r4,zero,80036a8 <__alt_data_end+0xfc0036a8>
 8003bfc:	dc401f17 	ldw	r17,124(sp)
 8003c00:	40800115 	stw	r2,4(r8)
 8003c04:	44000015 	stw	r16,0(r8)
 8003c08:	8c400044 	addi	r17,r17,1
 8003c0c:	d8c02015 	stw	r3,128(sp)
 8003c10:	dc401f15 	stw	r17,124(sp)
 8003c14:	008001c4 	movi	r2,7
 8003c18:	14400e16 	blt	r2,r17,8003c54 <___vfprintf_internal_r+0x168c>
 8003c1c:	45800204 	addi	r22,r8,8
 8003c20:	003eca06 	br	800374c <__alt_data_end+0xfc00374c>
 8003c24:	01020074 	movhi	r4,2049
 8003c28:	2108db84 	addi	r4,r4,9070
 8003c2c:	d9002c15 	stw	r4,176(sp)
 8003c30:	d8802c17 	ldw	r2,176(sp)
 8003c34:	1c07883a 	add	r3,r3,r16
 8003c38:	8c400044 	addi	r17,r17,1
 8003c3c:	b0800015 	stw	r2,0(r22)
 8003c40:	b4000115 	stw	r16,4(r22)
 8003c44:	d8c02015 	stw	r3,128(sp)
 8003c48:	dc401f15 	stw	r17,124(sp)
 8003c4c:	008001c4 	movi	r2,7
 8003c50:	147ebd0e 	bge	r2,r17,8003748 <__alt_data_end+0xfc003748>
 8003c54:	d9002d17 	ldw	r4,180(sp)
 8003c58:	d9801e04 	addi	r6,sp,120
 8003c5c:	b80b883a 	mov	r5,r23
 8003c60:	8009da80 	call	8009da8 <__sprint_r>
 8003c64:	103b5c1e 	bne	r2,zero,80029d8 <__alt_data_end+0xfc0029d8>
 8003c68:	d8c02017 	ldw	r3,128(sp)
 8003c6c:	dc401f17 	ldw	r17,124(sp)
 8003c70:	dd800404 	addi	r22,sp,16
 8003c74:	003eb506 	br	800374c <__alt_data_end+0xfc00374c>
 8003c78:	d9002d17 	ldw	r4,180(sp)
 8003c7c:	d9801e04 	addi	r6,sp,120
 8003c80:	b80b883a 	mov	r5,r23
 8003c84:	8009da80 	call	8009da8 <__sprint_r>
 8003c88:	103b531e 	bne	r2,zero,80029d8 <__alt_data_end+0xfc0029d8>
 8003c8c:	d8c02017 	ldw	r3,128(sp)
 8003c90:	dc401f17 	ldw	r17,124(sp)
 8003c94:	da000404 	addi	r8,sp,16
 8003c98:	003e8d06 	br	80036d0 <__alt_data_end+0xfc0036d0>
 8003c9c:	d9002d17 	ldw	r4,180(sp)
 8003ca0:	d9801e04 	addi	r6,sp,120
 8003ca4:	b80b883a 	mov	r5,r23
 8003ca8:	8009da80 	call	8009da8 <__sprint_r>
 8003cac:	103b4a1e 	bne	r2,zero,80029d8 <__alt_data_end+0xfc0029d8>
 8003cb0:	d8c02017 	ldw	r3,128(sp)
 8003cb4:	dc401f17 	ldw	r17,124(sp)
 8003cb8:	dd800404 	addi	r22,sp,16
 8003cbc:	003e8f06 	br	80036fc <__alt_data_end+0xfc0036fc>
 8003cc0:	0027883a 	mov	r19,zero
 8003cc4:	003f4a06 	br	80039f0 <__alt_data_end+0xfc0039f0>
 8003cc8:	d9002d17 	ldw	r4,180(sp)
 8003ccc:	d9801e04 	addi	r6,sp,120
 8003cd0:	b80b883a 	mov	r5,r23
 8003cd4:	8009da80 	call	8009da8 <__sprint_r>
 8003cd8:	103b3f1e 	bne	r2,zero,80029d8 <__alt_data_end+0xfc0029d8>
 8003cdc:	d8c02017 	ldw	r3,128(sp)
 8003ce0:	da000404 	addi	r8,sp,16
 8003ce4:	003c7b06 	br	8002ed4 <__alt_data_end+0xfc002ed4>
 8003ce8:	d9402a17 	ldw	r5,168(sp)
 8003cec:	04e7c83a 	sub	r19,zero,r19
 8003cf0:	07000b44 	movi	fp,45
 8003cf4:	9804c03a 	cmpne	r2,r19,zero
 8003cf8:	05adc83a 	sub	r22,zero,r22
 8003cfc:	df002785 	stb	fp,158(sp)
 8003d00:	b0adc83a 	sub	r22,r22,r2
 8003d04:	28017b16 	blt	r5,zero,80042f4 <___vfprintf_internal_r+0x1d2c>
 8003d08:	00bfdfc4 	movi	r2,-129
 8003d0c:	90a4703a 	and	r18,r18,r2
 8003d10:	003b8906 	br	8002b38 <__alt_data_end+0xfc002b38>
 8003d14:	d9003617 	ldw	r4,216(sp)
 8003d18:	d9403817 	ldw	r5,224(sp)
 8003d1c:	da003d15 	stw	r8,244(sp)
 8003d20:	80099cc0 	call	80099cc <__fpclassifyd>
 8003d24:	da003d17 	ldw	r8,244(sp)
 8003d28:	1000f026 	beq	r2,zero,80040ec <___vfprintf_internal_r+0x1b24>
 8003d2c:	d9002a17 	ldw	r4,168(sp)
 8003d30:	05bff7c4 	movi	r22,-33
 8003d34:	00bfffc4 	movi	r2,-1
 8003d38:	8dac703a 	and	r22,r17,r22
 8003d3c:	20820026 	beq	r4,r2,8004540 <___vfprintf_internal_r+0x1f78>
 8003d40:	008011c4 	movi	r2,71
 8003d44:	b081f726 	beq	r22,r2,8004524 <___vfprintf_internal_r+0x1f5c>
 8003d48:	d9003817 	ldw	r4,224(sp)
 8003d4c:	90c04014 	ori	r3,r18,256
 8003d50:	d8c02c15 	stw	r3,176(sp)
 8003d54:	20021516 	blt	r4,zero,80045ac <___vfprintf_internal_r+0x1fe4>
 8003d58:	dcc03817 	ldw	r19,224(sp)
 8003d5c:	d8002905 	stb	zero,164(sp)
 8003d60:	00801984 	movi	r2,102
 8003d64:	8881f926 	beq	r17,r2,800454c <___vfprintf_internal_r+0x1f84>
 8003d68:	00801184 	movi	r2,70
 8003d6c:	88821c26 	beq	r17,r2,80045e0 <___vfprintf_internal_r+0x2018>
 8003d70:	00801144 	movi	r2,69
 8003d74:	b081ef26 	beq	r22,r2,8004534 <___vfprintf_internal_r+0x1f6c>
 8003d78:	d8c02a17 	ldw	r3,168(sp)
 8003d7c:	d8802104 	addi	r2,sp,132
 8003d80:	d8800315 	stw	r2,12(sp)
 8003d84:	d9403617 	ldw	r5,216(sp)
 8003d88:	d8802504 	addi	r2,sp,148
 8003d8c:	d9002d17 	ldw	r4,180(sp)
 8003d90:	d8800215 	stw	r2,8(sp)
 8003d94:	d8802604 	addi	r2,sp,152
 8003d98:	d8c00015 	stw	r3,0(sp)
 8003d9c:	d8800115 	stw	r2,4(sp)
 8003da0:	01c00084 	movi	r7,2
 8003da4:	980d883a 	mov	r6,r19
 8003da8:	d8c03c15 	stw	r3,240(sp)
 8003dac:	da003d15 	stw	r8,244(sp)
 8003db0:	8004cf80 	call	8004cf8 <_dtoa_r>
 8003db4:	1021883a 	mov	r16,r2
 8003db8:	008019c4 	movi	r2,103
 8003dbc:	d8c03c17 	ldw	r3,240(sp)
 8003dc0:	da003d17 	ldw	r8,244(sp)
 8003dc4:	88817126 	beq	r17,r2,800438c <___vfprintf_internal_r+0x1dc4>
 8003dc8:	008011c4 	movi	r2,71
 8003dcc:	88829126 	beq	r17,r2,8004814 <___vfprintf_internal_r+0x224c>
 8003dd0:	80f9883a 	add	fp,r16,r3
 8003dd4:	d9003617 	ldw	r4,216(sp)
 8003dd8:	000d883a 	mov	r6,zero
 8003ddc:	000f883a 	mov	r7,zero
 8003de0:	980b883a 	mov	r5,r19
 8003de4:	da003d15 	stw	r8,244(sp)
 8003de8:	800dd080 	call	800dd08 <__eqdf2>
 8003dec:	da003d17 	ldw	r8,244(sp)
 8003df0:	10018d26 	beq	r2,zero,8004428 <___vfprintf_internal_r+0x1e60>
 8003df4:	d8802117 	ldw	r2,132(sp)
 8003df8:	1700062e 	bgeu	r2,fp,8003e14 <___vfprintf_internal_r+0x184c>
 8003dfc:	01000c04 	movi	r4,48
 8003e00:	10c00044 	addi	r3,r2,1
 8003e04:	d8c02115 	stw	r3,132(sp)
 8003e08:	11000005 	stb	r4,0(r2)
 8003e0c:	d8802117 	ldw	r2,132(sp)
 8003e10:	173ffb36 	bltu	r2,fp,8003e00 <__alt_data_end+0xfc003e00>
 8003e14:	1405c83a 	sub	r2,r2,r16
 8003e18:	d8803315 	stw	r2,204(sp)
 8003e1c:	008011c4 	movi	r2,71
 8003e20:	b0817626 	beq	r22,r2,80043fc <___vfprintf_internal_r+0x1e34>
 8003e24:	00801944 	movi	r2,101
 8003e28:	1442800e 	bge	r2,r17,800482c <___vfprintf_internal_r+0x2264>
 8003e2c:	d8c02617 	ldw	r3,152(sp)
 8003e30:	00801984 	movi	r2,102
 8003e34:	d8c03215 	stw	r3,200(sp)
 8003e38:	8881fe26 	beq	r17,r2,8004634 <___vfprintf_internal_r+0x206c>
 8003e3c:	d8c03217 	ldw	r3,200(sp)
 8003e40:	d9003317 	ldw	r4,204(sp)
 8003e44:	1901dd16 	blt	r3,r4,80045bc <___vfprintf_internal_r+0x1ff4>
 8003e48:	9480004c 	andi	r18,r18,1
 8003e4c:	90022b1e 	bne	r18,zero,80046fc <___vfprintf_internal_r+0x2134>
 8003e50:	1805883a 	mov	r2,r3
 8003e54:	18028316 	blt	r3,zero,8004864 <___vfprintf_internal_r+0x229c>
 8003e58:	d8c03217 	ldw	r3,200(sp)
 8003e5c:	044019c4 	movi	r17,103
 8003e60:	d8c02b15 	stw	r3,172(sp)
 8003e64:	df002907 	ldb	fp,164(sp)
 8003e68:	e001531e 	bne	fp,zero,80043b8 <___vfprintf_internal_r+0x1df0>
 8003e6c:	df002783 	ldbu	fp,158(sp)
 8003e70:	d8802915 	stw	r2,164(sp)
 8003e74:	dc802c17 	ldw	r18,176(sp)
 8003e78:	d8002a15 	stw	zero,168(sp)
 8003e7c:	003baf06 	br	8002d3c <__alt_data_end+0xfc002d3c>
 8003e80:	d8c02e17 	ldw	r3,184(sp)
 8003e84:	d9002e17 	ldw	r4,184(sp)
 8003e88:	d9402e17 	ldw	r5,184(sp)
 8003e8c:	18c00017 	ldw	r3,0(r3)
 8003e90:	21000117 	ldw	r4,4(r4)
 8003e94:	29400204 	addi	r5,r5,8
 8003e98:	d8c03615 	stw	r3,216(sp)
 8003e9c:	d9003815 	stw	r4,224(sp)
 8003ea0:	d9402e15 	stw	r5,184(sp)
 8003ea4:	003b5006 	br	8002be8 <__alt_data_end+0xfc002be8>
 8003ea8:	ac400007 	ldb	r17,0(r21)
 8003eac:	003a2806 	br	8002750 <__alt_data_end+0xfc002750>
 8003eb0:	9080100c 	andi	r2,r18,64
 8003eb4:	1000a826 	beq	r2,zero,8004158 <___vfprintf_internal_r+0x1b90>
 8003eb8:	d8c02e17 	ldw	r3,184(sp)
 8003ebc:	002d883a 	mov	r22,zero
 8003ec0:	1cc0000b 	ldhu	r19,0(r3)
 8003ec4:	18c00104 	addi	r3,r3,4
 8003ec8:	d8c02e15 	stw	r3,184(sp)
 8003ecc:	003caf06 	br	800318c <__alt_data_end+0xfc00318c>
 8003ed0:	d9002e17 	ldw	r4,184(sp)
 8003ed4:	d9402a17 	ldw	r5,168(sp)
 8003ed8:	002d883a 	mov	r22,zero
 8003edc:	20800104 	addi	r2,r4,4
 8003ee0:	24c00017 	ldw	r19,0(r4)
 8003ee4:	283ebb0e 	bge	r5,zero,80039d4 <__alt_data_end+0xfc0039d4>
 8003ee8:	003ef106 	br	8003ab0 <__alt_data_end+0xfc003ab0>
 8003eec:	9080040c 	andi	r2,r18,16
 8003ef0:	1000921e 	bne	r2,zero,800413c <___vfprintf_internal_r+0x1b74>
 8003ef4:	9480100c 	andi	r18,r18,64
 8003ef8:	90013926 	beq	r18,zero,80043e0 <___vfprintf_internal_r+0x1e18>
 8003efc:	d9402e17 	ldw	r5,184(sp)
 8003f00:	d8c02f17 	ldw	r3,188(sp)
 8003f04:	28800017 	ldw	r2,0(r5)
 8003f08:	29400104 	addi	r5,r5,4
 8003f0c:	d9402e15 	stw	r5,184(sp)
 8003f10:	10c0000d 	sth	r3,0(r2)
 8003f14:	0039e406 	br	80026a8 <__alt_data_end+0xfc0026a8>
 8003f18:	9080100c 	andi	r2,r18,64
 8003f1c:	10008026 	beq	r2,zero,8004120 <___vfprintf_internal_r+0x1b58>
 8003f20:	d8802e17 	ldw	r2,184(sp)
 8003f24:	14c0000f 	ldh	r19,0(r2)
 8003f28:	10800104 	addi	r2,r2,4
 8003f2c:	d8802e15 	stw	r2,184(sp)
 8003f30:	982dd7fa 	srai	r22,r19,31
 8003f34:	b005883a 	mov	r2,r22
 8003f38:	003af706 	br	8002b18 <__alt_data_end+0xfc002b18>
 8003f3c:	9080100c 	andi	r2,r18,64
 8003f40:	d8002785 	stb	zero,158(sp)
 8003f44:	10008a1e 	bne	r2,zero,8004170 <___vfprintf_internal_r+0x1ba8>
 8003f48:	d9002e17 	ldw	r4,184(sp)
 8003f4c:	d9402a17 	ldw	r5,168(sp)
 8003f50:	002d883a 	mov	r22,zero
 8003f54:	20800104 	addi	r2,r4,4
 8003f58:	24c00017 	ldw	r19,0(r4)
 8003f5c:	283e4b0e 	bge	r5,zero,800388c <__alt_data_end+0xfc00388c>
 8003f60:	9d86b03a 	or	r3,r19,r22
 8003f64:	d8802e15 	stw	r2,184(sp)
 8003f68:	183e4c1e 	bne	r3,zero,800389c <__alt_data_end+0xfc00389c>
 8003f6c:	0039883a 	mov	fp,zero
 8003f70:	0005883a 	mov	r2,zero
 8003f74:	003d4006 	br	8003478 <__alt_data_end+0xfc003478>
 8003f78:	01420074 	movhi	r5,2049
 8003f7c:	2948db84 	addi	r5,r5,9070
 8003f80:	d9402c15 	stw	r5,176(sp)
 8003f84:	d9402c17 	ldw	r5,176(sp)
 8003f88:	1c47883a 	add	r3,r3,r17
 8003f8c:	10800044 	addi	r2,r2,1
 8003f90:	41400015 	stw	r5,0(r8)
 8003f94:	44400115 	stw	r17,4(r8)
 8003f98:	d8c02015 	stw	r3,128(sp)
 8003f9c:	d8801f15 	stw	r2,124(sp)
 8003fa0:	010001c4 	movi	r4,7
 8003fa4:	20bec816 	blt	r4,r2,8003ac8 <__alt_data_end+0xfc003ac8>
 8003fa8:	42000204 	addi	r8,r8,8
 8003fac:	003ecd06 	br	8003ae4 <__alt_data_end+0xfc003ae4>
 8003fb0:	d9002a17 	ldw	r4,168(sp)
 8003fb4:	d8002785 	stb	zero,158(sp)
 8003fb8:	203d2d16 	blt	r4,zero,8003470 <__alt_data_end+0xfc003470>
 8003fbc:	00bfdfc4 	movi	r2,-129
 8003fc0:	90a4703a 	and	r18,r18,r2
 8003fc4:	003a6106 	br	800294c <__alt_data_end+0xfc00294c>
 8003fc8:	01020074 	movhi	r4,2049
 8003fcc:	2108db84 	addi	r4,r4,9070
 8003fd0:	d9002c15 	stw	r4,176(sp)
 8003fd4:	003bea06 	br	8002f80 <__alt_data_end+0xfc002f80>
 8003fd8:	d9002d17 	ldw	r4,180(sp)
 8003fdc:	d9801e04 	addi	r6,sp,120
 8003fe0:	b80b883a 	mov	r5,r23
 8003fe4:	8009da80 	call	8009da8 <__sprint_r>
 8003fe8:	103a7b1e 	bne	r2,zero,80029d8 <__alt_data_end+0xfc0029d8>
 8003fec:	d8c02017 	ldw	r3,128(sp)
 8003ff0:	da000404 	addi	r8,sp,16
 8003ff4:	003d4106 	br	80034fc <__alt_data_end+0xfc0034fc>
 8003ff8:	d8801f17 	ldw	r2,124(sp)
 8003ffc:	01420074 	movhi	r5,2049
 8004000:	01000044 	movi	r4,1
 8004004:	18c00044 	addi	r3,r3,1
 8004008:	10800044 	addi	r2,r2,1
 800400c:	2948db04 	addi	r5,r5,9068
 8004010:	41000115 	stw	r4,4(r8)
 8004014:	41400015 	stw	r5,0(r8)
 8004018:	d8c02015 	stw	r3,128(sp)
 800401c:	d8801f15 	stw	r2,124(sp)
 8004020:	010001c4 	movi	r4,7
 8004024:	20805c16 	blt	r4,r2,8004198 <___vfprintf_internal_r+0x1bd0>
 8004028:	42000204 	addi	r8,r8,8
 800402c:	8800041e 	bne	r17,zero,8004040 <___vfprintf_internal_r+0x1a78>
 8004030:	d8803317 	ldw	r2,204(sp)
 8004034:	1000021e 	bne	r2,zero,8004040 <___vfprintf_internal_r+0x1a78>
 8004038:	9080004c 	andi	r2,r18,1
 800403c:	103be726 	beq	r2,zero,8002fdc <__alt_data_end+0xfc002fdc>
 8004040:	d9003717 	ldw	r4,220(sp)
 8004044:	d8801f17 	ldw	r2,124(sp)
 8004048:	d9403417 	ldw	r5,208(sp)
 800404c:	20c7883a 	add	r3,r4,r3
 8004050:	10800044 	addi	r2,r2,1
 8004054:	41000115 	stw	r4,4(r8)
 8004058:	41400015 	stw	r5,0(r8)
 800405c:	d8c02015 	stw	r3,128(sp)
 8004060:	d8801f15 	stw	r2,124(sp)
 8004064:	010001c4 	movi	r4,7
 8004068:	20812116 	blt	r4,r2,80044f0 <___vfprintf_internal_r+0x1f28>
 800406c:	42000204 	addi	r8,r8,8
 8004070:	0463c83a 	sub	r17,zero,r17
 8004074:	0440730e 	bge	zero,r17,8004244 <___vfprintf_internal_r+0x1c7c>
 8004078:	05800404 	movi	r22,16
 800407c:	b440860e 	bge	r22,r17,8004298 <___vfprintf_internal_r+0x1cd0>
 8004080:	01420074 	movhi	r5,2049
 8004084:	2948db84 	addi	r5,r5,9070
 8004088:	d9402c15 	stw	r5,176(sp)
 800408c:	070001c4 	movi	fp,7
 8004090:	dcc02d17 	ldw	r19,180(sp)
 8004094:	00000306 	br	80040a4 <___vfprintf_internal_r+0x1adc>
 8004098:	42000204 	addi	r8,r8,8
 800409c:	8c7ffc04 	addi	r17,r17,-16
 80040a0:	b440800e 	bge	r22,r17,80042a4 <___vfprintf_internal_r+0x1cdc>
 80040a4:	18c00404 	addi	r3,r3,16
 80040a8:	10800044 	addi	r2,r2,1
 80040ac:	45000015 	stw	r20,0(r8)
 80040b0:	45800115 	stw	r22,4(r8)
 80040b4:	d8c02015 	stw	r3,128(sp)
 80040b8:	d8801f15 	stw	r2,124(sp)
 80040bc:	e0bff60e 	bge	fp,r2,8004098 <__alt_data_end+0xfc004098>
 80040c0:	d9801e04 	addi	r6,sp,120
 80040c4:	b80b883a 	mov	r5,r23
 80040c8:	9809883a 	mov	r4,r19
 80040cc:	8009da80 	call	8009da8 <__sprint_r>
 80040d0:	103a411e 	bne	r2,zero,80029d8 <__alt_data_end+0xfc0029d8>
 80040d4:	d8c02017 	ldw	r3,128(sp)
 80040d8:	d8801f17 	ldw	r2,124(sp)
 80040dc:	da000404 	addi	r8,sp,16
 80040e0:	003fee06 	br	800409c <__alt_data_end+0xfc00409c>
 80040e4:	00bfffc4 	movi	r2,-1
 80040e8:	003a3f06 	br	80029e8 <__alt_data_end+0xfc0029e8>
 80040ec:	008011c4 	movi	r2,71
 80040f0:	1440b816 	blt	r2,r17,80043d4 <___vfprintf_internal_r+0x1e0c>
 80040f4:	04020074 	movhi	r16,2049
 80040f8:	8408cd04 	addi	r16,r16,9012
 80040fc:	00c000c4 	movi	r3,3
 8004100:	00bfdfc4 	movi	r2,-129
 8004104:	d8c02915 	stw	r3,164(sp)
 8004108:	90a4703a 	and	r18,r18,r2
 800410c:	df002783 	ldbu	fp,158(sp)
 8004110:	d8c02b15 	stw	r3,172(sp)
 8004114:	d8002a15 	stw	zero,168(sp)
 8004118:	d8003215 	stw	zero,200(sp)
 800411c:	003b0706 	br	8002d3c <__alt_data_end+0xfc002d3c>
 8004120:	d8c02e17 	ldw	r3,184(sp)
 8004124:	1cc00017 	ldw	r19,0(r3)
 8004128:	18c00104 	addi	r3,r3,4
 800412c:	d8c02e15 	stw	r3,184(sp)
 8004130:	982dd7fa 	srai	r22,r19,31
 8004134:	b005883a 	mov	r2,r22
 8004138:	003a7706 	br	8002b18 <__alt_data_end+0xfc002b18>
 800413c:	d8c02e17 	ldw	r3,184(sp)
 8004140:	d9002f17 	ldw	r4,188(sp)
 8004144:	18800017 	ldw	r2,0(r3)
 8004148:	18c00104 	addi	r3,r3,4
 800414c:	d8c02e15 	stw	r3,184(sp)
 8004150:	11000015 	stw	r4,0(r2)
 8004154:	00395406 	br	80026a8 <__alt_data_end+0xfc0026a8>
 8004158:	d9002e17 	ldw	r4,184(sp)
 800415c:	002d883a 	mov	r22,zero
 8004160:	24c00017 	ldw	r19,0(r4)
 8004164:	21000104 	addi	r4,r4,4
 8004168:	d9002e15 	stw	r4,184(sp)
 800416c:	003c0706 	br	800318c <__alt_data_end+0xfc00318c>
 8004170:	d9402e17 	ldw	r5,184(sp)
 8004174:	d8c02a17 	ldw	r3,168(sp)
 8004178:	002d883a 	mov	r22,zero
 800417c:	28800104 	addi	r2,r5,4
 8004180:	2cc0000b 	ldhu	r19,0(r5)
 8004184:	183dc10e 	bge	r3,zero,800388c <__alt_data_end+0xfc00388c>
 8004188:	003f7506 	br	8003f60 <__alt_data_end+0xfc003f60>
 800418c:	04020074 	movhi	r16,2049
 8004190:	8408cb04 	addi	r16,r16,9004
 8004194:	003aa706 	br	8002c34 <__alt_data_end+0xfc002c34>
 8004198:	d9002d17 	ldw	r4,180(sp)
 800419c:	d9801e04 	addi	r6,sp,120
 80041a0:	b80b883a 	mov	r5,r23
 80041a4:	8009da80 	call	8009da8 <__sprint_r>
 80041a8:	103a0b1e 	bne	r2,zero,80029d8 <__alt_data_end+0xfc0029d8>
 80041ac:	dc402617 	ldw	r17,152(sp)
 80041b0:	d8c02017 	ldw	r3,128(sp)
 80041b4:	da000404 	addi	r8,sp,16
 80041b8:	003f9c06 	br	800402c <__alt_data_end+0xfc00402c>
 80041bc:	ac400043 	ldbu	r17,1(r21)
 80041c0:	84000814 	ori	r16,r16,32
 80041c4:	ad400044 	addi	r21,r21,1
 80041c8:	8c403fcc 	andi	r17,r17,255
 80041cc:	8c40201c 	xori	r17,r17,128
 80041d0:	8c7fe004 	addi	r17,r17,-128
 80041d4:	00395e06 	br	8002750 <__alt_data_end+0xfc002750>
 80041d8:	d8c02e15 	stw	r3,184(sp)
 80041dc:	0039883a 	mov	fp,zero
 80041e0:	003e3506 	br	8003ab8 <__alt_data_end+0xfc003ab8>
 80041e4:	d9002d17 	ldw	r4,180(sp)
 80041e8:	d9801e04 	addi	r6,sp,120
 80041ec:	b80b883a 	mov	r5,r23
 80041f0:	8009da80 	call	8009da8 <__sprint_r>
 80041f4:	1039f81e 	bne	r2,zero,80029d8 <__alt_data_end+0xfc0029d8>
 80041f8:	d8c02017 	ldw	r3,128(sp)
 80041fc:	da000404 	addi	r8,sp,16
 8004200:	003cd006 	br	8003544 <__alt_data_end+0xfc003544>
 8004204:	8009883a 	mov	r4,r16
 8004208:	df003d15 	stw	fp,244(sp)
 800420c:	80025300 	call	8002530 <strlen>
 8004210:	d8802b15 	stw	r2,172(sp)
 8004214:	da003d17 	ldw	r8,244(sp)
 8004218:	103c200e 	bge	r2,zero,800329c <__alt_data_end+0xfc00329c>
 800421c:	0005883a 	mov	r2,zero
 8004220:	003c1e06 	br	800329c <__alt_data_end+0xfc00329c>
 8004224:	d9002d17 	ldw	r4,180(sp)
 8004228:	d9801e04 	addi	r6,sp,120
 800422c:	b80b883a 	mov	r5,r23
 8004230:	8009da80 	call	8009da8 <__sprint_r>
 8004234:	1039e81e 	bne	r2,zero,80029d8 <__alt_data_end+0xfc0029d8>
 8004238:	d8c02017 	ldw	r3,128(sp)
 800423c:	d8801f17 	ldw	r2,124(sp)
 8004240:	da000404 	addi	r8,sp,16
 8004244:	d9403317 	ldw	r5,204(sp)
 8004248:	10800044 	addi	r2,r2,1
 800424c:	44000015 	stw	r16,0(r8)
 8004250:	28c7883a 	add	r3,r5,r3
 8004254:	003b5b06 	br	8002fc4 <__alt_data_end+0xfc002fc4>
 8004258:	01020074 	movhi	r4,2049
 800425c:	2108df84 	addi	r4,r4,9086
 8004260:	d9003515 	stw	r4,212(sp)
 8004264:	003af206 	br	8002e30 <__alt_data_end+0xfc002e30>
 8004268:	013fffc4 	movi	r4,-1
 800426c:	003a0806 	br	8002a90 <__alt_data_end+0xfc002a90>
 8004270:	0023883a 	mov	r17,zero
 8004274:	003d9d06 	br	80038ec <__alt_data_end+0xfc0038ec>
 8004278:	d9002d17 	ldw	r4,180(sp)
 800427c:	d9801e04 	addi	r6,sp,120
 8004280:	b80b883a 	mov	r5,r23
 8004284:	8009da80 	call	8009da8 <__sprint_r>
 8004288:	1039d31e 	bne	r2,zero,80029d8 <__alt_data_end+0xfc0029d8>
 800428c:	d8c02017 	ldw	r3,128(sp)
 8004290:	da000404 	addi	r8,sp,16
 8004294:	003d9406 	br	80038e8 <__alt_data_end+0xfc0038e8>
 8004298:	01020074 	movhi	r4,2049
 800429c:	2108db84 	addi	r4,r4,9070
 80042a0:	d9002c15 	stw	r4,176(sp)
 80042a4:	d9002c17 	ldw	r4,176(sp)
 80042a8:	1c47883a 	add	r3,r3,r17
 80042ac:	10800044 	addi	r2,r2,1
 80042b0:	41000015 	stw	r4,0(r8)
 80042b4:	44400115 	stw	r17,4(r8)
 80042b8:	d8c02015 	stw	r3,128(sp)
 80042bc:	d8801f15 	stw	r2,124(sp)
 80042c0:	010001c4 	movi	r4,7
 80042c4:	20bfd716 	blt	r4,r2,8004224 <__alt_data_end+0xfc004224>
 80042c8:	42000204 	addi	r8,r8,8
 80042cc:	003fdd06 	br	8004244 <__alt_data_end+0xfc004244>
 80042d0:	d9002d17 	ldw	r4,180(sp)
 80042d4:	d9801e04 	addi	r6,sp,120
 80042d8:	b80b883a 	mov	r5,r23
 80042dc:	8009da80 	call	8009da8 <__sprint_r>
 80042e0:	1039bd1e 	bne	r2,zero,80029d8 <__alt_data_end+0xfc0029d8>
 80042e4:	d8802617 	ldw	r2,152(sp)
 80042e8:	d8c02017 	ldw	r3,128(sp)
 80042ec:	da000404 	addi	r8,sp,16
 80042f0:	003e1006 	br	8003b34 <__alt_data_end+0xfc003b34>
 80042f4:	00800044 	movi	r2,1
 80042f8:	10803fcc 	andi	r2,r2,255
 80042fc:	00c00044 	movi	r3,1
 8004300:	10fa0d26 	beq	r2,r3,8002b38 <__alt_data_end+0xfc002b38>
 8004304:	00c00084 	movi	r3,2
 8004308:	10fbaf26 	beq	r2,r3,80031c8 <__alt_data_end+0xfc0031c8>
 800430c:	003a6d06 	br	8002cc4 <__alt_data_end+0xfc002cc4>
 8004310:	01020074 	movhi	r4,2049
 8004314:	2108df84 	addi	r4,r4,9086
 8004318:	d9003515 	stw	r4,212(sp)
 800431c:	003b5406 	br	8003070 <__alt_data_end+0xfc003070>
 8004320:	d8802a17 	ldw	r2,168(sp)
 8004324:	00c00184 	movi	r3,6
 8004328:	1880012e 	bgeu	r3,r2,8004330 <___vfprintf_internal_r+0x1d68>
 800432c:	1805883a 	mov	r2,r3
 8004330:	d8802b15 	stw	r2,172(sp)
 8004334:	1000ef16 	blt	r2,zero,80046f4 <___vfprintf_internal_r+0x212c>
 8004338:	04020074 	movhi	r16,2049
 800433c:	d8802915 	stw	r2,164(sp)
 8004340:	dcc02e15 	stw	r19,184(sp)
 8004344:	d8002a15 	stw	zero,168(sp)
 8004348:	d8003215 	stw	zero,200(sp)
 800434c:	8408d904 	addi	r16,r16,9060
 8004350:	0039883a 	mov	fp,zero
 8004354:	003a8006 	br	8002d58 <__alt_data_end+0xfc002d58>
 8004358:	0021883a 	mov	r16,zero
 800435c:	003e0706 	br	8003b7c <__alt_data_end+0xfc003b7c>
 8004360:	d9002d17 	ldw	r4,180(sp)
 8004364:	d9801e04 	addi	r6,sp,120
 8004368:	b80b883a 	mov	r5,r23
 800436c:	8009da80 	call	8009da8 <__sprint_r>
 8004370:	1039991e 	bne	r2,zero,80029d8 <__alt_data_end+0xfc0029d8>
 8004374:	d8802617 	ldw	r2,152(sp)
 8004378:	d9403317 	ldw	r5,204(sp)
 800437c:	d8c02017 	ldw	r3,128(sp)
 8004380:	da000404 	addi	r8,sp,16
 8004384:	2885c83a 	sub	r2,r5,r2
 8004388:	003dfb06 	br	8003b78 <__alt_data_end+0xfc003b78>
 800438c:	9080004c 	andi	r2,r18,1
 8004390:	103e8f1e 	bne	r2,zero,8003dd0 <__alt_data_end+0xfc003dd0>
 8004394:	d8802117 	ldw	r2,132(sp)
 8004398:	003e9e06 	br	8003e14 <__alt_data_end+0xfc003e14>
 800439c:	1025883a 	mov	r18,r2
 80043a0:	0039883a 	mov	fp,zero
 80043a4:	00800084 	movi	r2,2
 80043a8:	003fd306 	br	80042f8 <__alt_data_end+0xfc0042f8>
 80043ac:	07000b44 	movi	fp,45
 80043b0:	df002785 	stb	fp,158(sp)
 80043b4:	003a1b06 	br	8002c24 <__alt_data_end+0xfc002c24>
 80043b8:	00c00b44 	movi	r3,45
 80043bc:	d8c02785 	stb	r3,158(sp)
 80043c0:	d8802915 	stw	r2,164(sp)
 80043c4:	dc802c17 	ldw	r18,176(sp)
 80043c8:	d8002a15 	stw	zero,168(sp)
 80043cc:	07000b44 	movi	fp,45
 80043d0:	003a5e06 	br	8002d4c <__alt_data_end+0xfc002d4c>
 80043d4:	04020074 	movhi	r16,2049
 80043d8:	8408ce04 	addi	r16,r16,9016
 80043dc:	003f4706 	br	80040fc <__alt_data_end+0xfc0040fc>
 80043e0:	d9002e17 	ldw	r4,184(sp)
 80043e4:	d9402f17 	ldw	r5,188(sp)
 80043e8:	20800017 	ldw	r2,0(r4)
 80043ec:	21000104 	addi	r4,r4,4
 80043f0:	d9002e15 	stw	r4,184(sp)
 80043f4:	11400015 	stw	r5,0(r2)
 80043f8:	0038ab06 	br	80026a8 <__alt_data_end+0xfc0026a8>
 80043fc:	dd802617 	ldw	r22,152(sp)
 8004400:	00bfff44 	movi	r2,-3
 8004404:	b0801c16 	blt	r22,r2,8004478 <___vfprintf_internal_r+0x1eb0>
 8004408:	d9402a17 	ldw	r5,168(sp)
 800440c:	2d801a16 	blt	r5,r22,8004478 <___vfprintf_internal_r+0x1eb0>
 8004410:	dd803215 	stw	r22,200(sp)
 8004414:	003e8906 	br	8003e3c <__alt_data_end+0xfc003e3c>
 8004418:	01020074 	movhi	r4,2049
 800441c:	2108db84 	addi	r4,r4,9070
 8004420:	d9002c15 	stw	r4,176(sp)
 8004424:	003c9106 	br	800366c <__alt_data_end+0xfc00366c>
 8004428:	e005883a 	mov	r2,fp
 800442c:	003e7906 	br	8003e14 <__alt_data_end+0xfc003e14>
 8004430:	d9002a17 	ldw	r4,168(sp)
 8004434:	df002783 	ldbu	fp,158(sp)
 8004438:	dcc02e15 	stw	r19,184(sp)
 800443c:	d9002915 	stw	r4,164(sp)
 8004440:	d9002b15 	stw	r4,172(sp)
 8004444:	d8002a15 	stw	zero,168(sp)
 8004448:	d8003215 	stw	zero,200(sp)
 800444c:	003a3b06 	br	8002d3c <__alt_data_end+0xfc002d3c>
 8004450:	9080004c 	andi	r2,r18,1
 8004454:	0039883a 	mov	fp,zero
 8004458:	10000426 	beq	r2,zero,800446c <___vfprintf_internal_r+0x1ea4>
 800445c:	00800c04 	movi	r2,48
 8004460:	dc001dc4 	addi	r16,sp,119
 8004464:	d8801dc5 	stb	r2,119(sp)
 8004468:	003b6406 	br	80031fc <__alt_data_end+0xfc0031fc>
 800446c:	d8002b15 	stw	zero,172(sp)
 8004470:	dc001e04 	addi	r16,sp,120
 8004474:	003a2b06 	br	8002d24 <__alt_data_end+0xfc002d24>
 8004478:	8c7fff84 	addi	r17,r17,-2
 800447c:	b5bfffc4 	addi	r22,r22,-1
 8004480:	dd802615 	stw	r22,152(sp)
 8004484:	dc4022c5 	stb	r17,139(sp)
 8004488:	b000bf16 	blt	r22,zero,8004788 <___vfprintf_internal_r+0x21c0>
 800448c:	00800ac4 	movi	r2,43
 8004490:	d8802305 	stb	r2,140(sp)
 8004494:	00800244 	movi	r2,9
 8004498:	15807016 	blt	r2,r22,800465c <___vfprintf_internal_r+0x2094>
 800449c:	00800c04 	movi	r2,48
 80044a0:	b5800c04 	addi	r22,r22,48
 80044a4:	d8802345 	stb	r2,141(sp)
 80044a8:	dd802385 	stb	r22,142(sp)
 80044ac:	d88023c4 	addi	r2,sp,143
 80044b0:	df0022c4 	addi	fp,sp,139
 80044b4:	d8c03317 	ldw	r3,204(sp)
 80044b8:	1739c83a 	sub	fp,r2,fp
 80044bc:	d9003317 	ldw	r4,204(sp)
 80044c0:	e0c7883a 	add	r3,fp,r3
 80044c4:	df003a15 	stw	fp,232(sp)
 80044c8:	d8c02b15 	stw	r3,172(sp)
 80044cc:	00800044 	movi	r2,1
 80044d0:	1100b30e 	bge	r2,r4,80047a0 <___vfprintf_internal_r+0x21d8>
 80044d4:	d8c02b17 	ldw	r3,172(sp)
 80044d8:	18c00044 	addi	r3,r3,1
 80044dc:	d8c02b15 	stw	r3,172(sp)
 80044e0:	1805883a 	mov	r2,r3
 80044e4:	1800ac16 	blt	r3,zero,8004798 <___vfprintf_internal_r+0x21d0>
 80044e8:	d8003215 	stw	zero,200(sp)
 80044ec:	003e5d06 	br	8003e64 <__alt_data_end+0xfc003e64>
 80044f0:	d9002d17 	ldw	r4,180(sp)
 80044f4:	d9801e04 	addi	r6,sp,120
 80044f8:	b80b883a 	mov	r5,r23
 80044fc:	8009da80 	call	8009da8 <__sprint_r>
 8004500:	1039351e 	bne	r2,zero,80029d8 <__alt_data_end+0xfc0029d8>
 8004504:	dc402617 	ldw	r17,152(sp)
 8004508:	d8c02017 	ldw	r3,128(sp)
 800450c:	d8801f17 	ldw	r2,124(sp)
 8004510:	da000404 	addi	r8,sp,16
 8004514:	003ed606 	br	8004070 <__alt_data_end+0xfc004070>
 8004518:	182b883a 	mov	r21,r3
 800451c:	d8002a15 	stw	zero,168(sp)
 8004520:	00388c06 	br	8002754 <__alt_data_end+0xfc002754>
 8004524:	d8802a17 	ldw	r2,168(sp)
 8004528:	103e071e 	bne	r2,zero,8003d48 <__alt_data_end+0xfc003d48>
 800452c:	dc002a15 	stw	r16,168(sp)
 8004530:	003e0506 	br	8003d48 <__alt_data_end+0xfc003d48>
 8004534:	d9002a17 	ldw	r4,168(sp)
 8004538:	20c00044 	addi	r3,r4,1
 800453c:	003e0f06 	br	8003d7c <__alt_data_end+0xfc003d7c>
 8004540:	01400184 	movi	r5,6
 8004544:	d9402a15 	stw	r5,168(sp)
 8004548:	003dff06 	br	8003d48 <__alt_data_end+0xfc003d48>
 800454c:	d8802104 	addi	r2,sp,132
 8004550:	d8800315 	stw	r2,12(sp)
 8004554:	d8802504 	addi	r2,sp,148
 8004558:	d8800215 	stw	r2,8(sp)
 800455c:	d8802604 	addi	r2,sp,152
 8004560:	d8800115 	stw	r2,4(sp)
 8004564:	d8802a17 	ldw	r2,168(sp)
 8004568:	d9403617 	ldw	r5,216(sp)
 800456c:	d9002d17 	ldw	r4,180(sp)
 8004570:	d8800015 	stw	r2,0(sp)
 8004574:	01c000c4 	movi	r7,3
 8004578:	980d883a 	mov	r6,r19
 800457c:	da003d15 	stw	r8,244(sp)
 8004580:	8004cf80 	call	8004cf8 <_dtoa_r>
 8004584:	d8c02a17 	ldw	r3,168(sp)
 8004588:	da003d17 	ldw	r8,244(sp)
 800458c:	1021883a 	mov	r16,r2
 8004590:	10f9883a 	add	fp,r2,r3
 8004594:	81000007 	ldb	r4,0(r16)
 8004598:	00800c04 	movi	r2,48
 800459c:	20805e26 	beq	r4,r2,8004718 <___vfprintf_internal_r+0x2150>
 80045a0:	d8c02617 	ldw	r3,152(sp)
 80045a4:	e0f9883a 	add	fp,fp,r3
 80045a8:	003e0a06 	br	8003dd4 <__alt_data_end+0xfc003dd4>
 80045ac:	00c00b44 	movi	r3,45
 80045b0:	24e0003c 	xorhi	r19,r4,32768
 80045b4:	d8c02905 	stb	r3,164(sp)
 80045b8:	003de906 	br	8003d60 <__alt_data_end+0xfc003d60>
 80045bc:	d8c03217 	ldw	r3,200(sp)
 80045c0:	00c07a0e 	bge	zero,r3,80047ac <___vfprintf_internal_r+0x21e4>
 80045c4:	00800044 	movi	r2,1
 80045c8:	d9003317 	ldw	r4,204(sp)
 80045cc:	1105883a 	add	r2,r2,r4
 80045d0:	d8802b15 	stw	r2,172(sp)
 80045d4:	10004e16 	blt	r2,zero,8004710 <___vfprintf_internal_r+0x2148>
 80045d8:	044019c4 	movi	r17,103
 80045dc:	003e2106 	br	8003e64 <__alt_data_end+0xfc003e64>
 80045e0:	d9002a17 	ldw	r4,168(sp)
 80045e4:	d8802104 	addi	r2,sp,132
 80045e8:	d8800315 	stw	r2,12(sp)
 80045ec:	d9000015 	stw	r4,0(sp)
 80045f0:	d8802504 	addi	r2,sp,148
 80045f4:	d9403617 	ldw	r5,216(sp)
 80045f8:	d9002d17 	ldw	r4,180(sp)
 80045fc:	d8800215 	stw	r2,8(sp)
 8004600:	d8802604 	addi	r2,sp,152
 8004604:	d8800115 	stw	r2,4(sp)
 8004608:	01c000c4 	movi	r7,3
 800460c:	980d883a 	mov	r6,r19
 8004610:	da003d15 	stw	r8,244(sp)
 8004614:	8004cf80 	call	8004cf8 <_dtoa_r>
 8004618:	d8c02a17 	ldw	r3,168(sp)
 800461c:	da003d17 	ldw	r8,244(sp)
 8004620:	1021883a 	mov	r16,r2
 8004624:	00801184 	movi	r2,70
 8004628:	80f9883a 	add	fp,r16,r3
 800462c:	88bfd926 	beq	r17,r2,8004594 <__alt_data_end+0xfc004594>
 8004630:	003de806 	br	8003dd4 <__alt_data_end+0xfc003dd4>
 8004634:	d9002a17 	ldw	r4,168(sp)
 8004638:	00c04d0e 	bge	zero,r3,8004770 <___vfprintf_internal_r+0x21a8>
 800463c:	2000441e 	bne	r4,zero,8004750 <___vfprintf_internal_r+0x2188>
 8004640:	9480004c 	andi	r18,r18,1
 8004644:	9000421e 	bne	r18,zero,8004750 <___vfprintf_internal_r+0x2188>
 8004648:	1805883a 	mov	r2,r3
 800464c:	18006f16 	blt	r3,zero,800480c <___vfprintf_internal_r+0x2244>
 8004650:	d8c03217 	ldw	r3,200(sp)
 8004654:	d8c02b15 	stw	r3,172(sp)
 8004658:	003e0206 	br	8003e64 <__alt_data_end+0xfc003e64>
 800465c:	df0022c4 	addi	fp,sp,139
 8004660:	dc002a15 	stw	r16,168(sp)
 8004664:	4027883a 	mov	r19,r8
 8004668:	e021883a 	mov	r16,fp
 800466c:	b009883a 	mov	r4,r22
 8004670:	01400284 	movi	r5,10
 8004674:	800c9340 	call	800c934 <__modsi3>
 8004678:	10800c04 	addi	r2,r2,48
 800467c:	843fffc4 	addi	r16,r16,-1
 8004680:	b009883a 	mov	r4,r22
 8004684:	01400284 	movi	r5,10
 8004688:	80800005 	stb	r2,0(r16)
 800468c:	800c8b00 	call	800c8b0 <__divsi3>
 8004690:	102d883a 	mov	r22,r2
 8004694:	00800244 	movi	r2,9
 8004698:	15bff416 	blt	r2,r22,800466c <__alt_data_end+0xfc00466c>
 800469c:	9811883a 	mov	r8,r19
 80046a0:	b0800c04 	addi	r2,r22,48
 80046a4:	8027883a 	mov	r19,r16
 80046a8:	997fffc4 	addi	r5,r19,-1
 80046ac:	98bfffc5 	stb	r2,-1(r19)
 80046b0:	dc002a17 	ldw	r16,168(sp)
 80046b4:	2f006d2e 	bgeu	r5,fp,800486c <___vfprintf_internal_r+0x22a4>
 80046b8:	d9c02384 	addi	r7,sp,142
 80046bc:	3ccfc83a 	sub	r7,r7,r19
 80046c0:	d9002344 	addi	r4,sp,141
 80046c4:	e1cf883a 	add	r7,fp,r7
 80046c8:	00000106 	br	80046d0 <___vfprintf_internal_r+0x2108>
 80046cc:	28800003 	ldbu	r2,0(r5)
 80046d0:	20800005 	stb	r2,0(r4)
 80046d4:	21000044 	addi	r4,r4,1
 80046d8:	29400044 	addi	r5,r5,1
 80046dc:	393ffb1e 	bne	r7,r4,80046cc <__alt_data_end+0xfc0046cc>
 80046e0:	d8802304 	addi	r2,sp,140
 80046e4:	14c5c83a 	sub	r2,r2,r19
 80046e8:	d8c02344 	addi	r3,sp,141
 80046ec:	1885883a 	add	r2,r3,r2
 80046f0:	003f7006 	br	80044b4 <__alt_data_end+0xfc0044b4>
 80046f4:	0005883a 	mov	r2,zero
 80046f8:	003f0f06 	br	8004338 <__alt_data_end+0xfc004338>
 80046fc:	d8c03217 	ldw	r3,200(sp)
 8004700:	18c00044 	addi	r3,r3,1
 8004704:	d8c02b15 	stw	r3,172(sp)
 8004708:	1805883a 	mov	r2,r3
 800470c:	183fb20e 	bge	r3,zero,80045d8 <__alt_data_end+0xfc0045d8>
 8004710:	0005883a 	mov	r2,zero
 8004714:	003fb006 	br	80045d8 <__alt_data_end+0xfc0045d8>
 8004718:	d9003617 	ldw	r4,216(sp)
 800471c:	000d883a 	mov	r6,zero
 8004720:	000f883a 	mov	r7,zero
 8004724:	980b883a 	mov	r5,r19
 8004728:	d8c03c15 	stw	r3,240(sp)
 800472c:	da003d15 	stw	r8,244(sp)
 8004730:	800dd080 	call	800dd08 <__eqdf2>
 8004734:	d8c03c17 	ldw	r3,240(sp)
 8004738:	da003d17 	ldw	r8,244(sp)
 800473c:	103f9826 	beq	r2,zero,80045a0 <__alt_data_end+0xfc0045a0>
 8004740:	00800044 	movi	r2,1
 8004744:	10c7c83a 	sub	r3,r2,r3
 8004748:	d8c02615 	stw	r3,152(sp)
 800474c:	003f9506 	br	80045a4 <__alt_data_end+0xfc0045a4>
 8004750:	d9002a17 	ldw	r4,168(sp)
 8004754:	d8c03217 	ldw	r3,200(sp)
 8004758:	20800044 	addi	r2,r4,1
 800475c:	1885883a 	add	r2,r3,r2
 8004760:	d8802b15 	stw	r2,172(sp)
 8004764:	103dbf0e 	bge	r2,zero,8003e64 <__alt_data_end+0xfc003e64>
 8004768:	0005883a 	mov	r2,zero
 800476c:	003dbd06 	br	8003e64 <__alt_data_end+0xfc003e64>
 8004770:	2000201e 	bne	r4,zero,80047f4 <___vfprintf_internal_r+0x222c>
 8004774:	9480004c 	andi	r18,r18,1
 8004778:	90001e1e 	bne	r18,zero,80047f4 <___vfprintf_internal_r+0x222c>
 800477c:	00800044 	movi	r2,1
 8004780:	d8802b15 	stw	r2,172(sp)
 8004784:	003db706 	br	8003e64 <__alt_data_end+0xfc003e64>
 8004788:	00800b44 	movi	r2,45
 800478c:	05adc83a 	sub	r22,zero,r22
 8004790:	d8802305 	stb	r2,140(sp)
 8004794:	003f3f06 	br	8004494 <__alt_data_end+0xfc004494>
 8004798:	0005883a 	mov	r2,zero
 800479c:	003f5206 	br	80044e8 <__alt_data_end+0xfc0044e8>
 80047a0:	90a4703a 	and	r18,r18,r2
 80047a4:	903f4e26 	beq	r18,zero,80044e0 <__alt_data_end+0xfc0044e0>
 80047a8:	003f4a06 	br	80044d4 <__alt_data_end+0xfc0044d4>
 80047ac:	00800084 	movi	r2,2
 80047b0:	10c5c83a 	sub	r2,r2,r3
 80047b4:	003f8406 	br	80045c8 <__alt_data_end+0xfc0045c8>
 80047b8:	d9402e17 	ldw	r5,184(sp)
 80047bc:	d9002e17 	ldw	r4,184(sp)
 80047c0:	ac400043 	ldbu	r17,1(r21)
 80047c4:	29400017 	ldw	r5,0(r5)
 80047c8:	20800104 	addi	r2,r4,4
 80047cc:	d8802e15 	stw	r2,184(sp)
 80047d0:	d9402a15 	stw	r5,168(sp)
 80047d4:	182b883a 	mov	r21,r3
 80047d8:	283e7b0e 	bge	r5,zero,80041c8 <__alt_data_end+0xfc0041c8>
 80047dc:	8c403fcc 	andi	r17,r17,255
 80047e0:	017fffc4 	movi	r5,-1
 80047e4:	8c40201c 	xori	r17,r17,128
 80047e8:	d9402a15 	stw	r5,168(sp)
 80047ec:	8c7fe004 	addi	r17,r17,-128
 80047f0:	0037d706 	br	8002750 <__alt_data_end+0xfc002750>
 80047f4:	d8c02a17 	ldw	r3,168(sp)
 80047f8:	18c00084 	addi	r3,r3,2
 80047fc:	d8c02b15 	stw	r3,172(sp)
 8004800:	1805883a 	mov	r2,r3
 8004804:	183d970e 	bge	r3,zero,8003e64 <__alt_data_end+0xfc003e64>
 8004808:	003fd706 	br	8004768 <__alt_data_end+0xfc004768>
 800480c:	0005883a 	mov	r2,zero
 8004810:	003f8f06 	br	8004650 <__alt_data_end+0xfc004650>
 8004814:	9080004c 	andi	r2,r18,1
 8004818:	103f821e 	bne	r2,zero,8004624 <__alt_data_end+0xfc004624>
 800481c:	d8802117 	ldw	r2,132(sp)
 8004820:	1405c83a 	sub	r2,r2,r16
 8004824:	d8803315 	stw	r2,204(sp)
 8004828:	b47ef426 	beq	r22,r17,80043fc <__alt_data_end+0xfc0043fc>
 800482c:	dd802617 	ldw	r22,152(sp)
 8004830:	003f1206 	br	800447c <__alt_data_end+0xfc00447c>
 8004834:	d8c02b03 	ldbu	r3,172(sp)
 8004838:	d8c02785 	stb	r3,158(sp)
 800483c:	0038df06 	br	8002bbc <__alt_data_end+0xfc002bbc>
 8004840:	d8c02b03 	ldbu	r3,172(sp)
 8004844:	d8c02785 	stb	r3,158(sp)
 8004848:	0038aa06 	br	8002af4 <__alt_data_end+0xfc002af4>
 800484c:	d8c02b03 	ldbu	r3,172(sp)
 8004850:	d8c02785 	stb	r3,158(sp)
 8004854:	003a4306 	br	8003164 <__alt_data_end+0xfc003164>
 8004858:	d8c02b03 	ldbu	r3,172(sp)
 800485c:	d8c02785 	stb	r3,158(sp)
 8004860:	003af506 	br	8003438 <__alt_data_end+0xfc003438>
 8004864:	0005883a 	mov	r2,zero
 8004868:	003d7b06 	br	8003e58 <__alt_data_end+0xfc003e58>
 800486c:	d8802344 	addi	r2,sp,141
 8004870:	003f1006 	br	80044b4 <__alt_data_end+0xfc0044b4>
 8004874:	d8c02b03 	ldbu	r3,172(sp)
 8004878:	d8c02785 	stb	r3,158(sp)
 800487c:	0038fd06 	br	8002c74 <__alt_data_end+0xfc002c74>
 8004880:	d8c02b03 	ldbu	r3,172(sp)
 8004884:	d8c02785 	stb	r3,158(sp)
 8004888:	003a9706 	br	80032e8 <__alt_data_end+0xfc0032e8>
 800488c:	d8c02b03 	ldbu	r3,172(sp)
 8004890:	d8c02785 	stb	r3,158(sp)
 8004894:	003a1806 	br	80030f8 <__alt_data_end+0xfc0030f8>
 8004898:	d8c02b03 	ldbu	r3,172(sp)
 800489c:	d8c02785 	stb	r3,158(sp)
 80048a0:	003abe06 	br	800339c <__alt_data_end+0xfc00339c>

080048a4 <__vfprintf_internal>:
 80048a4:	00820074 	movhi	r2,2049
 80048a8:	10903604 	addi	r2,r2,16600
 80048ac:	300f883a 	mov	r7,r6
 80048b0:	280d883a 	mov	r6,r5
 80048b4:	200b883a 	mov	r5,r4
 80048b8:	11000017 	ldw	r4,0(r2)
 80048bc:	80025c81 	jmpi	80025c8 <___vfprintf_internal_r>

080048c0 <__sbprintf>:
 80048c0:	2880030b 	ldhu	r2,12(r5)
 80048c4:	2ac01917 	ldw	r11,100(r5)
 80048c8:	2a80038b 	ldhu	r10,14(r5)
 80048cc:	2a400717 	ldw	r9,28(r5)
 80048d0:	2a000917 	ldw	r8,36(r5)
 80048d4:	defee204 	addi	sp,sp,-1144
 80048d8:	00c10004 	movi	r3,1024
 80048dc:	dc011a15 	stw	r16,1128(sp)
 80048e0:	10bfff4c 	andi	r2,r2,65533
 80048e4:	2821883a 	mov	r16,r5
 80048e8:	d8cb883a 	add	r5,sp,r3
 80048ec:	dc811c15 	stw	r18,1136(sp)
 80048f0:	dc411b15 	stw	r17,1132(sp)
 80048f4:	dfc11d15 	stw	ra,1140(sp)
 80048f8:	2025883a 	mov	r18,r4
 80048fc:	d881030d 	sth	r2,1036(sp)
 8004900:	dac11915 	stw	r11,1124(sp)
 8004904:	da81038d 	sth	r10,1038(sp)
 8004908:	da410715 	stw	r9,1052(sp)
 800490c:	da010915 	stw	r8,1060(sp)
 8004910:	dec10015 	stw	sp,1024(sp)
 8004914:	dec10415 	stw	sp,1040(sp)
 8004918:	d8c10215 	stw	r3,1032(sp)
 800491c:	d8c10515 	stw	r3,1044(sp)
 8004920:	d8010615 	stw	zero,1048(sp)
 8004924:	80025c80 	call	80025c8 <___vfprintf_internal_r>
 8004928:	1023883a 	mov	r17,r2
 800492c:	10000416 	blt	r2,zero,8004940 <__sbprintf+0x80>
 8004930:	d9410004 	addi	r5,sp,1024
 8004934:	9009883a 	mov	r4,r18
 8004938:	800659c0 	call	800659c <_fflush_r>
 800493c:	10000d1e 	bne	r2,zero,8004974 <__sbprintf+0xb4>
 8004940:	d881030b 	ldhu	r2,1036(sp)
 8004944:	1080100c 	andi	r2,r2,64
 8004948:	10000326 	beq	r2,zero,8004958 <__sbprintf+0x98>
 800494c:	8080030b 	ldhu	r2,12(r16)
 8004950:	10801014 	ori	r2,r2,64
 8004954:	8080030d 	sth	r2,12(r16)
 8004958:	8805883a 	mov	r2,r17
 800495c:	dfc11d17 	ldw	ra,1140(sp)
 8004960:	dc811c17 	ldw	r18,1136(sp)
 8004964:	dc411b17 	ldw	r17,1132(sp)
 8004968:	dc011a17 	ldw	r16,1128(sp)
 800496c:	dec11e04 	addi	sp,sp,1144
 8004970:	f800283a 	ret
 8004974:	047fffc4 	movi	r17,-1
 8004978:	003ff106 	br	8004940 <__alt_data_end+0xfc004940>

0800497c <__swsetup_r>:
 800497c:	00820074 	movhi	r2,2049
 8004980:	defffd04 	addi	sp,sp,-12
 8004984:	10903604 	addi	r2,r2,16600
 8004988:	dc400115 	stw	r17,4(sp)
 800498c:	2023883a 	mov	r17,r4
 8004990:	11000017 	ldw	r4,0(r2)
 8004994:	dc000015 	stw	r16,0(sp)
 8004998:	dfc00215 	stw	ra,8(sp)
 800499c:	2821883a 	mov	r16,r5
 80049a0:	20000226 	beq	r4,zero,80049ac <__swsetup_r+0x30>
 80049a4:	20800e17 	ldw	r2,56(r4)
 80049a8:	10003126 	beq	r2,zero,8004a70 <__swsetup_r+0xf4>
 80049ac:	8080030b 	ldhu	r2,12(r16)
 80049b0:	10c0020c 	andi	r3,r2,8
 80049b4:	1009883a 	mov	r4,r2
 80049b8:	18000f26 	beq	r3,zero,80049f8 <__swsetup_r+0x7c>
 80049bc:	80c00417 	ldw	r3,16(r16)
 80049c0:	18001526 	beq	r3,zero,8004a18 <__swsetup_r+0x9c>
 80049c4:	1100004c 	andi	r4,r2,1
 80049c8:	20001c1e 	bne	r4,zero,8004a3c <__swsetup_r+0xc0>
 80049cc:	1080008c 	andi	r2,r2,2
 80049d0:	1000291e 	bne	r2,zero,8004a78 <__swsetup_r+0xfc>
 80049d4:	80800517 	ldw	r2,20(r16)
 80049d8:	80800215 	stw	r2,8(r16)
 80049dc:	18001c26 	beq	r3,zero,8004a50 <__swsetup_r+0xd4>
 80049e0:	0005883a 	mov	r2,zero
 80049e4:	dfc00217 	ldw	ra,8(sp)
 80049e8:	dc400117 	ldw	r17,4(sp)
 80049ec:	dc000017 	ldw	r16,0(sp)
 80049f0:	dec00304 	addi	sp,sp,12
 80049f4:	f800283a 	ret
 80049f8:	2080040c 	andi	r2,r4,16
 80049fc:	10002e26 	beq	r2,zero,8004ab8 <__swsetup_r+0x13c>
 8004a00:	2080010c 	andi	r2,r4,4
 8004a04:	10001e1e 	bne	r2,zero,8004a80 <__swsetup_r+0x104>
 8004a08:	80c00417 	ldw	r3,16(r16)
 8004a0c:	20800214 	ori	r2,r4,8
 8004a10:	8080030d 	sth	r2,12(r16)
 8004a14:	183feb1e 	bne	r3,zero,80049c4 <__alt_data_end+0xfc0049c4>
 8004a18:	1100a00c 	andi	r4,r2,640
 8004a1c:	01408004 	movi	r5,512
 8004a20:	217fe826 	beq	r4,r5,80049c4 <__alt_data_end+0xfc0049c4>
 8004a24:	800b883a 	mov	r5,r16
 8004a28:	8809883a 	mov	r4,r17
 8004a2c:	80075380 	call	8007538 <__smakebuf_r>
 8004a30:	8080030b 	ldhu	r2,12(r16)
 8004a34:	80c00417 	ldw	r3,16(r16)
 8004a38:	003fe206 	br	80049c4 <__alt_data_end+0xfc0049c4>
 8004a3c:	80800517 	ldw	r2,20(r16)
 8004a40:	80000215 	stw	zero,8(r16)
 8004a44:	0085c83a 	sub	r2,zero,r2
 8004a48:	80800615 	stw	r2,24(r16)
 8004a4c:	183fe41e 	bne	r3,zero,80049e0 <__alt_data_end+0xfc0049e0>
 8004a50:	80c0030b 	ldhu	r3,12(r16)
 8004a54:	0005883a 	mov	r2,zero
 8004a58:	1900200c 	andi	r4,r3,128
 8004a5c:	203fe126 	beq	r4,zero,80049e4 <__alt_data_end+0xfc0049e4>
 8004a60:	18c01014 	ori	r3,r3,64
 8004a64:	80c0030d 	sth	r3,12(r16)
 8004a68:	00bfffc4 	movi	r2,-1
 8004a6c:	003fdd06 	br	80049e4 <__alt_data_end+0xfc0049e4>
 8004a70:	80069880 	call	8006988 <__sinit>
 8004a74:	003fcd06 	br	80049ac <__alt_data_end+0xfc0049ac>
 8004a78:	0005883a 	mov	r2,zero
 8004a7c:	003fd606 	br	80049d8 <__alt_data_end+0xfc0049d8>
 8004a80:	81400c17 	ldw	r5,48(r16)
 8004a84:	28000626 	beq	r5,zero,8004aa0 <__swsetup_r+0x124>
 8004a88:	80801004 	addi	r2,r16,64
 8004a8c:	28800326 	beq	r5,r2,8004a9c <__swsetup_r+0x120>
 8004a90:	8809883a 	mov	r4,r17
 8004a94:	8006afc0 	call	8006afc <_free_r>
 8004a98:	8100030b 	ldhu	r4,12(r16)
 8004a9c:	80000c15 	stw	zero,48(r16)
 8004aa0:	80c00417 	ldw	r3,16(r16)
 8004aa4:	00bff6c4 	movi	r2,-37
 8004aa8:	1108703a 	and	r4,r2,r4
 8004aac:	80000115 	stw	zero,4(r16)
 8004ab0:	80c00015 	stw	r3,0(r16)
 8004ab4:	003fd506 	br	8004a0c <__alt_data_end+0xfc004a0c>
 8004ab8:	00800244 	movi	r2,9
 8004abc:	88800015 	stw	r2,0(r17)
 8004ac0:	20801014 	ori	r2,r4,64
 8004ac4:	8080030d 	sth	r2,12(r16)
 8004ac8:	00bfffc4 	movi	r2,-1
 8004acc:	003fc506 	br	80049e4 <__alt_data_end+0xfc0049e4>

08004ad0 <quorem>:
 8004ad0:	defff204 	addi	sp,sp,-56
 8004ad4:	ddc00b15 	stw	r23,44(sp)
 8004ad8:	20800417 	ldw	r2,16(r4)
 8004adc:	2dc00417 	ldw	r23,16(r5)
 8004ae0:	dfc00d15 	stw	ra,52(sp)
 8004ae4:	df000c15 	stw	fp,48(sp)
 8004ae8:	dd800a15 	stw	r22,40(sp)
 8004aec:	dd400915 	stw	r21,36(sp)
 8004af0:	dd000815 	stw	r20,32(sp)
 8004af4:	dcc00715 	stw	r19,28(sp)
 8004af8:	dc800615 	stw	r18,24(sp)
 8004afc:	dc400515 	stw	r17,20(sp)
 8004b00:	dc000415 	stw	r16,16(sp)
 8004b04:	15c07a16 	blt	r2,r23,8004cf0 <quorem+0x220>
 8004b08:	bdffffc4 	addi	r23,r23,-1
 8004b0c:	bde9883a 	add	r20,r23,r23
 8004b10:	28c00504 	addi	r3,r5,20
 8004b14:	a529883a 	add	r20,r20,r20
 8004b18:	1d39883a 	add	fp,r3,r20
 8004b1c:	24c00504 	addi	r19,r4,20
 8004b20:	d9400215 	stw	r5,8(sp)
 8004b24:	9d29883a 	add	r20,r19,r20
 8004b28:	e1400017 	ldw	r5,0(fp)
 8004b2c:	d9000015 	stw	r4,0(sp)
 8004b30:	a1000017 	ldw	r4,0(r20)
 8004b34:	29400044 	addi	r5,r5,1
 8004b38:	d8c00115 	stw	r3,4(sp)
 8004b3c:	dd000315 	stw	r20,12(sp)
 8004b40:	800c9a80 	call	800c9a8 <__udivsi3>
 8004b44:	1025883a 	mov	r18,r2
 8004b48:	10003026 	beq	r2,zero,8004c0c <quorem+0x13c>
 8004b4c:	dc400117 	ldw	r17,4(sp)
 8004b50:	9829883a 	mov	r20,r19
 8004b54:	002d883a 	mov	r22,zero
 8004b58:	0021883a 	mov	r16,zero
 8004b5c:	8d400017 	ldw	r21,0(r17)
 8004b60:	900b883a 	mov	r5,r18
 8004b64:	8c400104 	addi	r17,r17,4
 8004b68:	a93fffcc 	andi	r4,r21,65535
 8004b6c:	800ca640 	call	800ca64 <__mulsi3>
 8004b70:	a808d43a 	srli	r4,r21,16
 8004b74:	900b883a 	mov	r5,r18
 8004b78:	15ad883a 	add	r22,r2,r22
 8004b7c:	800ca640 	call	800ca64 <__mulsi3>
 8004b80:	a1000017 	ldw	r4,0(r20)
 8004b84:	b00cd43a 	srli	r6,r22,16
 8004b88:	b0ffffcc 	andi	r3,r22,65535
 8004b8c:	217fffcc 	andi	r5,r4,65535
 8004b90:	2c21883a 	add	r16,r5,r16
 8004b94:	80c7c83a 	sub	r3,r16,r3
 8004b98:	2008d43a 	srli	r4,r4,16
 8004b9c:	1185883a 	add	r2,r2,r6
 8004ba0:	1821d43a 	srai	r16,r3,16
 8004ba4:	117fffcc 	andi	r5,r2,65535
 8004ba8:	2149c83a 	sub	r4,r4,r5
 8004bac:	2421883a 	add	r16,r4,r16
 8004bb0:	8008943a 	slli	r4,r16,16
 8004bb4:	18ffffcc 	andi	r3,r3,65535
 8004bb8:	102cd43a 	srli	r22,r2,16
 8004bbc:	20c8b03a 	or	r4,r4,r3
 8004bc0:	a1000015 	stw	r4,0(r20)
 8004bc4:	8021d43a 	srai	r16,r16,16
 8004bc8:	a5000104 	addi	r20,r20,4
 8004bcc:	e47fe32e 	bgeu	fp,r17,8004b5c <__alt_data_end+0xfc004b5c>
 8004bd0:	d8c00317 	ldw	r3,12(sp)
 8004bd4:	18800017 	ldw	r2,0(r3)
 8004bd8:	10000c1e 	bne	r2,zero,8004c0c <quorem+0x13c>
 8004bdc:	18bfff04 	addi	r2,r3,-4
 8004be0:	9880082e 	bgeu	r19,r2,8004c04 <quorem+0x134>
 8004be4:	18ffff17 	ldw	r3,-4(r3)
 8004be8:	18000326 	beq	r3,zero,8004bf8 <quorem+0x128>
 8004bec:	00000506 	br	8004c04 <quorem+0x134>
 8004bf0:	10c00017 	ldw	r3,0(r2)
 8004bf4:	1800031e 	bne	r3,zero,8004c04 <quorem+0x134>
 8004bf8:	10bfff04 	addi	r2,r2,-4
 8004bfc:	bdffffc4 	addi	r23,r23,-1
 8004c00:	98bffb36 	bltu	r19,r2,8004bf0 <__alt_data_end+0xfc004bf0>
 8004c04:	d8c00017 	ldw	r3,0(sp)
 8004c08:	1dc00415 	stw	r23,16(r3)
 8004c0c:	d9400217 	ldw	r5,8(sp)
 8004c10:	d9000017 	ldw	r4,0(sp)
 8004c14:	8008d340 	call	8008d34 <__mcmp>
 8004c18:	10002816 	blt	r2,zero,8004cbc <quorem+0x1ec>
 8004c1c:	dc400117 	ldw	r17,4(sp)
 8004c20:	94800044 	addi	r18,r18,1
 8004c24:	980d883a 	mov	r6,r19
 8004c28:	0007883a 	mov	r3,zero
 8004c2c:	31000017 	ldw	r4,0(r6)
 8004c30:	89400017 	ldw	r5,0(r17)
 8004c34:	31800104 	addi	r6,r6,4
 8004c38:	20bfffcc 	andi	r2,r4,65535
 8004c3c:	10c7883a 	add	r3,r2,r3
 8004c40:	28bfffcc 	andi	r2,r5,65535
 8004c44:	1885c83a 	sub	r2,r3,r2
 8004c48:	280ad43a 	srli	r5,r5,16
 8004c4c:	2008d43a 	srli	r4,r4,16
 8004c50:	1007d43a 	srai	r3,r2,16
 8004c54:	10bfffcc 	andi	r2,r2,65535
 8004c58:	2149c83a 	sub	r4,r4,r5
 8004c5c:	20c9883a 	add	r4,r4,r3
 8004c60:	200a943a 	slli	r5,r4,16
 8004c64:	8c400104 	addi	r17,r17,4
 8004c68:	2007d43a 	srai	r3,r4,16
 8004c6c:	2884b03a 	or	r2,r5,r2
 8004c70:	30bfff15 	stw	r2,-4(r6)
 8004c74:	e47fed2e 	bgeu	fp,r17,8004c2c <__alt_data_end+0xfc004c2c>
 8004c78:	bdc5883a 	add	r2,r23,r23
 8004c7c:	1085883a 	add	r2,r2,r2
 8004c80:	9887883a 	add	r3,r19,r2
 8004c84:	18800017 	ldw	r2,0(r3)
 8004c88:	10000c1e 	bne	r2,zero,8004cbc <quorem+0x1ec>
 8004c8c:	18bfff04 	addi	r2,r3,-4
 8004c90:	9880082e 	bgeu	r19,r2,8004cb4 <quorem+0x1e4>
 8004c94:	18ffff17 	ldw	r3,-4(r3)
 8004c98:	18000326 	beq	r3,zero,8004ca8 <quorem+0x1d8>
 8004c9c:	00000506 	br	8004cb4 <quorem+0x1e4>
 8004ca0:	10c00017 	ldw	r3,0(r2)
 8004ca4:	1800031e 	bne	r3,zero,8004cb4 <quorem+0x1e4>
 8004ca8:	10bfff04 	addi	r2,r2,-4
 8004cac:	bdffffc4 	addi	r23,r23,-1
 8004cb0:	98bffb36 	bltu	r19,r2,8004ca0 <__alt_data_end+0xfc004ca0>
 8004cb4:	d8c00017 	ldw	r3,0(sp)
 8004cb8:	1dc00415 	stw	r23,16(r3)
 8004cbc:	9005883a 	mov	r2,r18
 8004cc0:	dfc00d17 	ldw	ra,52(sp)
 8004cc4:	df000c17 	ldw	fp,48(sp)
 8004cc8:	ddc00b17 	ldw	r23,44(sp)
 8004ccc:	dd800a17 	ldw	r22,40(sp)
 8004cd0:	dd400917 	ldw	r21,36(sp)
 8004cd4:	dd000817 	ldw	r20,32(sp)
 8004cd8:	dcc00717 	ldw	r19,28(sp)
 8004cdc:	dc800617 	ldw	r18,24(sp)
 8004ce0:	dc400517 	ldw	r17,20(sp)
 8004ce4:	dc000417 	ldw	r16,16(sp)
 8004ce8:	dec00e04 	addi	sp,sp,56
 8004cec:	f800283a 	ret
 8004cf0:	0005883a 	mov	r2,zero
 8004cf4:	003ff206 	br	8004cc0 <__alt_data_end+0xfc004cc0>

08004cf8 <_dtoa_r>:
 8004cf8:	20801017 	ldw	r2,64(r4)
 8004cfc:	deffde04 	addi	sp,sp,-136
 8004d00:	df002015 	stw	fp,128(sp)
 8004d04:	dcc01b15 	stw	r19,108(sp)
 8004d08:	dc801a15 	stw	r18,104(sp)
 8004d0c:	dc401915 	stw	r17,100(sp)
 8004d10:	dc001815 	stw	r16,96(sp)
 8004d14:	dfc02115 	stw	ra,132(sp)
 8004d18:	ddc01f15 	stw	r23,124(sp)
 8004d1c:	dd801e15 	stw	r22,120(sp)
 8004d20:	dd401d15 	stw	r21,116(sp)
 8004d24:	dd001c15 	stw	r20,112(sp)
 8004d28:	d9c00315 	stw	r7,12(sp)
 8004d2c:	2039883a 	mov	fp,r4
 8004d30:	3023883a 	mov	r17,r6
 8004d34:	2825883a 	mov	r18,r5
 8004d38:	dc002417 	ldw	r16,144(sp)
 8004d3c:	3027883a 	mov	r19,r6
 8004d40:	10000826 	beq	r2,zero,8004d64 <_dtoa_r+0x6c>
 8004d44:	21801117 	ldw	r6,68(r4)
 8004d48:	00c00044 	movi	r3,1
 8004d4c:	100b883a 	mov	r5,r2
 8004d50:	1986983a 	sll	r3,r3,r6
 8004d54:	11800115 	stw	r6,4(r2)
 8004d58:	10c00215 	stw	r3,8(r2)
 8004d5c:	80084580 	call	8008458 <_Bfree>
 8004d60:	e0001015 	stw	zero,64(fp)
 8004d64:	88002e16 	blt	r17,zero,8004e20 <_dtoa_r+0x128>
 8004d68:	80000015 	stw	zero,0(r16)
 8004d6c:	889ffc2c 	andhi	r2,r17,32752
 8004d70:	00dffc34 	movhi	r3,32752
 8004d74:	10c01c26 	beq	r2,r3,8004de8 <_dtoa_r+0xf0>
 8004d78:	000d883a 	mov	r6,zero
 8004d7c:	000f883a 	mov	r7,zero
 8004d80:	9009883a 	mov	r4,r18
 8004d84:	980b883a 	mov	r5,r19
 8004d88:	800dd080 	call	800dd08 <__eqdf2>
 8004d8c:	10002b1e 	bne	r2,zero,8004e3c <_dtoa_r+0x144>
 8004d90:	d9c02317 	ldw	r7,140(sp)
 8004d94:	00800044 	movi	r2,1
 8004d98:	38800015 	stw	r2,0(r7)
 8004d9c:	d8802517 	ldw	r2,148(sp)
 8004da0:	10019e26 	beq	r2,zero,800541c <_dtoa_r+0x724>
 8004da4:	d8c02517 	ldw	r3,148(sp)
 8004da8:	00820074 	movhi	r2,2049
 8004dac:	1088db44 	addi	r2,r2,9069
 8004db0:	18800015 	stw	r2,0(r3)
 8004db4:	10bfffc4 	addi	r2,r2,-1
 8004db8:	dfc02117 	ldw	ra,132(sp)
 8004dbc:	df002017 	ldw	fp,128(sp)
 8004dc0:	ddc01f17 	ldw	r23,124(sp)
 8004dc4:	dd801e17 	ldw	r22,120(sp)
 8004dc8:	dd401d17 	ldw	r21,116(sp)
 8004dcc:	dd001c17 	ldw	r20,112(sp)
 8004dd0:	dcc01b17 	ldw	r19,108(sp)
 8004dd4:	dc801a17 	ldw	r18,104(sp)
 8004dd8:	dc401917 	ldw	r17,100(sp)
 8004ddc:	dc001817 	ldw	r16,96(sp)
 8004de0:	dec02204 	addi	sp,sp,136
 8004de4:	f800283a 	ret
 8004de8:	d8c02317 	ldw	r3,140(sp)
 8004dec:	0089c3c4 	movi	r2,9999
 8004df0:	18800015 	stw	r2,0(r3)
 8004df4:	90017726 	beq	r18,zero,80053d4 <_dtoa_r+0x6dc>
 8004df8:	00820074 	movhi	r2,2049
 8004dfc:	1088e704 	addi	r2,r2,9116
 8004e00:	d9002517 	ldw	r4,148(sp)
 8004e04:	203fec26 	beq	r4,zero,8004db8 <__alt_data_end+0xfc004db8>
 8004e08:	10c000c7 	ldb	r3,3(r2)
 8004e0c:	1801781e 	bne	r3,zero,80053f0 <_dtoa_r+0x6f8>
 8004e10:	10c000c4 	addi	r3,r2,3
 8004e14:	d9802517 	ldw	r6,148(sp)
 8004e18:	30c00015 	stw	r3,0(r6)
 8004e1c:	003fe606 	br	8004db8 <__alt_data_end+0xfc004db8>
 8004e20:	04e00034 	movhi	r19,32768
 8004e24:	9cffffc4 	addi	r19,r19,-1
 8004e28:	00800044 	movi	r2,1
 8004e2c:	8ce6703a 	and	r19,r17,r19
 8004e30:	80800015 	stw	r2,0(r16)
 8004e34:	9823883a 	mov	r17,r19
 8004e38:	003fcc06 	br	8004d6c <__alt_data_end+0xfc004d6c>
 8004e3c:	d8800204 	addi	r2,sp,8
 8004e40:	d8800015 	stw	r2,0(sp)
 8004e44:	d9c00104 	addi	r7,sp,4
 8004e48:	900b883a 	mov	r5,r18
 8004e4c:	980d883a 	mov	r6,r19
 8004e50:	e009883a 	mov	r4,fp
 8004e54:	8820d53a 	srli	r16,r17,20
 8004e58:	80091000 	call	8009100 <__d2b>
 8004e5c:	d8800915 	stw	r2,36(sp)
 8004e60:	8001651e 	bne	r16,zero,80053f8 <_dtoa_r+0x700>
 8004e64:	dd800217 	ldw	r22,8(sp)
 8004e68:	dc000117 	ldw	r16,4(sp)
 8004e6c:	00800804 	movi	r2,32
 8004e70:	b421883a 	add	r16,r22,r16
 8004e74:	80c10c84 	addi	r3,r16,1074
 8004e78:	10c2d10e 	bge	r2,r3,80059c0 <_dtoa_r+0xcc8>
 8004e7c:	00801004 	movi	r2,64
 8004e80:	81010484 	addi	r4,r16,1042
 8004e84:	10c7c83a 	sub	r3,r2,r3
 8004e88:	9108d83a 	srl	r4,r18,r4
 8004e8c:	88e2983a 	sll	r17,r17,r3
 8004e90:	2448b03a 	or	r4,r4,r17
 8004e94:	800f2240 	call	800f224 <__floatunsidf>
 8004e98:	017f8434 	movhi	r5,65040
 8004e9c:	01800044 	movi	r6,1
 8004ea0:	1009883a 	mov	r4,r2
 8004ea4:	194b883a 	add	r5,r3,r5
 8004ea8:	843fffc4 	addi	r16,r16,-1
 8004eac:	d9801115 	stw	r6,68(sp)
 8004eb0:	000d883a 	mov	r6,zero
 8004eb4:	01cffe34 	movhi	r7,16376
 8004eb8:	800e7cc0 	call	800e7cc <__subdf3>
 8004ebc:	0198dbf4 	movhi	r6,25455
 8004ec0:	01cff4f4 	movhi	r7,16339
 8004ec4:	3190d844 	addi	r6,r6,17249
 8004ec8:	39e1e9c4 	addi	r7,r7,-30809
 8004ecc:	1009883a 	mov	r4,r2
 8004ed0:	180b883a 	mov	r5,r3
 8004ed4:	800df600 	call	800df60 <__muldf3>
 8004ed8:	01a2d874 	movhi	r6,35681
 8004edc:	01cff1f4 	movhi	r7,16327
 8004ee0:	31b22cc4 	addi	r6,r6,-14157
 8004ee4:	39e28a04 	addi	r7,r7,-30168
 8004ee8:	180b883a 	mov	r5,r3
 8004eec:	1009883a 	mov	r4,r2
 8004ef0:	800ca8c0 	call	800ca8c <__adddf3>
 8004ef4:	8009883a 	mov	r4,r16
 8004ef8:	1029883a 	mov	r20,r2
 8004efc:	1823883a 	mov	r17,r3
 8004f00:	800f1480 	call	800f148 <__floatsidf>
 8004f04:	019427f4 	movhi	r6,20639
 8004f08:	01cff4f4 	movhi	r7,16339
 8004f0c:	319e7ec4 	addi	r6,r6,31227
 8004f10:	39d104c4 	addi	r7,r7,17427
 8004f14:	1009883a 	mov	r4,r2
 8004f18:	180b883a 	mov	r5,r3
 8004f1c:	800df600 	call	800df60 <__muldf3>
 8004f20:	100d883a 	mov	r6,r2
 8004f24:	180f883a 	mov	r7,r3
 8004f28:	a009883a 	mov	r4,r20
 8004f2c:	880b883a 	mov	r5,r17
 8004f30:	800ca8c0 	call	800ca8c <__adddf3>
 8004f34:	1009883a 	mov	r4,r2
 8004f38:	180b883a 	mov	r5,r3
 8004f3c:	1029883a 	mov	r20,r2
 8004f40:	1823883a 	mov	r17,r3
 8004f44:	800f0c80 	call	800f0c8 <__fixdfsi>
 8004f48:	000d883a 	mov	r6,zero
 8004f4c:	000f883a 	mov	r7,zero
 8004f50:	a009883a 	mov	r4,r20
 8004f54:	880b883a 	mov	r5,r17
 8004f58:	d8800515 	stw	r2,20(sp)
 8004f5c:	800de6c0 	call	800de6c <__ledf2>
 8004f60:	10028716 	blt	r2,zero,8005980 <_dtoa_r+0xc88>
 8004f64:	d8c00517 	ldw	r3,20(sp)
 8004f68:	00800584 	movi	r2,22
 8004f6c:	10c27536 	bltu	r2,r3,8005944 <_dtoa_r+0xc4c>
 8004f70:	180490fa 	slli	r2,r3,3
 8004f74:	00c20074 	movhi	r3,2049
 8004f78:	18c90304 	addi	r3,r3,9228
 8004f7c:	1885883a 	add	r2,r3,r2
 8004f80:	11000017 	ldw	r4,0(r2)
 8004f84:	11400117 	ldw	r5,4(r2)
 8004f88:	900d883a 	mov	r6,r18
 8004f8c:	980f883a 	mov	r7,r19
 8004f90:	800dd900 	call	800dd90 <__gedf2>
 8004f94:	00828d0e 	bge	zero,r2,80059cc <_dtoa_r+0xcd4>
 8004f98:	d9000517 	ldw	r4,20(sp)
 8004f9c:	d8000e15 	stw	zero,56(sp)
 8004fa0:	213fffc4 	addi	r4,r4,-1
 8004fa4:	d9000515 	stw	r4,20(sp)
 8004fa8:	b42dc83a 	sub	r22,r22,r16
 8004fac:	b5bfffc4 	addi	r22,r22,-1
 8004fb0:	b0026f16 	blt	r22,zero,8005970 <_dtoa_r+0xc78>
 8004fb4:	d8000815 	stw	zero,32(sp)
 8004fb8:	d9c00517 	ldw	r7,20(sp)
 8004fbc:	38026416 	blt	r7,zero,8005950 <_dtoa_r+0xc58>
 8004fc0:	b1ed883a 	add	r22,r22,r7
 8004fc4:	d9c00d15 	stw	r7,52(sp)
 8004fc8:	d8000a15 	stw	zero,40(sp)
 8004fcc:	d9800317 	ldw	r6,12(sp)
 8004fd0:	00800244 	movi	r2,9
 8004fd4:	11811436 	bltu	r2,r6,8005428 <_dtoa_r+0x730>
 8004fd8:	00800144 	movi	r2,5
 8004fdc:	1184e10e 	bge	r2,r6,8006364 <_dtoa_r+0x166c>
 8004fe0:	31bfff04 	addi	r6,r6,-4
 8004fe4:	d9800315 	stw	r6,12(sp)
 8004fe8:	0023883a 	mov	r17,zero
 8004fec:	d9800317 	ldw	r6,12(sp)
 8004ff0:	008000c4 	movi	r2,3
 8004ff4:	30836726 	beq	r6,r2,8005d94 <_dtoa_r+0x109c>
 8004ff8:	1183410e 	bge	r2,r6,8005d00 <_dtoa_r+0x1008>
 8004ffc:	d9c00317 	ldw	r7,12(sp)
 8005000:	00800104 	movi	r2,4
 8005004:	38827c26 	beq	r7,r2,80059f8 <_dtoa_r+0xd00>
 8005008:	00800144 	movi	r2,5
 800500c:	3884c41e 	bne	r7,r2,8006320 <_dtoa_r+0x1628>
 8005010:	00800044 	movi	r2,1
 8005014:	d8800b15 	stw	r2,44(sp)
 8005018:	d8c00517 	ldw	r3,20(sp)
 800501c:	d9002217 	ldw	r4,136(sp)
 8005020:	1907883a 	add	r3,r3,r4
 8005024:	19800044 	addi	r6,r3,1
 8005028:	d8c00c15 	stw	r3,48(sp)
 800502c:	d9800615 	stw	r6,24(sp)
 8005030:	0183a40e 	bge	zero,r6,8005ec4 <_dtoa_r+0x11cc>
 8005034:	d9800617 	ldw	r6,24(sp)
 8005038:	3021883a 	mov	r16,r6
 800503c:	e0001115 	stw	zero,68(fp)
 8005040:	008005c4 	movi	r2,23
 8005044:	1184c92e 	bgeu	r2,r6,800636c <_dtoa_r+0x1674>
 8005048:	00c00044 	movi	r3,1
 800504c:	00800104 	movi	r2,4
 8005050:	1085883a 	add	r2,r2,r2
 8005054:	11000504 	addi	r4,r2,20
 8005058:	180b883a 	mov	r5,r3
 800505c:	18c00044 	addi	r3,r3,1
 8005060:	313ffb2e 	bgeu	r6,r4,8005050 <__alt_data_end+0xfc005050>
 8005064:	e1401115 	stw	r5,68(fp)
 8005068:	e009883a 	mov	r4,fp
 800506c:	80083b00 	call	80083b0 <_Balloc>
 8005070:	d8800715 	stw	r2,28(sp)
 8005074:	e0801015 	stw	r2,64(fp)
 8005078:	00800384 	movi	r2,14
 800507c:	1400f736 	bltu	r2,r16,800545c <_dtoa_r+0x764>
 8005080:	8800f626 	beq	r17,zero,800545c <_dtoa_r+0x764>
 8005084:	d9c00517 	ldw	r7,20(sp)
 8005088:	01c39a0e 	bge	zero,r7,8005ef4 <_dtoa_r+0x11fc>
 800508c:	388003cc 	andi	r2,r7,15
 8005090:	100490fa 	slli	r2,r2,3
 8005094:	382bd13a 	srai	r21,r7,4
 8005098:	00c20074 	movhi	r3,2049
 800509c:	18c90304 	addi	r3,r3,9228
 80050a0:	1885883a 	add	r2,r3,r2
 80050a4:	a8c0040c 	andi	r3,r21,16
 80050a8:	12400017 	ldw	r9,0(r2)
 80050ac:	12000117 	ldw	r8,4(r2)
 80050b0:	18037926 	beq	r3,zero,8005e98 <_dtoa_r+0x11a0>
 80050b4:	00820074 	movhi	r2,2049
 80050b8:	1088f904 	addi	r2,r2,9188
 80050bc:	11800817 	ldw	r6,32(r2)
 80050c0:	11c00917 	ldw	r7,36(r2)
 80050c4:	9009883a 	mov	r4,r18
 80050c8:	980b883a 	mov	r5,r19
 80050cc:	da001715 	stw	r8,92(sp)
 80050d0:	da401615 	stw	r9,88(sp)
 80050d4:	800d3380 	call	800d338 <__divdf3>
 80050d8:	da001717 	ldw	r8,92(sp)
 80050dc:	da401617 	ldw	r9,88(sp)
 80050e0:	ad4003cc 	andi	r21,r21,15
 80050e4:	040000c4 	movi	r16,3
 80050e8:	1023883a 	mov	r17,r2
 80050ec:	1829883a 	mov	r20,r3
 80050f0:	a8001126 	beq	r21,zero,8005138 <_dtoa_r+0x440>
 80050f4:	05c20074 	movhi	r23,2049
 80050f8:	bdc8f904 	addi	r23,r23,9188
 80050fc:	4805883a 	mov	r2,r9
 8005100:	4007883a 	mov	r3,r8
 8005104:	a980004c 	andi	r6,r21,1
 8005108:	1009883a 	mov	r4,r2
 800510c:	a82bd07a 	srai	r21,r21,1
 8005110:	180b883a 	mov	r5,r3
 8005114:	30000426 	beq	r6,zero,8005128 <_dtoa_r+0x430>
 8005118:	b9800017 	ldw	r6,0(r23)
 800511c:	b9c00117 	ldw	r7,4(r23)
 8005120:	84000044 	addi	r16,r16,1
 8005124:	800df600 	call	800df60 <__muldf3>
 8005128:	bdc00204 	addi	r23,r23,8
 800512c:	a83ff51e 	bne	r21,zero,8005104 <__alt_data_end+0xfc005104>
 8005130:	1013883a 	mov	r9,r2
 8005134:	1811883a 	mov	r8,r3
 8005138:	480d883a 	mov	r6,r9
 800513c:	400f883a 	mov	r7,r8
 8005140:	8809883a 	mov	r4,r17
 8005144:	a00b883a 	mov	r5,r20
 8005148:	800d3380 	call	800d338 <__divdf3>
 800514c:	d8800f15 	stw	r2,60(sp)
 8005150:	d8c01015 	stw	r3,64(sp)
 8005154:	d8c00e17 	ldw	r3,56(sp)
 8005158:	18000626 	beq	r3,zero,8005174 <_dtoa_r+0x47c>
 800515c:	d9000f17 	ldw	r4,60(sp)
 8005160:	d9401017 	ldw	r5,64(sp)
 8005164:	000d883a 	mov	r6,zero
 8005168:	01cffc34 	movhi	r7,16368
 800516c:	800de6c0 	call	800de6c <__ledf2>
 8005170:	10040b16 	blt	r2,zero,80061a0 <_dtoa_r+0x14a8>
 8005174:	8009883a 	mov	r4,r16
 8005178:	800f1480 	call	800f148 <__floatsidf>
 800517c:	d9800f17 	ldw	r6,60(sp)
 8005180:	d9c01017 	ldw	r7,64(sp)
 8005184:	1009883a 	mov	r4,r2
 8005188:	180b883a 	mov	r5,r3
 800518c:	800df600 	call	800df60 <__muldf3>
 8005190:	000d883a 	mov	r6,zero
 8005194:	01d00734 	movhi	r7,16412
 8005198:	1009883a 	mov	r4,r2
 800519c:	180b883a 	mov	r5,r3
 80051a0:	800ca8c0 	call	800ca8c <__adddf3>
 80051a4:	1021883a 	mov	r16,r2
 80051a8:	d8800617 	ldw	r2,24(sp)
 80051ac:	047f3034 	movhi	r17,64704
 80051b0:	1c63883a 	add	r17,r3,r17
 80051b4:	10031826 	beq	r2,zero,8005e18 <_dtoa_r+0x1120>
 80051b8:	d8c00517 	ldw	r3,20(sp)
 80051bc:	db000617 	ldw	r12,24(sp)
 80051c0:	d8c01315 	stw	r3,76(sp)
 80051c4:	d9000b17 	ldw	r4,44(sp)
 80051c8:	20038f26 	beq	r4,zero,8006008 <_dtoa_r+0x1310>
 80051cc:	60bfffc4 	addi	r2,r12,-1
 80051d0:	100490fa 	slli	r2,r2,3
 80051d4:	00c20074 	movhi	r3,2049
 80051d8:	18c90304 	addi	r3,r3,9228
 80051dc:	1885883a 	add	r2,r3,r2
 80051e0:	11800017 	ldw	r6,0(r2)
 80051e4:	11c00117 	ldw	r7,4(r2)
 80051e8:	d8800717 	ldw	r2,28(sp)
 80051ec:	0009883a 	mov	r4,zero
 80051f0:	014ff834 	movhi	r5,16352
 80051f4:	db001615 	stw	r12,88(sp)
 80051f8:	15c00044 	addi	r23,r2,1
 80051fc:	800d3380 	call	800d338 <__divdf3>
 8005200:	800d883a 	mov	r6,r16
 8005204:	880f883a 	mov	r7,r17
 8005208:	1009883a 	mov	r4,r2
 800520c:	180b883a 	mov	r5,r3
 8005210:	800e7cc0 	call	800e7cc <__subdf3>
 8005214:	d9401017 	ldw	r5,64(sp)
 8005218:	d9000f17 	ldw	r4,60(sp)
 800521c:	102b883a 	mov	r21,r2
 8005220:	d8c01215 	stw	r3,72(sp)
 8005224:	800f0c80 	call	800f0c8 <__fixdfsi>
 8005228:	1009883a 	mov	r4,r2
 800522c:	1029883a 	mov	r20,r2
 8005230:	800f1480 	call	800f148 <__floatsidf>
 8005234:	d9000f17 	ldw	r4,60(sp)
 8005238:	d9401017 	ldw	r5,64(sp)
 800523c:	100d883a 	mov	r6,r2
 8005240:	180f883a 	mov	r7,r3
 8005244:	800e7cc0 	call	800e7cc <__subdf3>
 8005248:	1823883a 	mov	r17,r3
 800524c:	d8c00717 	ldw	r3,28(sp)
 8005250:	d9401217 	ldw	r5,72(sp)
 8005254:	a2000c04 	addi	r8,r20,48
 8005258:	1021883a 	mov	r16,r2
 800525c:	1a000005 	stb	r8,0(r3)
 8005260:	800d883a 	mov	r6,r16
 8005264:	880f883a 	mov	r7,r17
 8005268:	a809883a 	mov	r4,r21
 800526c:	4029883a 	mov	r20,r8
 8005270:	800dd900 	call	800dd90 <__gedf2>
 8005274:	00841d16 	blt	zero,r2,80062ec <_dtoa_r+0x15f4>
 8005278:	800d883a 	mov	r6,r16
 800527c:	880f883a 	mov	r7,r17
 8005280:	0009883a 	mov	r4,zero
 8005284:	014ffc34 	movhi	r5,16368
 8005288:	800e7cc0 	call	800e7cc <__subdf3>
 800528c:	d9401217 	ldw	r5,72(sp)
 8005290:	100d883a 	mov	r6,r2
 8005294:	180f883a 	mov	r7,r3
 8005298:	a809883a 	mov	r4,r21
 800529c:	800dd900 	call	800dd90 <__gedf2>
 80052a0:	db001617 	ldw	r12,88(sp)
 80052a4:	00840e16 	blt	zero,r2,80062e0 <_dtoa_r+0x15e8>
 80052a8:	00800044 	movi	r2,1
 80052ac:	13006b0e 	bge	r2,r12,800545c <_dtoa_r+0x764>
 80052b0:	d9000717 	ldw	r4,28(sp)
 80052b4:	dd800f15 	stw	r22,60(sp)
 80052b8:	dcc01015 	stw	r19,64(sp)
 80052bc:	2319883a 	add	r12,r4,r12
 80052c0:	dcc01217 	ldw	r19,72(sp)
 80052c4:	602d883a 	mov	r22,r12
 80052c8:	dc801215 	stw	r18,72(sp)
 80052cc:	b825883a 	mov	r18,r23
 80052d0:	00000906 	br	80052f8 <_dtoa_r+0x600>
 80052d4:	800e7cc0 	call	800e7cc <__subdf3>
 80052d8:	a80d883a 	mov	r6,r21
 80052dc:	980f883a 	mov	r7,r19
 80052e0:	1009883a 	mov	r4,r2
 80052e4:	180b883a 	mov	r5,r3
 80052e8:	800de6c0 	call	800de6c <__ledf2>
 80052ec:	1003e816 	blt	r2,zero,8006290 <_dtoa_r+0x1598>
 80052f0:	b825883a 	mov	r18,r23
 80052f4:	bd83e926 	beq	r23,r22,800629c <_dtoa_r+0x15a4>
 80052f8:	a809883a 	mov	r4,r21
 80052fc:	980b883a 	mov	r5,r19
 8005300:	000d883a 	mov	r6,zero
 8005304:	01d00934 	movhi	r7,16420
 8005308:	800df600 	call	800df60 <__muldf3>
 800530c:	000d883a 	mov	r6,zero
 8005310:	01d00934 	movhi	r7,16420
 8005314:	8009883a 	mov	r4,r16
 8005318:	880b883a 	mov	r5,r17
 800531c:	102b883a 	mov	r21,r2
 8005320:	1827883a 	mov	r19,r3
 8005324:	800df600 	call	800df60 <__muldf3>
 8005328:	180b883a 	mov	r5,r3
 800532c:	1009883a 	mov	r4,r2
 8005330:	1821883a 	mov	r16,r3
 8005334:	1023883a 	mov	r17,r2
 8005338:	800f0c80 	call	800f0c8 <__fixdfsi>
 800533c:	1009883a 	mov	r4,r2
 8005340:	1029883a 	mov	r20,r2
 8005344:	800f1480 	call	800f148 <__floatsidf>
 8005348:	8809883a 	mov	r4,r17
 800534c:	800b883a 	mov	r5,r16
 8005350:	100d883a 	mov	r6,r2
 8005354:	180f883a 	mov	r7,r3
 8005358:	800e7cc0 	call	800e7cc <__subdf3>
 800535c:	a5000c04 	addi	r20,r20,48
 8005360:	a80d883a 	mov	r6,r21
 8005364:	980f883a 	mov	r7,r19
 8005368:	1009883a 	mov	r4,r2
 800536c:	180b883a 	mov	r5,r3
 8005370:	95000005 	stb	r20,0(r18)
 8005374:	1021883a 	mov	r16,r2
 8005378:	1823883a 	mov	r17,r3
 800537c:	800de6c0 	call	800de6c <__ledf2>
 8005380:	bdc00044 	addi	r23,r23,1
 8005384:	800d883a 	mov	r6,r16
 8005388:	880f883a 	mov	r7,r17
 800538c:	0009883a 	mov	r4,zero
 8005390:	014ffc34 	movhi	r5,16368
 8005394:	103fcf0e 	bge	r2,zero,80052d4 <__alt_data_end+0xfc0052d4>
 8005398:	d8c01317 	ldw	r3,76(sp)
 800539c:	d8c00515 	stw	r3,20(sp)
 80053a0:	d9400917 	ldw	r5,36(sp)
 80053a4:	e009883a 	mov	r4,fp
 80053a8:	80084580 	call	8008458 <_Bfree>
 80053ac:	d9000517 	ldw	r4,20(sp)
 80053b0:	d9802317 	ldw	r6,140(sp)
 80053b4:	d9c02517 	ldw	r7,148(sp)
 80053b8:	b8000005 	stb	zero,0(r23)
 80053bc:	20800044 	addi	r2,r4,1
 80053c0:	30800015 	stw	r2,0(r6)
 80053c4:	3802aa26 	beq	r7,zero,8005e70 <_dtoa_r+0x1178>
 80053c8:	3dc00015 	stw	r23,0(r7)
 80053cc:	d8800717 	ldw	r2,28(sp)
 80053d0:	003e7906 	br	8004db8 <__alt_data_end+0xfc004db8>
 80053d4:	00800434 	movhi	r2,16
 80053d8:	10bfffc4 	addi	r2,r2,-1
 80053dc:	88a2703a 	and	r17,r17,r2
 80053e0:	883e851e 	bne	r17,zero,8004df8 <__alt_data_end+0xfc004df8>
 80053e4:	00820074 	movhi	r2,2049
 80053e8:	1088e404 	addi	r2,r2,9104
 80053ec:	003e8406 	br	8004e00 <__alt_data_end+0xfc004e00>
 80053f0:	10c00204 	addi	r3,r2,8
 80053f4:	003e8706 	br	8004e14 <__alt_data_end+0xfc004e14>
 80053f8:	01400434 	movhi	r5,16
 80053fc:	297fffc4 	addi	r5,r5,-1
 8005400:	994a703a 	and	r5,r19,r5
 8005404:	9009883a 	mov	r4,r18
 8005408:	843f0044 	addi	r16,r16,-1023
 800540c:	294ffc34 	orhi	r5,r5,16368
 8005410:	dd800217 	ldw	r22,8(sp)
 8005414:	d8001115 	stw	zero,68(sp)
 8005418:	003ea506 	br	8004eb0 <__alt_data_end+0xfc004eb0>
 800541c:	00820074 	movhi	r2,2049
 8005420:	1088db04 	addi	r2,r2,9068
 8005424:	003e6406 	br	8004db8 <__alt_data_end+0xfc004db8>
 8005428:	e0001115 	stw	zero,68(fp)
 800542c:	000b883a 	mov	r5,zero
 8005430:	e009883a 	mov	r4,fp
 8005434:	80083b00 	call	80083b0 <_Balloc>
 8005438:	01bfffc4 	movi	r6,-1
 800543c:	01c00044 	movi	r7,1
 8005440:	d8800715 	stw	r2,28(sp)
 8005444:	d9800c15 	stw	r6,48(sp)
 8005448:	e0801015 	stw	r2,64(fp)
 800544c:	d8000315 	stw	zero,12(sp)
 8005450:	d9c00b15 	stw	r7,44(sp)
 8005454:	d9800615 	stw	r6,24(sp)
 8005458:	d8002215 	stw	zero,136(sp)
 800545c:	d8800117 	ldw	r2,4(sp)
 8005460:	10008916 	blt	r2,zero,8005688 <_dtoa_r+0x990>
 8005464:	d9000517 	ldw	r4,20(sp)
 8005468:	00c00384 	movi	r3,14
 800546c:	19008616 	blt	r3,r4,8005688 <_dtoa_r+0x990>
 8005470:	200490fa 	slli	r2,r4,3
 8005474:	00c20074 	movhi	r3,2049
 8005478:	d9802217 	ldw	r6,136(sp)
 800547c:	18c90304 	addi	r3,r3,9228
 8005480:	1885883a 	add	r2,r3,r2
 8005484:	14000017 	ldw	r16,0(r2)
 8005488:	14400117 	ldw	r17,4(r2)
 800548c:	30016316 	blt	r6,zero,8005a1c <_dtoa_r+0xd24>
 8005490:	800d883a 	mov	r6,r16
 8005494:	880f883a 	mov	r7,r17
 8005498:	9009883a 	mov	r4,r18
 800549c:	980b883a 	mov	r5,r19
 80054a0:	800d3380 	call	800d338 <__divdf3>
 80054a4:	180b883a 	mov	r5,r3
 80054a8:	1009883a 	mov	r4,r2
 80054ac:	800f0c80 	call	800f0c8 <__fixdfsi>
 80054b0:	1009883a 	mov	r4,r2
 80054b4:	102b883a 	mov	r21,r2
 80054b8:	800f1480 	call	800f148 <__floatsidf>
 80054bc:	800d883a 	mov	r6,r16
 80054c0:	880f883a 	mov	r7,r17
 80054c4:	1009883a 	mov	r4,r2
 80054c8:	180b883a 	mov	r5,r3
 80054cc:	800df600 	call	800df60 <__muldf3>
 80054d0:	100d883a 	mov	r6,r2
 80054d4:	180f883a 	mov	r7,r3
 80054d8:	9009883a 	mov	r4,r18
 80054dc:	980b883a 	mov	r5,r19
 80054e0:	800e7cc0 	call	800e7cc <__subdf3>
 80054e4:	d9c00717 	ldw	r7,28(sp)
 80054e8:	1009883a 	mov	r4,r2
 80054ec:	a8800c04 	addi	r2,r21,48
 80054f0:	38800005 	stb	r2,0(r7)
 80054f4:	3dc00044 	addi	r23,r7,1
 80054f8:	d9c00617 	ldw	r7,24(sp)
 80054fc:	01800044 	movi	r6,1
 8005500:	180b883a 	mov	r5,r3
 8005504:	2005883a 	mov	r2,r4
 8005508:	39803826 	beq	r7,r6,80055ec <_dtoa_r+0x8f4>
 800550c:	000d883a 	mov	r6,zero
 8005510:	01d00934 	movhi	r7,16420
 8005514:	800df600 	call	800df60 <__muldf3>
 8005518:	000d883a 	mov	r6,zero
 800551c:	000f883a 	mov	r7,zero
 8005520:	1009883a 	mov	r4,r2
 8005524:	180b883a 	mov	r5,r3
 8005528:	1025883a 	mov	r18,r2
 800552c:	1827883a 	mov	r19,r3
 8005530:	800dd080 	call	800dd08 <__eqdf2>
 8005534:	103f9a26 	beq	r2,zero,80053a0 <__alt_data_end+0xfc0053a0>
 8005538:	d9c00617 	ldw	r7,24(sp)
 800553c:	d8c00717 	ldw	r3,28(sp)
 8005540:	b829883a 	mov	r20,r23
 8005544:	38bfffc4 	addi	r2,r7,-1
 8005548:	18ad883a 	add	r22,r3,r2
 800554c:	00000a06 	br	8005578 <_dtoa_r+0x880>
 8005550:	800df600 	call	800df60 <__muldf3>
 8005554:	000d883a 	mov	r6,zero
 8005558:	000f883a 	mov	r7,zero
 800555c:	1009883a 	mov	r4,r2
 8005560:	180b883a 	mov	r5,r3
 8005564:	1025883a 	mov	r18,r2
 8005568:	1827883a 	mov	r19,r3
 800556c:	b829883a 	mov	r20,r23
 8005570:	800dd080 	call	800dd08 <__eqdf2>
 8005574:	103f8a26 	beq	r2,zero,80053a0 <__alt_data_end+0xfc0053a0>
 8005578:	800d883a 	mov	r6,r16
 800557c:	880f883a 	mov	r7,r17
 8005580:	9009883a 	mov	r4,r18
 8005584:	980b883a 	mov	r5,r19
 8005588:	800d3380 	call	800d338 <__divdf3>
 800558c:	180b883a 	mov	r5,r3
 8005590:	1009883a 	mov	r4,r2
 8005594:	800f0c80 	call	800f0c8 <__fixdfsi>
 8005598:	1009883a 	mov	r4,r2
 800559c:	102b883a 	mov	r21,r2
 80055a0:	800f1480 	call	800f148 <__floatsidf>
 80055a4:	800d883a 	mov	r6,r16
 80055a8:	880f883a 	mov	r7,r17
 80055ac:	1009883a 	mov	r4,r2
 80055b0:	180b883a 	mov	r5,r3
 80055b4:	800df600 	call	800df60 <__muldf3>
 80055b8:	100d883a 	mov	r6,r2
 80055bc:	180f883a 	mov	r7,r3
 80055c0:	9009883a 	mov	r4,r18
 80055c4:	980b883a 	mov	r5,r19
 80055c8:	800e7cc0 	call	800e7cc <__subdf3>
 80055cc:	aa000c04 	addi	r8,r21,48
 80055d0:	a2000005 	stb	r8,0(r20)
 80055d4:	000d883a 	mov	r6,zero
 80055d8:	01d00934 	movhi	r7,16420
 80055dc:	1009883a 	mov	r4,r2
 80055e0:	180b883a 	mov	r5,r3
 80055e4:	a5c00044 	addi	r23,r20,1
 80055e8:	b53fd91e 	bne	r22,r20,8005550 <__alt_data_end+0xfc005550>
 80055ec:	100d883a 	mov	r6,r2
 80055f0:	180f883a 	mov	r7,r3
 80055f4:	1009883a 	mov	r4,r2
 80055f8:	180b883a 	mov	r5,r3
 80055fc:	800ca8c0 	call	800ca8c <__adddf3>
 8005600:	100d883a 	mov	r6,r2
 8005604:	180f883a 	mov	r7,r3
 8005608:	8009883a 	mov	r4,r16
 800560c:	880b883a 	mov	r5,r17
 8005610:	1027883a 	mov	r19,r2
 8005614:	1825883a 	mov	r18,r3
 8005618:	800de6c0 	call	800de6c <__ledf2>
 800561c:	10000816 	blt	r2,zero,8005640 <_dtoa_r+0x948>
 8005620:	980d883a 	mov	r6,r19
 8005624:	900f883a 	mov	r7,r18
 8005628:	8009883a 	mov	r4,r16
 800562c:	880b883a 	mov	r5,r17
 8005630:	800dd080 	call	800dd08 <__eqdf2>
 8005634:	103f5a1e 	bne	r2,zero,80053a0 <__alt_data_end+0xfc0053a0>
 8005638:	ad40004c 	andi	r21,r21,1
 800563c:	a83f5826 	beq	r21,zero,80053a0 <__alt_data_end+0xfc0053a0>
 8005640:	bd3fffc3 	ldbu	r20,-1(r23)
 8005644:	b8bfffc4 	addi	r2,r23,-1
 8005648:	1007883a 	mov	r3,r2
 800564c:	01400e44 	movi	r5,57
 8005650:	d9800717 	ldw	r6,28(sp)
 8005654:	00000506 	br	800566c <_dtoa_r+0x974>
 8005658:	18ffffc4 	addi	r3,r3,-1
 800565c:	11824726 	beq	r2,r6,8005f7c <_dtoa_r+0x1284>
 8005660:	1d000003 	ldbu	r20,0(r3)
 8005664:	102f883a 	mov	r23,r2
 8005668:	10bfffc4 	addi	r2,r2,-1
 800566c:	a1003fcc 	andi	r4,r20,255
 8005670:	2100201c 	xori	r4,r4,128
 8005674:	213fe004 	addi	r4,r4,-128
 8005678:	217ff726 	beq	r4,r5,8005658 <__alt_data_end+0xfc005658>
 800567c:	a2000044 	addi	r8,r20,1
 8005680:	12000005 	stb	r8,0(r2)
 8005684:	003f4606 	br	80053a0 <__alt_data_end+0xfc0053a0>
 8005688:	d9000b17 	ldw	r4,44(sp)
 800568c:	2000c826 	beq	r4,zero,80059b0 <_dtoa_r+0xcb8>
 8005690:	d9800317 	ldw	r6,12(sp)
 8005694:	00c00044 	movi	r3,1
 8005698:	1980f90e 	bge	r3,r6,8005a80 <_dtoa_r+0xd88>
 800569c:	d8800617 	ldw	r2,24(sp)
 80056a0:	d8c00a17 	ldw	r3,40(sp)
 80056a4:	157fffc4 	addi	r21,r2,-1
 80056a8:	1d41f316 	blt	r3,r21,8005e78 <_dtoa_r+0x1180>
 80056ac:	1d6bc83a 	sub	r21,r3,r21
 80056b0:	d9c00617 	ldw	r7,24(sp)
 80056b4:	3802aa16 	blt	r7,zero,8006160 <_dtoa_r+0x1468>
 80056b8:	dd000817 	ldw	r20,32(sp)
 80056bc:	d8800617 	ldw	r2,24(sp)
 80056c0:	d8c00817 	ldw	r3,32(sp)
 80056c4:	01400044 	movi	r5,1
 80056c8:	e009883a 	mov	r4,fp
 80056cc:	1887883a 	add	r3,r3,r2
 80056d0:	d8c00815 	stw	r3,32(sp)
 80056d4:	b0ad883a 	add	r22,r22,r2
 80056d8:	80087e40 	call	80087e4 <__i2b>
 80056dc:	1023883a 	mov	r17,r2
 80056e0:	a0000826 	beq	r20,zero,8005704 <_dtoa_r+0xa0c>
 80056e4:	0580070e 	bge	zero,r22,8005704 <_dtoa_r+0xa0c>
 80056e8:	a005883a 	mov	r2,r20
 80056ec:	b500b916 	blt	r22,r20,80059d4 <_dtoa_r+0xcdc>
 80056f0:	d9000817 	ldw	r4,32(sp)
 80056f4:	a0a9c83a 	sub	r20,r20,r2
 80056f8:	b0adc83a 	sub	r22,r22,r2
 80056fc:	2089c83a 	sub	r4,r4,r2
 8005700:	d9000815 	stw	r4,32(sp)
 8005704:	d9800a17 	ldw	r6,40(sp)
 8005708:	0181810e 	bge	zero,r6,8005d10 <_dtoa_r+0x1018>
 800570c:	d9c00b17 	ldw	r7,44(sp)
 8005710:	3800b326 	beq	r7,zero,80059e0 <_dtoa_r+0xce8>
 8005714:	a800b226 	beq	r21,zero,80059e0 <_dtoa_r+0xce8>
 8005718:	880b883a 	mov	r5,r17
 800571c:	a80d883a 	mov	r6,r21
 8005720:	e009883a 	mov	r4,fp
 8005724:	8008aac0 	call	8008aac <__pow5mult>
 8005728:	d9800917 	ldw	r6,36(sp)
 800572c:	100b883a 	mov	r5,r2
 8005730:	e009883a 	mov	r4,fp
 8005734:	1023883a 	mov	r17,r2
 8005738:	80088200 	call	8008820 <__multiply>
 800573c:	1021883a 	mov	r16,r2
 8005740:	d8800a17 	ldw	r2,40(sp)
 8005744:	d9400917 	ldw	r5,36(sp)
 8005748:	e009883a 	mov	r4,fp
 800574c:	1545c83a 	sub	r2,r2,r21
 8005750:	d8800a15 	stw	r2,40(sp)
 8005754:	80084580 	call	8008458 <_Bfree>
 8005758:	d8c00a17 	ldw	r3,40(sp)
 800575c:	18009f1e 	bne	r3,zero,80059dc <_dtoa_r+0xce4>
 8005760:	05c00044 	movi	r23,1
 8005764:	e009883a 	mov	r4,fp
 8005768:	b80b883a 	mov	r5,r23
 800576c:	80087e40 	call	80087e4 <__i2b>
 8005770:	d9000d17 	ldw	r4,52(sp)
 8005774:	102b883a 	mov	r21,r2
 8005778:	2000ce26 	beq	r4,zero,8005ab4 <_dtoa_r+0xdbc>
 800577c:	200d883a 	mov	r6,r4
 8005780:	100b883a 	mov	r5,r2
 8005784:	e009883a 	mov	r4,fp
 8005788:	8008aac0 	call	8008aac <__pow5mult>
 800578c:	d9800317 	ldw	r6,12(sp)
 8005790:	102b883a 	mov	r21,r2
 8005794:	b981810e 	bge	r23,r6,8005d9c <_dtoa_r+0x10a4>
 8005798:	0027883a 	mov	r19,zero
 800579c:	a8800417 	ldw	r2,16(r21)
 80057a0:	05c00804 	movi	r23,32
 80057a4:	10800104 	addi	r2,r2,4
 80057a8:	1085883a 	add	r2,r2,r2
 80057ac:	1085883a 	add	r2,r2,r2
 80057b0:	a885883a 	add	r2,r21,r2
 80057b4:	11000017 	ldw	r4,0(r2)
 80057b8:	80086cc0 	call	80086cc <__hi0bits>
 80057bc:	b885c83a 	sub	r2,r23,r2
 80057c0:	1585883a 	add	r2,r2,r22
 80057c4:	108007cc 	andi	r2,r2,31
 80057c8:	1000b326 	beq	r2,zero,8005a98 <_dtoa_r+0xda0>
 80057cc:	00c00804 	movi	r3,32
 80057d0:	1887c83a 	sub	r3,r3,r2
 80057d4:	01000104 	movi	r4,4
 80057d8:	20c2cd0e 	bge	r4,r3,8006310 <_dtoa_r+0x1618>
 80057dc:	00c00704 	movi	r3,28
 80057e0:	1885c83a 	sub	r2,r3,r2
 80057e4:	d8c00817 	ldw	r3,32(sp)
 80057e8:	a0a9883a 	add	r20,r20,r2
 80057ec:	b0ad883a 	add	r22,r22,r2
 80057f0:	1887883a 	add	r3,r3,r2
 80057f4:	d8c00815 	stw	r3,32(sp)
 80057f8:	d9800817 	ldw	r6,32(sp)
 80057fc:	0180040e 	bge	zero,r6,8005810 <_dtoa_r+0xb18>
 8005800:	800b883a 	mov	r5,r16
 8005804:	e009883a 	mov	r4,fp
 8005808:	8008bec0 	call	8008bec <__lshift>
 800580c:	1021883a 	mov	r16,r2
 8005810:	0580050e 	bge	zero,r22,8005828 <_dtoa_r+0xb30>
 8005814:	a80b883a 	mov	r5,r21
 8005818:	b00d883a 	mov	r6,r22
 800581c:	e009883a 	mov	r4,fp
 8005820:	8008bec0 	call	8008bec <__lshift>
 8005824:	102b883a 	mov	r21,r2
 8005828:	d9c00e17 	ldw	r7,56(sp)
 800582c:	3801211e 	bne	r7,zero,8005cb4 <_dtoa_r+0xfbc>
 8005830:	d9800617 	ldw	r6,24(sp)
 8005834:	0181380e 	bge	zero,r6,8005d18 <_dtoa_r+0x1020>
 8005838:	d8c00b17 	ldw	r3,44(sp)
 800583c:	1800ab1e 	bne	r3,zero,8005aec <_dtoa_r+0xdf4>
 8005840:	dc800717 	ldw	r18,28(sp)
 8005844:	dcc00617 	ldw	r19,24(sp)
 8005848:	9029883a 	mov	r20,r18
 800584c:	00000206 	br	8005858 <_dtoa_r+0xb60>
 8005850:	80084800 	call	8008480 <__multadd>
 8005854:	1021883a 	mov	r16,r2
 8005858:	a80b883a 	mov	r5,r21
 800585c:	8009883a 	mov	r4,r16
 8005860:	8004ad00 	call	8004ad0 <quorem>
 8005864:	10800c04 	addi	r2,r2,48
 8005868:	90800005 	stb	r2,0(r18)
 800586c:	94800044 	addi	r18,r18,1
 8005870:	9507c83a 	sub	r3,r18,r20
 8005874:	000f883a 	mov	r7,zero
 8005878:	01800284 	movi	r6,10
 800587c:	800b883a 	mov	r5,r16
 8005880:	e009883a 	mov	r4,fp
 8005884:	1cfff216 	blt	r3,r19,8005850 <__alt_data_end+0xfc005850>
 8005888:	1011883a 	mov	r8,r2
 800588c:	d8800617 	ldw	r2,24(sp)
 8005890:	0082370e 	bge	zero,r2,8006170 <_dtoa_r+0x1478>
 8005894:	d9000717 	ldw	r4,28(sp)
 8005898:	0025883a 	mov	r18,zero
 800589c:	20af883a 	add	r23,r4,r2
 80058a0:	01800044 	movi	r6,1
 80058a4:	800b883a 	mov	r5,r16
 80058a8:	e009883a 	mov	r4,fp
 80058ac:	da001715 	stw	r8,92(sp)
 80058b0:	8008bec0 	call	8008bec <__lshift>
 80058b4:	a80b883a 	mov	r5,r21
 80058b8:	1009883a 	mov	r4,r2
 80058bc:	d8800915 	stw	r2,36(sp)
 80058c0:	8008d340 	call	8008d34 <__mcmp>
 80058c4:	da001717 	ldw	r8,92(sp)
 80058c8:	0081800e 	bge	zero,r2,8005ecc <_dtoa_r+0x11d4>
 80058cc:	b93fffc3 	ldbu	r4,-1(r23)
 80058d0:	b8bfffc4 	addi	r2,r23,-1
 80058d4:	1007883a 	mov	r3,r2
 80058d8:	01800e44 	movi	r6,57
 80058dc:	d9c00717 	ldw	r7,28(sp)
 80058e0:	00000506 	br	80058f8 <_dtoa_r+0xc00>
 80058e4:	18ffffc4 	addi	r3,r3,-1
 80058e8:	11c12326 	beq	r2,r7,8005d78 <_dtoa_r+0x1080>
 80058ec:	19000003 	ldbu	r4,0(r3)
 80058f0:	102f883a 	mov	r23,r2
 80058f4:	10bfffc4 	addi	r2,r2,-1
 80058f8:	21403fcc 	andi	r5,r4,255
 80058fc:	2940201c 	xori	r5,r5,128
 8005900:	297fe004 	addi	r5,r5,-128
 8005904:	29bff726 	beq	r5,r6,80058e4 <__alt_data_end+0xfc0058e4>
 8005908:	21000044 	addi	r4,r4,1
 800590c:	11000005 	stb	r4,0(r2)
 8005910:	a80b883a 	mov	r5,r21
 8005914:	e009883a 	mov	r4,fp
 8005918:	80084580 	call	8008458 <_Bfree>
 800591c:	883ea026 	beq	r17,zero,80053a0 <__alt_data_end+0xfc0053a0>
 8005920:	90000426 	beq	r18,zero,8005934 <_dtoa_r+0xc3c>
 8005924:	94400326 	beq	r18,r17,8005934 <_dtoa_r+0xc3c>
 8005928:	900b883a 	mov	r5,r18
 800592c:	e009883a 	mov	r4,fp
 8005930:	80084580 	call	8008458 <_Bfree>
 8005934:	880b883a 	mov	r5,r17
 8005938:	e009883a 	mov	r4,fp
 800593c:	80084580 	call	8008458 <_Bfree>
 8005940:	003e9706 	br	80053a0 <__alt_data_end+0xfc0053a0>
 8005944:	01800044 	movi	r6,1
 8005948:	d9800e15 	stw	r6,56(sp)
 800594c:	003d9606 	br	8004fa8 <__alt_data_end+0xfc004fa8>
 8005950:	d8800817 	ldw	r2,32(sp)
 8005954:	d8c00517 	ldw	r3,20(sp)
 8005958:	d8000d15 	stw	zero,52(sp)
 800595c:	10c5c83a 	sub	r2,r2,r3
 8005960:	00c9c83a 	sub	r4,zero,r3
 8005964:	d8800815 	stw	r2,32(sp)
 8005968:	d9000a15 	stw	r4,40(sp)
 800596c:	003d9706 	br	8004fcc <__alt_data_end+0xfc004fcc>
 8005970:	05adc83a 	sub	r22,zero,r22
 8005974:	dd800815 	stw	r22,32(sp)
 8005978:	002d883a 	mov	r22,zero
 800597c:	003d8e06 	br	8004fb8 <__alt_data_end+0xfc004fb8>
 8005980:	d9000517 	ldw	r4,20(sp)
 8005984:	800f1480 	call	800f148 <__floatsidf>
 8005988:	100d883a 	mov	r6,r2
 800598c:	180f883a 	mov	r7,r3
 8005990:	a009883a 	mov	r4,r20
 8005994:	880b883a 	mov	r5,r17
 8005998:	800dd080 	call	800dd08 <__eqdf2>
 800599c:	103d7126 	beq	r2,zero,8004f64 <__alt_data_end+0xfc004f64>
 80059a0:	d9c00517 	ldw	r7,20(sp)
 80059a4:	39ffffc4 	addi	r7,r7,-1
 80059a8:	d9c00515 	stw	r7,20(sp)
 80059ac:	003d6d06 	br	8004f64 <__alt_data_end+0xfc004f64>
 80059b0:	dd400a17 	ldw	r21,40(sp)
 80059b4:	dd000817 	ldw	r20,32(sp)
 80059b8:	0023883a 	mov	r17,zero
 80059bc:	003f4806 	br	80056e0 <__alt_data_end+0xfc0056e0>
 80059c0:	10e3c83a 	sub	r17,r2,r3
 80059c4:	9448983a 	sll	r4,r18,r17
 80059c8:	003d3206 	br	8004e94 <__alt_data_end+0xfc004e94>
 80059cc:	d8000e15 	stw	zero,56(sp)
 80059d0:	003d7506 	br	8004fa8 <__alt_data_end+0xfc004fa8>
 80059d4:	b005883a 	mov	r2,r22
 80059d8:	003f4506 	br	80056f0 <__alt_data_end+0xfc0056f0>
 80059dc:	dc000915 	stw	r16,36(sp)
 80059e0:	d9800a17 	ldw	r6,40(sp)
 80059e4:	d9400917 	ldw	r5,36(sp)
 80059e8:	e009883a 	mov	r4,fp
 80059ec:	8008aac0 	call	8008aac <__pow5mult>
 80059f0:	1021883a 	mov	r16,r2
 80059f4:	003f5a06 	br	8005760 <__alt_data_end+0xfc005760>
 80059f8:	01c00044 	movi	r7,1
 80059fc:	d9c00b15 	stw	r7,44(sp)
 8005a00:	d8802217 	ldw	r2,136(sp)
 8005a04:	0081280e 	bge	zero,r2,8005ea8 <_dtoa_r+0x11b0>
 8005a08:	100d883a 	mov	r6,r2
 8005a0c:	1021883a 	mov	r16,r2
 8005a10:	d8800c15 	stw	r2,48(sp)
 8005a14:	d8800615 	stw	r2,24(sp)
 8005a18:	003d8806 	br	800503c <__alt_data_end+0xfc00503c>
 8005a1c:	d8800617 	ldw	r2,24(sp)
 8005a20:	00be9b16 	blt	zero,r2,8005490 <__alt_data_end+0xfc005490>
 8005a24:	10010f1e 	bne	r2,zero,8005e64 <_dtoa_r+0x116c>
 8005a28:	880b883a 	mov	r5,r17
 8005a2c:	000d883a 	mov	r6,zero
 8005a30:	01d00534 	movhi	r7,16404
 8005a34:	8009883a 	mov	r4,r16
 8005a38:	800df600 	call	800df60 <__muldf3>
 8005a3c:	900d883a 	mov	r6,r18
 8005a40:	980f883a 	mov	r7,r19
 8005a44:	1009883a 	mov	r4,r2
 8005a48:	180b883a 	mov	r5,r3
 8005a4c:	800dd900 	call	800dd90 <__gedf2>
 8005a50:	002b883a 	mov	r21,zero
 8005a54:	0023883a 	mov	r17,zero
 8005a58:	1000bf16 	blt	r2,zero,8005d58 <_dtoa_r+0x1060>
 8005a5c:	d9802217 	ldw	r6,136(sp)
 8005a60:	ddc00717 	ldw	r23,28(sp)
 8005a64:	018c303a 	nor	r6,zero,r6
 8005a68:	d9800515 	stw	r6,20(sp)
 8005a6c:	a80b883a 	mov	r5,r21
 8005a70:	e009883a 	mov	r4,fp
 8005a74:	80084580 	call	8008458 <_Bfree>
 8005a78:	883e4926 	beq	r17,zero,80053a0 <__alt_data_end+0xfc0053a0>
 8005a7c:	003fad06 	br	8005934 <__alt_data_end+0xfc005934>
 8005a80:	d9c01117 	ldw	r7,68(sp)
 8005a84:	3801bc26 	beq	r7,zero,8006178 <_dtoa_r+0x1480>
 8005a88:	10810cc4 	addi	r2,r2,1075
 8005a8c:	dd400a17 	ldw	r21,40(sp)
 8005a90:	dd000817 	ldw	r20,32(sp)
 8005a94:	003f0a06 	br	80056c0 <__alt_data_end+0xfc0056c0>
 8005a98:	00800704 	movi	r2,28
 8005a9c:	d9000817 	ldw	r4,32(sp)
 8005aa0:	a0a9883a 	add	r20,r20,r2
 8005aa4:	b0ad883a 	add	r22,r22,r2
 8005aa8:	2089883a 	add	r4,r4,r2
 8005aac:	d9000815 	stw	r4,32(sp)
 8005ab0:	003f5106 	br	80057f8 <__alt_data_end+0xfc0057f8>
 8005ab4:	d8c00317 	ldw	r3,12(sp)
 8005ab8:	b8c1fc0e 	bge	r23,r3,80062ac <_dtoa_r+0x15b4>
 8005abc:	0027883a 	mov	r19,zero
 8005ac0:	b805883a 	mov	r2,r23
 8005ac4:	003f3e06 	br	80057c0 <__alt_data_end+0xfc0057c0>
 8005ac8:	880b883a 	mov	r5,r17
 8005acc:	e009883a 	mov	r4,fp
 8005ad0:	000f883a 	mov	r7,zero
 8005ad4:	01800284 	movi	r6,10
 8005ad8:	80084800 	call	8008480 <__multadd>
 8005adc:	d9000c17 	ldw	r4,48(sp)
 8005ae0:	1023883a 	mov	r17,r2
 8005ae4:	0102040e 	bge	zero,r4,80062f8 <_dtoa_r+0x1600>
 8005ae8:	d9000615 	stw	r4,24(sp)
 8005aec:	0500050e 	bge	zero,r20,8005b04 <_dtoa_r+0xe0c>
 8005af0:	880b883a 	mov	r5,r17
 8005af4:	a00d883a 	mov	r6,r20
 8005af8:	e009883a 	mov	r4,fp
 8005afc:	8008bec0 	call	8008bec <__lshift>
 8005b00:	1023883a 	mov	r17,r2
 8005b04:	9801241e 	bne	r19,zero,8005f98 <_dtoa_r+0x12a0>
 8005b08:	8829883a 	mov	r20,r17
 8005b0c:	d9000617 	ldw	r4,24(sp)
 8005b10:	dcc00717 	ldw	r19,28(sp)
 8005b14:	9480004c 	andi	r18,r18,1
 8005b18:	20bfffc4 	addi	r2,r4,-1
 8005b1c:	9885883a 	add	r2,r19,r2
 8005b20:	d8800415 	stw	r2,16(sp)
 8005b24:	dc800615 	stw	r18,24(sp)
 8005b28:	a80b883a 	mov	r5,r21
 8005b2c:	8009883a 	mov	r4,r16
 8005b30:	8004ad00 	call	8004ad0 <quorem>
 8005b34:	880b883a 	mov	r5,r17
 8005b38:	8009883a 	mov	r4,r16
 8005b3c:	102f883a 	mov	r23,r2
 8005b40:	8008d340 	call	8008d34 <__mcmp>
 8005b44:	a80b883a 	mov	r5,r21
 8005b48:	a00d883a 	mov	r6,r20
 8005b4c:	e009883a 	mov	r4,fp
 8005b50:	102d883a 	mov	r22,r2
 8005b54:	8008d940 	call	8008d94 <__mdiff>
 8005b58:	1007883a 	mov	r3,r2
 8005b5c:	10800317 	ldw	r2,12(r2)
 8005b60:	bc800c04 	addi	r18,r23,48
 8005b64:	180b883a 	mov	r5,r3
 8005b68:	10004e1e 	bne	r2,zero,8005ca4 <_dtoa_r+0xfac>
 8005b6c:	8009883a 	mov	r4,r16
 8005b70:	d8c01615 	stw	r3,88(sp)
 8005b74:	8008d340 	call	8008d34 <__mcmp>
 8005b78:	d8c01617 	ldw	r3,88(sp)
 8005b7c:	e009883a 	mov	r4,fp
 8005b80:	d8801615 	stw	r2,88(sp)
 8005b84:	180b883a 	mov	r5,r3
 8005b88:	80084580 	call	8008458 <_Bfree>
 8005b8c:	d8801617 	ldw	r2,88(sp)
 8005b90:	1000041e 	bne	r2,zero,8005ba4 <_dtoa_r+0xeac>
 8005b94:	d9800317 	ldw	r6,12(sp)
 8005b98:	3000021e 	bne	r6,zero,8005ba4 <_dtoa_r+0xeac>
 8005b9c:	d8c00617 	ldw	r3,24(sp)
 8005ba0:	18003726 	beq	r3,zero,8005c80 <_dtoa_r+0xf88>
 8005ba4:	b0002016 	blt	r22,zero,8005c28 <_dtoa_r+0xf30>
 8005ba8:	b000041e 	bne	r22,zero,8005bbc <_dtoa_r+0xec4>
 8005bac:	d9000317 	ldw	r4,12(sp)
 8005bb0:	2000021e 	bne	r4,zero,8005bbc <_dtoa_r+0xec4>
 8005bb4:	d8c00617 	ldw	r3,24(sp)
 8005bb8:	18001b26 	beq	r3,zero,8005c28 <_dtoa_r+0xf30>
 8005bbc:	00810716 	blt	zero,r2,8005fdc <_dtoa_r+0x12e4>
 8005bc0:	d8c00417 	ldw	r3,16(sp)
 8005bc4:	9d800044 	addi	r22,r19,1
 8005bc8:	9c800005 	stb	r18,0(r19)
 8005bcc:	b02f883a 	mov	r23,r22
 8005bd0:	98c10626 	beq	r19,r3,8005fec <_dtoa_r+0x12f4>
 8005bd4:	800b883a 	mov	r5,r16
 8005bd8:	000f883a 	mov	r7,zero
 8005bdc:	01800284 	movi	r6,10
 8005be0:	e009883a 	mov	r4,fp
 8005be4:	80084800 	call	8008480 <__multadd>
 8005be8:	1021883a 	mov	r16,r2
 8005bec:	000f883a 	mov	r7,zero
 8005bf0:	01800284 	movi	r6,10
 8005bf4:	880b883a 	mov	r5,r17
 8005bf8:	e009883a 	mov	r4,fp
 8005bfc:	8d002526 	beq	r17,r20,8005c94 <_dtoa_r+0xf9c>
 8005c00:	80084800 	call	8008480 <__multadd>
 8005c04:	a00b883a 	mov	r5,r20
 8005c08:	000f883a 	mov	r7,zero
 8005c0c:	01800284 	movi	r6,10
 8005c10:	e009883a 	mov	r4,fp
 8005c14:	1023883a 	mov	r17,r2
 8005c18:	80084800 	call	8008480 <__multadd>
 8005c1c:	1029883a 	mov	r20,r2
 8005c20:	b027883a 	mov	r19,r22
 8005c24:	003fc006 	br	8005b28 <__alt_data_end+0xfc005b28>
 8005c28:	9011883a 	mov	r8,r18
 8005c2c:	00800e0e 	bge	zero,r2,8005c68 <_dtoa_r+0xf70>
 8005c30:	800b883a 	mov	r5,r16
 8005c34:	01800044 	movi	r6,1
 8005c38:	e009883a 	mov	r4,fp
 8005c3c:	da001715 	stw	r8,92(sp)
 8005c40:	8008bec0 	call	8008bec <__lshift>
 8005c44:	a80b883a 	mov	r5,r21
 8005c48:	1009883a 	mov	r4,r2
 8005c4c:	1021883a 	mov	r16,r2
 8005c50:	8008d340 	call	8008d34 <__mcmp>
 8005c54:	da001717 	ldw	r8,92(sp)
 8005c58:	0081960e 	bge	zero,r2,80062b4 <_dtoa_r+0x15bc>
 8005c5c:	00800e44 	movi	r2,57
 8005c60:	40817026 	beq	r8,r2,8006224 <_dtoa_r+0x152c>
 8005c64:	ba000c44 	addi	r8,r23,49
 8005c68:	8825883a 	mov	r18,r17
 8005c6c:	9dc00044 	addi	r23,r19,1
 8005c70:	9a000005 	stb	r8,0(r19)
 8005c74:	a023883a 	mov	r17,r20
 8005c78:	dc000915 	stw	r16,36(sp)
 8005c7c:	003f2406 	br	8005910 <__alt_data_end+0xfc005910>
 8005c80:	00800e44 	movi	r2,57
 8005c84:	9011883a 	mov	r8,r18
 8005c88:	90816626 	beq	r18,r2,8006224 <_dtoa_r+0x152c>
 8005c8c:	05bff516 	blt	zero,r22,8005c64 <__alt_data_end+0xfc005c64>
 8005c90:	003ff506 	br	8005c68 <__alt_data_end+0xfc005c68>
 8005c94:	80084800 	call	8008480 <__multadd>
 8005c98:	1023883a 	mov	r17,r2
 8005c9c:	1029883a 	mov	r20,r2
 8005ca0:	003fdf06 	br	8005c20 <__alt_data_end+0xfc005c20>
 8005ca4:	e009883a 	mov	r4,fp
 8005ca8:	80084580 	call	8008458 <_Bfree>
 8005cac:	00800044 	movi	r2,1
 8005cb0:	003fbc06 	br	8005ba4 <__alt_data_end+0xfc005ba4>
 8005cb4:	a80b883a 	mov	r5,r21
 8005cb8:	8009883a 	mov	r4,r16
 8005cbc:	8008d340 	call	8008d34 <__mcmp>
 8005cc0:	103edb0e 	bge	r2,zero,8005830 <__alt_data_end+0xfc005830>
 8005cc4:	800b883a 	mov	r5,r16
 8005cc8:	000f883a 	mov	r7,zero
 8005ccc:	01800284 	movi	r6,10
 8005cd0:	e009883a 	mov	r4,fp
 8005cd4:	80084800 	call	8008480 <__multadd>
 8005cd8:	1021883a 	mov	r16,r2
 8005cdc:	d8800517 	ldw	r2,20(sp)
 8005ce0:	d8c00b17 	ldw	r3,44(sp)
 8005ce4:	10bfffc4 	addi	r2,r2,-1
 8005ce8:	d8800515 	stw	r2,20(sp)
 8005cec:	183f761e 	bne	r3,zero,8005ac8 <__alt_data_end+0xfc005ac8>
 8005cf0:	d9000c17 	ldw	r4,48(sp)
 8005cf4:	0101730e 	bge	zero,r4,80062c4 <_dtoa_r+0x15cc>
 8005cf8:	d9000615 	stw	r4,24(sp)
 8005cfc:	003ed006 	br	8005840 <__alt_data_end+0xfc005840>
 8005d00:	00800084 	movi	r2,2
 8005d04:	3081861e 	bne	r6,r2,8006320 <_dtoa_r+0x1628>
 8005d08:	d8000b15 	stw	zero,44(sp)
 8005d0c:	003f3c06 	br	8005a00 <__alt_data_end+0xfc005a00>
 8005d10:	dc000917 	ldw	r16,36(sp)
 8005d14:	003e9206 	br	8005760 <__alt_data_end+0xfc005760>
 8005d18:	d9c00317 	ldw	r7,12(sp)
 8005d1c:	00800084 	movi	r2,2
 8005d20:	11fec50e 	bge	r2,r7,8005838 <__alt_data_end+0xfc005838>
 8005d24:	d9000617 	ldw	r4,24(sp)
 8005d28:	20013c1e 	bne	r4,zero,800621c <_dtoa_r+0x1524>
 8005d2c:	a80b883a 	mov	r5,r21
 8005d30:	000f883a 	mov	r7,zero
 8005d34:	01800144 	movi	r6,5
 8005d38:	e009883a 	mov	r4,fp
 8005d3c:	80084800 	call	8008480 <__multadd>
 8005d40:	100b883a 	mov	r5,r2
 8005d44:	8009883a 	mov	r4,r16
 8005d48:	102b883a 	mov	r21,r2
 8005d4c:	8008d340 	call	8008d34 <__mcmp>
 8005d50:	dc000915 	stw	r16,36(sp)
 8005d54:	00bf410e 	bge	zero,r2,8005a5c <__alt_data_end+0xfc005a5c>
 8005d58:	d9c00717 	ldw	r7,28(sp)
 8005d5c:	00800c44 	movi	r2,49
 8005d60:	38800005 	stb	r2,0(r7)
 8005d64:	d8800517 	ldw	r2,20(sp)
 8005d68:	3dc00044 	addi	r23,r7,1
 8005d6c:	10800044 	addi	r2,r2,1
 8005d70:	d8800515 	stw	r2,20(sp)
 8005d74:	003f3d06 	br	8005a6c <__alt_data_end+0xfc005a6c>
 8005d78:	d9800517 	ldw	r6,20(sp)
 8005d7c:	d9c00717 	ldw	r7,28(sp)
 8005d80:	00800c44 	movi	r2,49
 8005d84:	31800044 	addi	r6,r6,1
 8005d88:	d9800515 	stw	r6,20(sp)
 8005d8c:	38800005 	stb	r2,0(r7)
 8005d90:	003edf06 	br	8005910 <__alt_data_end+0xfc005910>
 8005d94:	d8000b15 	stw	zero,44(sp)
 8005d98:	003c9f06 	br	8005018 <__alt_data_end+0xfc005018>
 8005d9c:	903e7e1e 	bne	r18,zero,8005798 <__alt_data_end+0xfc005798>
 8005da0:	00800434 	movhi	r2,16
 8005da4:	10bfffc4 	addi	r2,r2,-1
 8005da8:	9884703a 	and	r2,r19,r2
 8005dac:	1000ea1e 	bne	r2,zero,8006158 <_dtoa_r+0x1460>
 8005db0:	9cdffc2c 	andhi	r19,r19,32752
 8005db4:	9800e826 	beq	r19,zero,8006158 <_dtoa_r+0x1460>
 8005db8:	d9c00817 	ldw	r7,32(sp)
 8005dbc:	b5800044 	addi	r22,r22,1
 8005dc0:	04c00044 	movi	r19,1
 8005dc4:	39c00044 	addi	r7,r7,1
 8005dc8:	d9c00815 	stw	r7,32(sp)
 8005dcc:	d8800d17 	ldw	r2,52(sp)
 8005dd0:	103e721e 	bne	r2,zero,800579c <__alt_data_end+0xfc00579c>
 8005dd4:	00800044 	movi	r2,1
 8005dd8:	003e7906 	br	80057c0 <__alt_data_end+0xfc0057c0>
 8005ddc:	8009883a 	mov	r4,r16
 8005de0:	800f1480 	call	800f148 <__floatsidf>
 8005de4:	d9800f17 	ldw	r6,60(sp)
 8005de8:	d9c01017 	ldw	r7,64(sp)
 8005dec:	1009883a 	mov	r4,r2
 8005df0:	180b883a 	mov	r5,r3
 8005df4:	800df600 	call	800df60 <__muldf3>
 8005df8:	000d883a 	mov	r6,zero
 8005dfc:	01d00734 	movhi	r7,16412
 8005e00:	1009883a 	mov	r4,r2
 8005e04:	180b883a 	mov	r5,r3
 8005e08:	800ca8c0 	call	800ca8c <__adddf3>
 8005e0c:	047f3034 	movhi	r17,64704
 8005e10:	1021883a 	mov	r16,r2
 8005e14:	1c63883a 	add	r17,r3,r17
 8005e18:	d9000f17 	ldw	r4,60(sp)
 8005e1c:	d9401017 	ldw	r5,64(sp)
 8005e20:	000d883a 	mov	r6,zero
 8005e24:	01d00534 	movhi	r7,16404
 8005e28:	800e7cc0 	call	800e7cc <__subdf3>
 8005e2c:	800d883a 	mov	r6,r16
 8005e30:	880f883a 	mov	r7,r17
 8005e34:	1009883a 	mov	r4,r2
 8005e38:	180b883a 	mov	r5,r3
 8005e3c:	102b883a 	mov	r21,r2
 8005e40:	1829883a 	mov	r20,r3
 8005e44:	800dd900 	call	800dd90 <__gedf2>
 8005e48:	00806c16 	blt	zero,r2,8005ffc <_dtoa_r+0x1304>
 8005e4c:	89e0003c 	xorhi	r7,r17,32768
 8005e50:	800d883a 	mov	r6,r16
 8005e54:	a809883a 	mov	r4,r21
 8005e58:	a00b883a 	mov	r5,r20
 8005e5c:	800de6c0 	call	800de6c <__ledf2>
 8005e60:	103d7e0e 	bge	r2,zero,800545c <__alt_data_end+0xfc00545c>
 8005e64:	002b883a 	mov	r21,zero
 8005e68:	0023883a 	mov	r17,zero
 8005e6c:	003efb06 	br	8005a5c <__alt_data_end+0xfc005a5c>
 8005e70:	d8800717 	ldw	r2,28(sp)
 8005e74:	003bd006 	br	8004db8 <__alt_data_end+0xfc004db8>
 8005e78:	d9000a17 	ldw	r4,40(sp)
 8005e7c:	d9800d17 	ldw	r6,52(sp)
 8005e80:	dd400a15 	stw	r21,40(sp)
 8005e84:	a905c83a 	sub	r2,r21,r4
 8005e88:	308d883a 	add	r6,r6,r2
 8005e8c:	d9800d15 	stw	r6,52(sp)
 8005e90:	002b883a 	mov	r21,zero
 8005e94:	003e0606 	br	80056b0 <__alt_data_end+0xfc0056b0>
 8005e98:	9023883a 	mov	r17,r18
 8005e9c:	9829883a 	mov	r20,r19
 8005ea0:	04000084 	movi	r16,2
 8005ea4:	003c9206 	br	80050f0 <__alt_data_end+0xfc0050f0>
 8005ea8:	04000044 	movi	r16,1
 8005eac:	dc000c15 	stw	r16,48(sp)
 8005eb0:	dc000615 	stw	r16,24(sp)
 8005eb4:	dc002215 	stw	r16,136(sp)
 8005eb8:	e0001115 	stw	zero,68(fp)
 8005ebc:	000b883a 	mov	r5,zero
 8005ec0:	003c6906 	br	8005068 <__alt_data_end+0xfc005068>
 8005ec4:	3021883a 	mov	r16,r6
 8005ec8:	003ffb06 	br	8005eb8 <__alt_data_end+0xfc005eb8>
 8005ecc:	1000021e 	bne	r2,zero,8005ed8 <_dtoa_r+0x11e0>
 8005ed0:	4200004c 	andi	r8,r8,1
 8005ed4:	403e7d1e 	bne	r8,zero,80058cc <__alt_data_end+0xfc0058cc>
 8005ed8:	01000c04 	movi	r4,48
 8005edc:	00000106 	br	8005ee4 <_dtoa_r+0x11ec>
 8005ee0:	102f883a 	mov	r23,r2
 8005ee4:	b8bfffc4 	addi	r2,r23,-1
 8005ee8:	10c00007 	ldb	r3,0(r2)
 8005eec:	193ffc26 	beq	r3,r4,8005ee0 <__alt_data_end+0xfc005ee0>
 8005ef0:	003e8706 	br	8005910 <__alt_data_end+0xfc005910>
 8005ef4:	d8800517 	ldw	r2,20(sp)
 8005ef8:	00a3c83a 	sub	r17,zero,r2
 8005efc:	8800a426 	beq	r17,zero,8006190 <_dtoa_r+0x1498>
 8005f00:	888003cc 	andi	r2,r17,15
 8005f04:	100490fa 	slli	r2,r2,3
 8005f08:	00c20074 	movhi	r3,2049
 8005f0c:	18c90304 	addi	r3,r3,9228
 8005f10:	1885883a 	add	r2,r3,r2
 8005f14:	11800017 	ldw	r6,0(r2)
 8005f18:	11c00117 	ldw	r7,4(r2)
 8005f1c:	9009883a 	mov	r4,r18
 8005f20:	980b883a 	mov	r5,r19
 8005f24:	8823d13a 	srai	r17,r17,4
 8005f28:	800df600 	call	800df60 <__muldf3>
 8005f2c:	d8800f15 	stw	r2,60(sp)
 8005f30:	d8c01015 	stw	r3,64(sp)
 8005f34:	8800e826 	beq	r17,zero,80062d8 <_dtoa_r+0x15e0>
 8005f38:	05020074 	movhi	r20,2049
 8005f3c:	a508f904 	addi	r20,r20,9188
 8005f40:	04000084 	movi	r16,2
 8005f44:	8980004c 	andi	r6,r17,1
 8005f48:	1009883a 	mov	r4,r2
 8005f4c:	8823d07a 	srai	r17,r17,1
 8005f50:	180b883a 	mov	r5,r3
 8005f54:	30000426 	beq	r6,zero,8005f68 <_dtoa_r+0x1270>
 8005f58:	a1800017 	ldw	r6,0(r20)
 8005f5c:	a1c00117 	ldw	r7,4(r20)
 8005f60:	84000044 	addi	r16,r16,1
 8005f64:	800df600 	call	800df60 <__muldf3>
 8005f68:	a5000204 	addi	r20,r20,8
 8005f6c:	883ff51e 	bne	r17,zero,8005f44 <__alt_data_end+0xfc005f44>
 8005f70:	d8800f15 	stw	r2,60(sp)
 8005f74:	d8c01015 	stw	r3,64(sp)
 8005f78:	003c7606 	br	8005154 <__alt_data_end+0xfc005154>
 8005f7c:	00c00c04 	movi	r3,48
 8005f80:	10c00005 	stb	r3,0(r2)
 8005f84:	d8c00517 	ldw	r3,20(sp)
 8005f88:	bd3fffc3 	ldbu	r20,-1(r23)
 8005f8c:	18c00044 	addi	r3,r3,1
 8005f90:	d8c00515 	stw	r3,20(sp)
 8005f94:	003db906 	br	800567c <__alt_data_end+0xfc00567c>
 8005f98:	89400117 	ldw	r5,4(r17)
 8005f9c:	e009883a 	mov	r4,fp
 8005fa0:	80083b00 	call	80083b0 <_Balloc>
 8005fa4:	89800417 	ldw	r6,16(r17)
 8005fa8:	89400304 	addi	r5,r17,12
 8005fac:	11000304 	addi	r4,r2,12
 8005fb0:	31800084 	addi	r6,r6,2
 8005fb4:	318d883a 	add	r6,r6,r6
 8005fb8:	318d883a 	add	r6,r6,r6
 8005fbc:	1027883a 	mov	r19,r2
 8005fc0:	8007fe40 	call	8007fe4 <memcpy>
 8005fc4:	01800044 	movi	r6,1
 8005fc8:	980b883a 	mov	r5,r19
 8005fcc:	e009883a 	mov	r4,fp
 8005fd0:	8008bec0 	call	8008bec <__lshift>
 8005fd4:	1029883a 	mov	r20,r2
 8005fd8:	003ecc06 	br	8005b0c <__alt_data_end+0xfc005b0c>
 8005fdc:	00800e44 	movi	r2,57
 8005fe0:	90809026 	beq	r18,r2,8006224 <_dtoa_r+0x152c>
 8005fe4:	92000044 	addi	r8,r18,1
 8005fe8:	003f1f06 	br	8005c68 <__alt_data_end+0xfc005c68>
 8005fec:	9011883a 	mov	r8,r18
 8005ff0:	8825883a 	mov	r18,r17
 8005ff4:	a023883a 	mov	r17,r20
 8005ff8:	003e2906 	br	80058a0 <__alt_data_end+0xfc0058a0>
 8005ffc:	002b883a 	mov	r21,zero
 8006000:	0023883a 	mov	r17,zero
 8006004:	003f5406 	br	8005d58 <__alt_data_end+0xfc005d58>
 8006008:	61bfffc4 	addi	r6,r12,-1
 800600c:	300490fa 	slli	r2,r6,3
 8006010:	00c20074 	movhi	r3,2049
 8006014:	18c90304 	addi	r3,r3,9228
 8006018:	1885883a 	add	r2,r3,r2
 800601c:	11000017 	ldw	r4,0(r2)
 8006020:	11400117 	ldw	r5,4(r2)
 8006024:	d8800717 	ldw	r2,28(sp)
 8006028:	880f883a 	mov	r7,r17
 800602c:	d9801215 	stw	r6,72(sp)
 8006030:	800d883a 	mov	r6,r16
 8006034:	db001615 	stw	r12,88(sp)
 8006038:	15c00044 	addi	r23,r2,1
 800603c:	800df600 	call	800df60 <__muldf3>
 8006040:	d9401017 	ldw	r5,64(sp)
 8006044:	d9000f17 	ldw	r4,60(sp)
 8006048:	d8c01515 	stw	r3,84(sp)
 800604c:	d8801415 	stw	r2,80(sp)
 8006050:	800f0c80 	call	800f0c8 <__fixdfsi>
 8006054:	1009883a 	mov	r4,r2
 8006058:	1021883a 	mov	r16,r2
 800605c:	800f1480 	call	800f148 <__floatsidf>
 8006060:	d9000f17 	ldw	r4,60(sp)
 8006064:	d9401017 	ldw	r5,64(sp)
 8006068:	100d883a 	mov	r6,r2
 800606c:	180f883a 	mov	r7,r3
 8006070:	800e7cc0 	call	800e7cc <__subdf3>
 8006074:	1829883a 	mov	r20,r3
 8006078:	d8c00717 	ldw	r3,28(sp)
 800607c:	84000c04 	addi	r16,r16,48
 8006080:	1023883a 	mov	r17,r2
 8006084:	1c000005 	stb	r16,0(r3)
 8006088:	db001617 	ldw	r12,88(sp)
 800608c:	00800044 	movi	r2,1
 8006090:	60802226 	beq	r12,r2,800611c <_dtoa_r+0x1424>
 8006094:	d9c00717 	ldw	r7,28(sp)
 8006098:	8805883a 	mov	r2,r17
 800609c:	b82b883a 	mov	r21,r23
 80060a0:	3b19883a 	add	r12,r7,r12
 80060a4:	6023883a 	mov	r17,r12
 80060a8:	a007883a 	mov	r3,r20
 80060ac:	dc800f15 	stw	r18,60(sp)
 80060b0:	000d883a 	mov	r6,zero
 80060b4:	01d00934 	movhi	r7,16420
 80060b8:	1009883a 	mov	r4,r2
 80060bc:	180b883a 	mov	r5,r3
 80060c0:	800df600 	call	800df60 <__muldf3>
 80060c4:	180b883a 	mov	r5,r3
 80060c8:	1009883a 	mov	r4,r2
 80060cc:	1829883a 	mov	r20,r3
 80060d0:	1025883a 	mov	r18,r2
 80060d4:	800f0c80 	call	800f0c8 <__fixdfsi>
 80060d8:	1009883a 	mov	r4,r2
 80060dc:	1021883a 	mov	r16,r2
 80060e0:	800f1480 	call	800f148 <__floatsidf>
 80060e4:	100d883a 	mov	r6,r2
 80060e8:	180f883a 	mov	r7,r3
 80060ec:	9009883a 	mov	r4,r18
 80060f0:	a00b883a 	mov	r5,r20
 80060f4:	84000c04 	addi	r16,r16,48
 80060f8:	800e7cc0 	call	800e7cc <__subdf3>
 80060fc:	ad400044 	addi	r21,r21,1
 8006100:	ac3fffc5 	stb	r16,-1(r21)
 8006104:	ac7fea1e 	bne	r21,r17,80060b0 <__alt_data_end+0xfc0060b0>
 8006108:	1023883a 	mov	r17,r2
 800610c:	d8801217 	ldw	r2,72(sp)
 8006110:	dc800f17 	ldw	r18,60(sp)
 8006114:	1829883a 	mov	r20,r3
 8006118:	b8af883a 	add	r23,r23,r2
 800611c:	d9001417 	ldw	r4,80(sp)
 8006120:	d9401517 	ldw	r5,84(sp)
 8006124:	000d883a 	mov	r6,zero
 8006128:	01cff834 	movhi	r7,16352
 800612c:	800ca8c0 	call	800ca8c <__adddf3>
 8006130:	880d883a 	mov	r6,r17
 8006134:	a00f883a 	mov	r7,r20
 8006138:	1009883a 	mov	r4,r2
 800613c:	180b883a 	mov	r5,r3
 8006140:	800de6c0 	call	800de6c <__ledf2>
 8006144:	10003e0e 	bge	r2,zero,8006240 <_dtoa_r+0x1548>
 8006148:	d9001317 	ldw	r4,76(sp)
 800614c:	bd3fffc3 	ldbu	r20,-1(r23)
 8006150:	d9000515 	stw	r4,20(sp)
 8006154:	003d3b06 	br	8005644 <__alt_data_end+0xfc005644>
 8006158:	0027883a 	mov	r19,zero
 800615c:	003f1b06 	br	8005dcc <__alt_data_end+0xfc005dcc>
 8006160:	d8800817 	ldw	r2,32(sp)
 8006164:	11e9c83a 	sub	r20,r2,r7
 8006168:	0005883a 	mov	r2,zero
 800616c:	003d5406 	br	80056c0 <__alt_data_end+0xfc0056c0>
 8006170:	00800044 	movi	r2,1
 8006174:	003dc706 	br	8005894 <__alt_data_end+0xfc005894>
 8006178:	d8c00217 	ldw	r3,8(sp)
 800617c:	00800d84 	movi	r2,54
 8006180:	dd400a17 	ldw	r21,40(sp)
 8006184:	10c5c83a 	sub	r2,r2,r3
 8006188:	dd000817 	ldw	r20,32(sp)
 800618c:	003d4c06 	br	80056c0 <__alt_data_end+0xfc0056c0>
 8006190:	dc800f15 	stw	r18,60(sp)
 8006194:	dcc01015 	stw	r19,64(sp)
 8006198:	04000084 	movi	r16,2
 800619c:	003bed06 	br	8005154 <__alt_data_end+0xfc005154>
 80061a0:	d9000617 	ldw	r4,24(sp)
 80061a4:	203f0d26 	beq	r4,zero,8005ddc <__alt_data_end+0xfc005ddc>
 80061a8:	d9800c17 	ldw	r6,48(sp)
 80061ac:	01bcab0e 	bge	zero,r6,800545c <__alt_data_end+0xfc00545c>
 80061b0:	d9401017 	ldw	r5,64(sp)
 80061b4:	d9000f17 	ldw	r4,60(sp)
 80061b8:	000d883a 	mov	r6,zero
 80061bc:	01d00934 	movhi	r7,16420
 80061c0:	800df600 	call	800df60 <__muldf3>
 80061c4:	81000044 	addi	r4,r16,1
 80061c8:	d8800f15 	stw	r2,60(sp)
 80061cc:	d8c01015 	stw	r3,64(sp)
 80061d0:	800f1480 	call	800f148 <__floatsidf>
 80061d4:	d9800f17 	ldw	r6,60(sp)
 80061d8:	d9c01017 	ldw	r7,64(sp)
 80061dc:	1009883a 	mov	r4,r2
 80061e0:	180b883a 	mov	r5,r3
 80061e4:	800df600 	call	800df60 <__muldf3>
 80061e8:	01d00734 	movhi	r7,16412
 80061ec:	000d883a 	mov	r6,zero
 80061f0:	1009883a 	mov	r4,r2
 80061f4:	180b883a 	mov	r5,r3
 80061f8:	800ca8c0 	call	800ca8c <__adddf3>
 80061fc:	d9c00517 	ldw	r7,20(sp)
 8006200:	047f3034 	movhi	r17,64704
 8006204:	1021883a 	mov	r16,r2
 8006208:	39ffffc4 	addi	r7,r7,-1
 800620c:	d9c01315 	stw	r7,76(sp)
 8006210:	1c63883a 	add	r17,r3,r17
 8006214:	db000c17 	ldw	r12,48(sp)
 8006218:	003bea06 	br	80051c4 <__alt_data_end+0xfc0051c4>
 800621c:	dc000915 	stw	r16,36(sp)
 8006220:	003e0e06 	br	8005a5c <__alt_data_end+0xfc005a5c>
 8006224:	01000e44 	movi	r4,57
 8006228:	8825883a 	mov	r18,r17
 800622c:	9dc00044 	addi	r23,r19,1
 8006230:	99000005 	stb	r4,0(r19)
 8006234:	a023883a 	mov	r17,r20
 8006238:	dc000915 	stw	r16,36(sp)
 800623c:	003da406 	br	80058d0 <__alt_data_end+0xfc0058d0>
 8006240:	d9801417 	ldw	r6,80(sp)
 8006244:	d9c01517 	ldw	r7,84(sp)
 8006248:	0009883a 	mov	r4,zero
 800624c:	014ff834 	movhi	r5,16352
 8006250:	800e7cc0 	call	800e7cc <__subdf3>
 8006254:	880d883a 	mov	r6,r17
 8006258:	a00f883a 	mov	r7,r20
 800625c:	1009883a 	mov	r4,r2
 8006260:	180b883a 	mov	r5,r3
 8006264:	800dd900 	call	800dd90 <__gedf2>
 8006268:	00bc7c0e 	bge	zero,r2,800545c <__alt_data_end+0xfc00545c>
 800626c:	01000c04 	movi	r4,48
 8006270:	00000106 	br	8006278 <_dtoa_r+0x1580>
 8006274:	102f883a 	mov	r23,r2
 8006278:	b8bfffc4 	addi	r2,r23,-1
 800627c:	10c00007 	ldb	r3,0(r2)
 8006280:	193ffc26 	beq	r3,r4,8006274 <__alt_data_end+0xfc006274>
 8006284:	d9801317 	ldw	r6,76(sp)
 8006288:	d9800515 	stw	r6,20(sp)
 800628c:	003c4406 	br	80053a0 <__alt_data_end+0xfc0053a0>
 8006290:	d9801317 	ldw	r6,76(sp)
 8006294:	d9800515 	stw	r6,20(sp)
 8006298:	003cea06 	br	8005644 <__alt_data_end+0xfc005644>
 800629c:	dd800f17 	ldw	r22,60(sp)
 80062a0:	dcc01017 	ldw	r19,64(sp)
 80062a4:	dc801217 	ldw	r18,72(sp)
 80062a8:	003c6c06 	br	800545c <__alt_data_end+0xfc00545c>
 80062ac:	903e031e 	bne	r18,zero,8005abc <__alt_data_end+0xfc005abc>
 80062b0:	003ebb06 	br	8005da0 <__alt_data_end+0xfc005da0>
 80062b4:	103e6c1e 	bne	r2,zero,8005c68 <__alt_data_end+0xfc005c68>
 80062b8:	4080004c 	andi	r2,r8,1
 80062bc:	103e6a26 	beq	r2,zero,8005c68 <__alt_data_end+0xfc005c68>
 80062c0:	003e6606 	br	8005c5c <__alt_data_end+0xfc005c5c>
 80062c4:	d8c00317 	ldw	r3,12(sp)
 80062c8:	00800084 	movi	r2,2
 80062cc:	10c02916 	blt	r2,r3,8006374 <_dtoa_r+0x167c>
 80062d0:	d9000c17 	ldw	r4,48(sp)
 80062d4:	003e8806 	br	8005cf8 <__alt_data_end+0xfc005cf8>
 80062d8:	04000084 	movi	r16,2
 80062dc:	003b9d06 	br	8005154 <__alt_data_end+0xfc005154>
 80062e0:	d9001317 	ldw	r4,76(sp)
 80062e4:	d9000515 	stw	r4,20(sp)
 80062e8:	003cd606 	br	8005644 <__alt_data_end+0xfc005644>
 80062ec:	d8801317 	ldw	r2,76(sp)
 80062f0:	d8800515 	stw	r2,20(sp)
 80062f4:	003c2a06 	br	80053a0 <__alt_data_end+0xfc0053a0>
 80062f8:	d9800317 	ldw	r6,12(sp)
 80062fc:	00800084 	movi	r2,2
 8006300:	11801516 	blt	r2,r6,8006358 <_dtoa_r+0x1660>
 8006304:	d9c00c17 	ldw	r7,48(sp)
 8006308:	d9c00615 	stw	r7,24(sp)
 800630c:	003df706 	br	8005aec <__alt_data_end+0xfc005aec>
 8006310:	193d3926 	beq	r3,r4,80057f8 <__alt_data_end+0xfc0057f8>
 8006314:	00c00f04 	movi	r3,60
 8006318:	1885c83a 	sub	r2,r3,r2
 800631c:	003ddf06 	br	8005a9c <__alt_data_end+0xfc005a9c>
 8006320:	e009883a 	mov	r4,fp
 8006324:	e0001115 	stw	zero,68(fp)
 8006328:	000b883a 	mov	r5,zero
 800632c:	80083b00 	call	80083b0 <_Balloc>
 8006330:	d8800715 	stw	r2,28(sp)
 8006334:	d8c00717 	ldw	r3,28(sp)
 8006338:	00bfffc4 	movi	r2,-1
 800633c:	01000044 	movi	r4,1
 8006340:	d8800c15 	stw	r2,48(sp)
 8006344:	e0c01015 	stw	r3,64(fp)
 8006348:	d9000b15 	stw	r4,44(sp)
 800634c:	d8800615 	stw	r2,24(sp)
 8006350:	d8002215 	stw	zero,136(sp)
 8006354:	003c4106 	br	800545c <__alt_data_end+0xfc00545c>
 8006358:	d8c00c17 	ldw	r3,48(sp)
 800635c:	d8c00615 	stw	r3,24(sp)
 8006360:	003e7006 	br	8005d24 <__alt_data_end+0xfc005d24>
 8006364:	04400044 	movi	r17,1
 8006368:	003b2006 	br	8004fec <__alt_data_end+0xfc004fec>
 800636c:	000b883a 	mov	r5,zero
 8006370:	003b3d06 	br	8005068 <__alt_data_end+0xfc005068>
 8006374:	d8800c17 	ldw	r2,48(sp)
 8006378:	d8800615 	stw	r2,24(sp)
 800637c:	003e6906 	br	8005d24 <__alt_data_end+0xfc005d24>

08006380 <__sflush_r>:
 8006380:	2880030b 	ldhu	r2,12(r5)
 8006384:	defffb04 	addi	sp,sp,-20
 8006388:	dcc00315 	stw	r19,12(sp)
 800638c:	dc400115 	stw	r17,4(sp)
 8006390:	dfc00415 	stw	ra,16(sp)
 8006394:	dc800215 	stw	r18,8(sp)
 8006398:	dc000015 	stw	r16,0(sp)
 800639c:	10c0020c 	andi	r3,r2,8
 80063a0:	2823883a 	mov	r17,r5
 80063a4:	2027883a 	mov	r19,r4
 80063a8:	1800311e 	bne	r3,zero,8006470 <__sflush_r+0xf0>
 80063ac:	28c00117 	ldw	r3,4(r5)
 80063b0:	10820014 	ori	r2,r2,2048
 80063b4:	2880030d 	sth	r2,12(r5)
 80063b8:	00c04b0e 	bge	zero,r3,80064e8 <__sflush_r+0x168>
 80063bc:	8a000a17 	ldw	r8,40(r17)
 80063c0:	40002326 	beq	r8,zero,8006450 <__sflush_r+0xd0>
 80063c4:	9c000017 	ldw	r16,0(r19)
 80063c8:	10c4000c 	andi	r3,r2,4096
 80063cc:	98000015 	stw	zero,0(r19)
 80063d0:	18004826 	beq	r3,zero,80064f4 <__sflush_r+0x174>
 80063d4:	89801417 	ldw	r6,80(r17)
 80063d8:	10c0010c 	andi	r3,r2,4
 80063dc:	18000626 	beq	r3,zero,80063f8 <__sflush_r+0x78>
 80063e0:	88c00117 	ldw	r3,4(r17)
 80063e4:	88800c17 	ldw	r2,48(r17)
 80063e8:	30cdc83a 	sub	r6,r6,r3
 80063ec:	10000226 	beq	r2,zero,80063f8 <__sflush_r+0x78>
 80063f0:	88800f17 	ldw	r2,60(r17)
 80063f4:	308dc83a 	sub	r6,r6,r2
 80063f8:	89400717 	ldw	r5,28(r17)
 80063fc:	000f883a 	mov	r7,zero
 8006400:	9809883a 	mov	r4,r19
 8006404:	403ee83a 	callr	r8
 8006408:	00ffffc4 	movi	r3,-1
 800640c:	10c04426 	beq	r2,r3,8006520 <__sflush_r+0x1a0>
 8006410:	88c0030b 	ldhu	r3,12(r17)
 8006414:	89000417 	ldw	r4,16(r17)
 8006418:	88000115 	stw	zero,4(r17)
 800641c:	197dffcc 	andi	r5,r3,63487
 8006420:	8940030d 	sth	r5,12(r17)
 8006424:	89000015 	stw	r4,0(r17)
 8006428:	18c4000c 	andi	r3,r3,4096
 800642c:	18002c1e 	bne	r3,zero,80064e0 <__sflush_r+0x160>
 8006430:	89400c17 	ldw	r5,48(r17)
 8006434:	9c000015 	stw	r16,0(r19)
 8006438:	28000526 	beq	r5,zero,8006450 <__sflush_r+0xd0>
 800643c:	88801004 	addi	r2,r17,64
 8006440:	28800226 	beq	r5,r2,800644c <__sflush_r+0xcc>
 8006444:	9809883a 	mov	r4,r19
 8006448:	8006afc0 	call	8006afc <_free_r>
 800644c:	88000c15 	stw	zero,48(r17)
 8006450:	0005883a 	mov	r2,zero
 8006454:	dfc00417 	ldw	ra,16(sp)
 8006458:	dcc00317 	ldw	r19,12(sp)
 800645c:	dc800217 	ldw	r18,8(sp)
 8006460:	dc400117 	ldw	r17,4(sp)
 8006464:	dc000017 	ldw	r16,0(sp)
 8006468:	dec00504 	addi	sp,sp,20
 800646c:	f800283a 	ret
 8006470:	2c800417 	ldw	r18,16(r5)
 8006474:	903ff626 	beq	r18,zero,8006450 <__alt_data_end+0xfc006450>
 8006478:	2c000017 	ldw	r16,0(r5)
 800647c:	108000cc 	andi	r2,r2,3
 8006480:	2c800015 	stw	r18,0(r5)
 8006484:	84a1c83a 	sub	r16,r16,r18
 8006488:	1000131e 	bne	r2,zero,80064d8 <__sflush_r+0x158>
 800648c:	28800517 	ldw	r2,20(r5)
 8006490:	88800215 	stw	r2,8(r17)
 8006494:	04000316 	blt	zero,r16,80064a4 <__sflush_r+0x124>
 8006498:	003fed06 	br	8006450 <__alt_data_end+0xfc006450>
 800649c:	90a5883a 	add	r18,r18,r2
 80064a0:	043feb0e 	bge	zero,r16,8006450 <__alt_data_end+0xfc006450>
 80064a4:	88800917 	ldw	r2,36(r17)
 80064a8:	89400717 	ldw	r5,28(r17)
 80064ac:	800f883a 	mov	r7,r16
 80064b0:	900d883a 	mov	r6,r18
 80064b4:	9809883a 	mov	r4,r19
 80064b8:	103ee83a 	callr	r2
 80064bc:	80a1c83a 	sub	r16,r16,r2
 80064c0:	00bff616 	blt	zero,r2,800649c <__alt_data_end+0xfc00649c>
 80064c4:	88c0030b 	ldhu	r3,12(r17)
 80064c8:	00bfffc4 	movi	r2,-1
 80064cc:	18c01014 	ori	r3,r3,64
 80064d0:	88c0030d 	sth	r3,12(r17)
 80064d4:	003fdf06 	br	8006454 <__alt_data_end+0xfc006454>
 80064d8:	0005883a 	mov	r2,zero
 80064dc:	003fec06 	br	8006490 <__alt_data_end+0xfc006490>
 80064e0:	88801415 	stw	r2,80(r17)
 80064e4:	003fd206 	br	8006430 <__alt_data_end+0xfc006430>
 80064e8:	28c00f17 	ldw	r3,60(r5)
 80064ec:	00ffb316 	blt	zero,r3,80063bc <__alt_data_end+0xfc0063bc>
 80064f0:	003fd706 	br	8006450 <__alt_data_end+0xfc006450>
 80064f4:	89400717 	ldw	r5,28(r17)
 80064f8:	000d883a 	mov	r6,zero
 80064fc:	01c00044 	movi	r7,1
 8006500:	9809883a 	mov	r4,r19
 8006504:	403ee83a 	callr	r8
 8006508:	100d883a 	mov	r6,r2
 800650c:	00bfffc4 	movi	r2,-1
 8006510:	30801426 	beq	r6,r2,8006564 <__sflush_r+0x1e4>
 8006514:	8880030b 	ldhu	r2,12(r17)
 8006518:	8a000a17 	ldw	r8,40(r17)
 800651c:	003fae06 	br	80063d8 <__alt_data_end+0xfc0063d8>
 8006520:	98c00017 	ldw	r3,0(r19)
 8006524:	183fba26 	beq	r3,zero,8006410 <__alt_data_end+0xfc006410>
 8006528:	01000744 	movi	r4,29
 800652c:	19000626 	beq	r3,r4,8006548 <__sflush_r+0x1c8>
 8006530:	01000584 	movi	r4,22
 8006534:	19000426 	beq	r3,r4,8006548 <__sflush_r+0x1c8>
 8006538:	88c0030b 	ldhu	r3,12(r17)
 800653c:	18c01014 	ori	r3,r3,64
 8006540:	88c0030d 	sth	r3,12(r17)
 8006544:	003fc306 	br	8006454 <__alt_data_end+0xfc006454>
 8006548:	8880030b 	ldhu	r2,12(r17)
 800654c:	88c00417 	ldw	r3,16(r17)
 8006550:	88000115 	stw	zero,4(r17)
 8006554:	10bdffcc 	andi	r2,r2,63487
 8006558:	8880030d 	sth	r2,12(r17)
 800655c:	88c00015 	stw	r3,0(r17)
 8006560:	003fb306 	br	8006430 <__alt_data_end+0xfc006430>
 8006564:	98800017 	ldw	r2,0(r19)
 8006568:	103fea26 	beq	r2,zero,8006514 <__alt_data_end+0xfc006514>
 800656c:	00c00744 	movi	r3,29
 8006570:	10c00226 	beq	r2,r3,800657c <__sflush_r+0x1fc>
 8006574:	00c00584 	movi	r3,22
 8006578:	10c0031e 	bne	r2,r3,8006588 <__sflush_r+0x208>
 800657c:	9c000015 	stw	r16,0(r19)
 8006580:	0005883a 	mov	r2,zero
 8006584:	003fb306 	br	8006454 <__alt_data_end+0xfc006454>
 8006588:	88c0030b 	ldhu	r3,12(r17)
 800658c:	3005883a 	mov	r2,r6
 8006590:	18c01014 	ori	r3,r3,64
 8006594:	88c0030d 	sth	r3,12(r17)
 8006598:	003fae06 	br	8006454 <__alt_data_end+0xfc006454>

0800659c <_fflush_r>:
 800659c:	defffd04 	addi	sp,sp,-12
 80065a0:	dc000115 	stw	r16,4(sp)
 80065a4:	dfc00215 	stw	ra,8(sp)
 80065a8:	2021883a 	mov	r16,r4
 80065ac:	20000226 	beq	r4,zero,80065b8 <_fflush_r+0x1c>
 80065b0:	20800e17 	ldw	r2,56(r4)
 80065b4:	10000c26 	beq	r2,zero,80065e8 <_fflush_r+0x4c>
 80065b8:	2880030f 	ldh	r2,12(r5)
 80065bc:	1000051e 	bne	r2,zero,80065d4 <_fflush_r+0x38>
 80065c0:	0005883a 	mov	r2,zero
 80065c4:	dfc00217 	ldw	ra,8(sp)
 80065c8:	dc000117 	ldw	r16,4(sp)
 80065cc:	dec00304 	addi	sp,sp,12
 80065d0:	f800283a 	ret
 80065d4:	8009883a 	mov	r4,r16
 80065d8:	dfc00217 	ldw	ra,8(sp)
 80065dc:	dc000117 	ldw	r16,4(sp)
 80065e0:	dec00304 	addi	sp,sp,12
 80065e4:	80063801 	jmpi	8006380 <__sflush_r>
 80065e8:	d9400015 	stw	r5,0(sp)
 80065ec:	80069880 	call	8006988 <__sinit>
 80065f0:	d9400017 	ldw	r5,0(sp)
 80065f4:	003ff006 	br	80065b8 <__alt_data_end+0xfc0065b8>

080065f8 <fflush>:
 80065f8:	20000526 	beq	r4,zero,8006610 <fflush+0x18>
 80065fc:	00820074 	movhi	r2,2049
 8006600:	10903604 	addi	r2,r2,16600
 8006604:	200b883a 	mov	r5,r4
 8006608:	11000017 	ldw	r4,0(r2)
 800660c:	800659c1 	jmpi	800659c <_fflush_r>
 8006610:	00820074 	movhi	r2,2049
 8006614:	10903504 	addi	r2,r2,16596
 8006618:	11000017 	ldw	r4,0(r2)
 800661c:	01420034 	movhi	r5,2048
 8006620:	29596704 	addi	r5,r5,26012
 8006624:	80073981 	jmpi	8007398 <_fwalk_reent>

08006628 <__fp_unlock>:
 8006628:	0005883a 	mov	r2,zero
 800662c:	f800283a 	ret

08006630 <_cleanup_r>:
 8006630:	01420074 	movhi	r5,2049
 8006634:	296d4d04 	addi	r5,r5,-19148
 8006638:	80073981 	jmpi	8007398 <_fwalk_reent>

0800663c <__sinit.part.1>:
 800663c:	defff704 	addi	sp,sp,-36
 8006640:	00c20034 	movhi	r3,2048
 8006644:	dfc00815 	stw	ra,32(sp)
 8006648:	ddc00715 	stw	r23,28(sp)
 800664c:	dd800615 	stw	r22,24(sp)
 8006650:	dd400515 	stw	r21,20(sp)
 8006654:	dd000415 	stw	r20,16(sp)
 8006658:	dcc00315 	stw	r19,12(sp)
 800665c:	dc800215 	stw	r18,8(sp)
 8006660:	dc400115 	stw	r17,4(sp)
 8006664:	dc000015 	stw	r16,0(sp)
 8006668:	18d98c04 	addi	r3,r3,26160
 800666c:	24000117 	ldw	r16,4(r4)
 8006670:	20c00f15 	stw	r3,60(r4)
 8006674:	2080bb04 	addi	r2,r4,748
 8006678:	00c000c4 	movi	r3,3
 800667c:	20c0b915 	stw	r3,740(r4)
 8006680:	2080ba15 	stw	r2,744(r4)
 8006684:	2000b815 	stw	zero,736(r4)
 8006688:	05c00204 	movi	r23,8
 800668c:	00800104 	movi	r2,4
 8006690:	2025883a 	mov	r18,r4
 8006694:	b80d883a 	mov	r6,r23
 8006698:	81001704 	addi	r4,r16,92
 800669c:	000b883a 	mov	r5,zero
 80066a0:	80000015 	stw	zero,0(r16)
 80066a4:	80000115 	stw	zero,4(r16)
 80066a8:	80000215 	stw	zero,8(r16)
 80066ac:	8080030d 	sth	r2,12(r16)
 80066b0:	80001915 	stw	zero,100(r16)
 80066b4:	8000038d 	sth	zero,14(r16)
 80066b8:	80000415 	stw	zero,16(r16)
 80066bc:	80000515 	stw	zero,20(r16)
 80066c0:	80000615 	stw	zero,24(r16)
 80066c4:	80082880 	call	8008288 <memset>
 80066c8:	05820074 	movhi	r22,2049
 80066cc:	94400217 	ldw	r17,8(r18)
 80066d0:	05420074 	movhi	r21,2049
 80066d4:	05020074 	movhi	r20,2049
 80066d8:	04c20074 	movhi	r19,2049
 80066dc:	b5a6a504 	addi	r22,r22,-25964
 80066e0:	ad66bc04 	addi	r21,r21,-25872
 80066e4:	a526db04 	addi	r20,r20,-25748
 80066e8:	9ce6f204 	addi	r19,r19,-25656
 80066ec:	85800815 	stw	r22,32(r16)
 80066f0:	85400915 	stw	r21,36(r16)
 80066f4:	85000a15 	stw	r20,40(r16)
 80066f8:	84c00b15 	stw	r19,44(r16)
 80066fc:	84000715 	stw	r16,28(r16)
 8006700:	00800284 	movi	r2,10
 8006704:	8880030d 	sth	r2,12(r17)
 8006708:	00800044 	movi	r2,1
 800670c:	b80d883a 	mov	r6,r23
 8006710:	89001704 	addi	r4,r17,92
 8006714:	000b883a 	mov	r5,zero
 8006718:	88000015 	stw	zero,0(r17)
 800671c:	88000115 	stw	zero,4(r17)
 8006720:	88000215 	stw	zero,8(r17)
 8006724:	88001915 	stw	zero,100(r17)
 8006728:	8880038d 	sth	r2,14(r17)
 800672c:	88000415 	stw	zero,16(r17)
 8006730:	88000515 	stw	zero,20(r17)
 8006734:	88000615 	stw	zero,24(r17)
 8006738:	80082880 	call	8008288 <memset>
 800673c:	94000317 	ldw	r16,12(r18)
 8006740:	00800484 	movi	r2,18
 8006744:	8c400715 	stw	r17,28(r17)
 8006748:	8d800815 	stw	r22,32(r17)
 800674c:	8d400915 	stw	r21,36(r17)
 8006750:	8d000a15 	stw	r20,40(r17)
 8006754:	8cc00b15 	stw	r19,44(r17)
 8006758:	8080030d 	sth	r2,12(r16)
 800675c:	00800084 	movi	r2,2
 8006760:	80000015 	stw	zero,0(r16)
 8006764:	80000115 	stw	zero,4(r16)
 8006768:	80000215 	stw	zero,8(r16)
 800676c:	80001915 	stw	zero,100(r16)
 8006770:	8080038d 	sth	r2,14(r16)
 8006774:	80000415 	stw	zero,16(r16)
 8006778:	80000515 	stw	zero,20(r16)
 800677c:	80000615 	stw	zero,24(r16)
 8006780:	b80d883a 	mov	r6,r23
 8006784:	000b883a 	mov	r5,zero
 8006788:	81001704 	addi	r4,r16,92
 800678c:	80082880 	call	8008288 <memset>
 8006790:	00800044 	movi	r2,1
 8006794:	84000715 	stw	r16,28(r16)
 8006798:	85800815 	stw	r22,32(r16)
 800679c:	85400915 	stw	r21,36(r16)
 80067a0:	85000a15 	stw	r20,40(r16)
 80067a4:	84c00b15 	stw	r19,44(r16)
 80067a8:	90800e15 	stw	r2,56(r18)
 80067ac:	dfc00817 	ldw	ra,32(sp)
 80067b0:	ddc00717 	ldw	r23,28(sp)
 80067b4:	dd800617 	ldw	r22,24(sp)
 80067b8:	dd400517 	ldw	r21,20(sp)
 80067bc:	dd000417 	ldw	r20,16(sp)
 80067c0:	dcc00317 	ldw	r19,12(sp)
 80067c4:	dc800217 	ldw	r18,8(sp)
 80067c8:	dc400117 	ldw	r17,4(sp)
 80067cc:	dc000017 	ldw	r16,0(sp)
 80067d0:	dec00904 	addi	sp,sp,36
 80067d4:	f800283a 	ret

080067d8 <__fp_lock>:
 80067d8:	0005883a 	mov	r2,zero
 80067dc:	f800283a 	ret

080067e0 <__sfmoreglue>:
 80067e0:	defffc04 	addi	sp,sp,-16
 80067e4:	dc800215 	stw	r18,8(sp)
 80067e8:	2825883a 	mov	r18,r5
 80067ec:	dc000015 	stw	r16,0(sp)
 80067f0:	01401a04 	movi	r5,104
 80067f4:	2021883a 	mov	r16,r4
 80067f8:	913fffc4 	addi	r4,r18,-1
 80067fc:	dfc00315 	stw	ra,12(sp)
 8006800:	dc400115 	stw	r17,4(sp)
 8006804:	800ca640 	call	800ca64 <__mulsi3>
 8006808:	8009883a 	mov	r4,r16
 800680c:	11401d04 	addi	r5,r2,116
 8006810:	1023883a 	mov	r17,r2
 8006814:	80076f40 	call	80076f4 <_malloc_r>
 8006818:	1021883a 	mov	r16,r2
 800681c:	10000726 	beq	r2,zero,800683c <__sfmoreglue+0x5c>
 8006820:	11000304 	addi	r4,r2,12
 8006824:	10000015 	stw	zero,0(r2)
 8006828:	14800115 	stw	r18,4(r2)
 800682c:	11000215 	stw	r4,8(r2)
 8006830:	89801a04 	addi	r6,r17,104
 8006834:	000b883a 	mov	r5,zero
 8006838:	80082880 	call	8008288 <memset>
 800683c:	8005883a 	mov	r2,r16
 8006840:	dfc00317 	ldw	ra,12(sp)
 8006844:	dc800217 	ldw	r18,8(sp)
 8006848:	dc400117 	ldw	r17,4(sp)
 800684c:	dc000017 	ldw	r16,0(sp)
 8006850:	dec00404 	addi	sp,sp,16
 8006854:	f800283a 	ret

08006858 <__sfp>:
 8006858:	defffb04 	addi	sp,sp,-20
 800685c:	dc000015 	stw	r16,0(sp)
 8006860:	04020074 	movhi	r16,2049
 8006864:	84103504 	addi	r16,r16,16596
 8006868:	dcc00315 	stw	r19,12(sp)
 800686c:	2027883a 	mov	r19,r4
 8006870:	81000017 	ldw	r4,0(r16)
 8006874:	dfc00415 	stw	ra,16(sp)
 8006878:	dc800215 	stw	r18,8(sp)
 800687c:	20800e17 	ldw	r2,56(r4)
 8006880:	dc400115 	stw	r17,4(sp)
 8006884:	1000021e 	bne	r2,zero,8006890 <__sfp+0x38>
 8006888:	800663c0 	call	800663c <__sinit.part.1>
 800688c:	81000017 	ldw	r4,0(r16)
 8006890:	2480b804 	addi	r18,r4,736
 8006894:	047fffc4 	movi	r17,-1
 8006898:	91000117 	ldw	r4,4(r18)
 800689c:	94000217 	ldw	r16,8(r18)
 80068a0:	213fffc4 	addi	r4,r4,-1
 80068a4:	20000a16 	blt	r4,zero,80068d0 <__sfp+0x78>
 80068a8:	8080030f 	ldh	r2,12(r16)
 80068ac:	10000c26 	beq	r2,zero,80068e0 <__sfp+0x88>
 80068b0:	80c01d04 	addi	r3,r16,116
 80068b4:	00000206 	br	80068c0 <__sfp+0x68>
 80068b8:	18bfe60f 	ldh	r2,-104(r3)
 80068bc:	10000826 	beq	r2,zero,80068e0 <__sfp+0x88>
 80068c0:	213fffc4 	addi	r4,r4,-1
 80068c4:	1c3ffd04 	addi	r16,r3,-12
 80068c8:	18c01a04 	addi	r3,r3,104
 80068cc:	247ffa1e 	bne	r4,r17,80068b8 <__alt_data_end+0xfc0068b8>
 80068d0:	90800017 	ldw	r2,0(r18)
 80068d4:	10001d26 	beq	r2,zero,800694c <__sfp+0xf4>
 80068d8:	1025883a 	mov	r18,r2
 80068dc:	003fee06 	br	8006898 <__alt_data_end+0xfc006898>
 80068e0:	00bfffc4 	movi	r2,-1
 80068e4:	8080038d 	sth	r2,14(r16)
 80068e8:	00800044 	movi	r2,1
 80068ec:	8080030d 	sth	r2,12(r16)
 80068f0:	80001915 	stw	zero,100(r16)
 80068f4:	80000015 	stw	zero,0(r16)
 80068f8:	80000215 	stw	zero,8(r16)
 80068fc:	80000115 	stw	zero,4(r16)
 8006900:	80000415 	stw	zero,16(r16)
 8006904:	80000515 	stw	zero,20(r16)
 8006908:	80000615 	stw	zero,24(r16)
 800690c:	01800204 	movi	r6,8
 8006910:	000b883a 	mov	r5,zero
 8006914:	81001704 	addi	r4,r16,92
 8006918:	80082880 	call	8008288 <memset>
 800691c:	8005883a 	mov	r2,r16
 8006920:	80000c15 	stw	zero,48(r16)
 8006924:	80000d15 	stw	zero,52(r16)
 8006928:	80001115 	stw	zero,68(r16)
 800692c:	80001215 	stw	zero,72(r16)
 8006930:	dfc00417 	ldw	ra,16(sp)
 8006934:	dcc00317 	ldw	r19,12(sp)
 8006938:	dc800217 	ldw	r18,8(sp)
 800693c:	dc400117 	ldw	r17,4(sp)
 8006940:	dc000017 	ldw	r16,0(sp)
 8006944:	dec00504 	addi	sp,sp,20
 8006948:	f800283a 	ret
 800694c:	01400104 	movi	r5,4
 8006950:	9809883a 	mov	r4,r19
 8006954:	80067e00 	call	80067e0 <__sfmoreglue>
 8006958:	90800015 	stw	r2,0(r18)
 800695c:	103fde1e 	bne	r2,zero,80068d8 <__alt_data_end+0xfc0068d8>
 8006960:	00800304 	movi	r2,12
 8006964:	98800015 	stw	r2,0(r19)
 8006968:	0005883a 	mov	r2,zero
 800696c:	003ff006 	br	8006930 <__alt_data_end+0xfc006930>

08006970 <_cleanup>:
 8006970:	00820074 	movhi	r2,2049
 8006974:	10903504 	addi	r2,r2,16596
 8006978:	11000017 	ldw	r4,0(r2)
 800697c:	01420074 	movhi	r5,2049
 8006980:	296d4d04 	addi	r5,r5,-19148
 8006984:	80073981 	jmpi	8007398 <_fwalk_reent>

08006988 <__sinit>:
 8006988:	20800e17 	ldw	r2,56(r4)
 800698c:	10000126 	beq	r2,zero,8006994 <__sinit+0xc>
 8006990:	f800283a 	ret
 8006994:	800663c1 	jmpi	800663c <__sinit.part.1>

08006998 <__sfp_lock_acquire>:
 8006998:	f800283a 	ret

0800699c <__sfp_lock_release>:
 800699c:	f800283a 	ret

080069a0 <__sinit_lock_acquire>:
 80069a0:	f800283a 	ret

080069a4 <__sinit_lock_release>:
 80069a4:	f800283a 	ret

080069a8 <__fp_lock_all>:
 80069a8:	00820074 	movhi	r2,2049
 80069ac:	10903604 	addi	r2,r2,16600
 80069b0:	11000017 	ldw	r4,0(r2)
 80069b4:	01420034 	movhi	r5,2048
 80069b8:	2959f604 	addi	r5,r5,26584
 80069bc:	80072d41 	jmpi	80072d4 <_fwalk>

080069c0 <__fp_unlock_all>:
 80069c0:	00820074 	movhi	r2,2049
 80069c4:	10903604 	addi	r2,r2,16600
 80069c8:	11000017 	ldw	r4,0(r2)
 80069cc:	01420034 	movhi	r5,2048
 80069d0:	29598a04 	addi	r5,r5,26152
 80069d4:	80072d41 	jmpi	80072d4 <_fwalk>

080069d8 <_malloc_trim_r>:
 80069d8:	defffb04 	addi	sp,sp,-20
 80069dc:	dcc00315 	stw	r19,12(sp)
 80069e0:	04c20074 	movhi	r19,2049
 80069e4:	dc800215 	stw	r18,8(sp)
 80069e8:	dc400115 	stw	r17,4(sp)
 80069ec:	dc000015 	stw	r16,0(sp)
 80069f0:	dfc00415 	stw	ra,16(sp)
 80069f4:	2821883a 	mov	r16,r5
 80069f8:	9ccab104 	addi	r19,r19,10948
 80069fc:	2025883a 	mov	r18,r4
 8006a00:	800f8cc0 	call	800f8cc <__malloc_lock>
 8006a04:	98800217 	ldw	r2,8(r19)
 8006a08:	14400117 	ldw	r17,4(r2)
 8006a0c:	00bfff04 	movi	r2,-4
 8006a10:	88a2703a 	and	r17,r17,r2
 8006a14:	8c21c83a 	sub	r16,r17,r16
 8006a18:	8403fbc4 	addi	r16,r16,4079
 8006a1c:	8020d33a 	srli	r16,r16,12
 8006a20:	0083ffc4 	movi	r2,4095
 8006a24:	843fffc4 	addi	r16,r16,-1
 8006a28:	8020933a 	slli	r16,r16,12
 8006a2c:	1400060e 	bge	r2,r16,8006a48 <_malloc_trim_r+0x70>
 8006a30:	000b883a 	mov	r5,zero
 8006a34:	9009883a 	mov	r4,r18
 8006a38:	8009a400 	call	8009a40 <_sbrk_r>
 8006a3c:	98c00217 	ldw	r3,8(r19)
 8006a40:	1c47883a 	add	r3,r3,r17
 8006a44:	10c00a26 	beq	r2,r3,8006a70 <_malloc_trim_r+0x98>
 8006a48:	9009883a 	mov	r4,r18
 8006a4c:	800f8f00 	call	800f8f0 <__malloc_unlock>
 8006a50:	0005883a 	mov	r2,zero
 8006a54:	dfc00417 	ldw	ra,16(sp)
 8006a58:	dcc00317 	ldw	r19,12(sp)
 8006a5c:	dc800217 	ldw	r18,8(sp)
 8006a60:	dc400117 	ldw	r17,4(sp)
 8006a64:	dc000017 	ldw	r16,0(sp)
 8006a68:	dec00504 	addi	sp,sp,20
 8006a6c:	f800283a 	ret
 8006a70:	040bc83a 	sub	r5,zero,r16
 8006a74:	9009883a 	mov	r4,r18
 8006a78:	8009a400 	call	8009a40 <_sbrk_r>
 8006a7c:	00ffffc4 	movi	r3,-1
 8006a80:	10c00d26 	beq	r2,r3,8006ab8 <_malloc_trim_r+0xe0>
 8006a84:	00c20074 	movhi	r3,2049
 8006a88:	18d70f04 	addi	r3,r3,23612
 8006a8c:	18800017 	ldw	r2,0(r3)
 8006a90:	99000217 	ldw	r4,8(r19)
 8006a94:	8c23c83a 	sub	r17,r17,r16
 8006a98:	8c400054 	ori	r17,r17,1
 8006a9c:	1421c83a 	sub	r16,r2,r16
 8006aa0:	24400115 	stw	r17,4(r4)
 8006aa4:	9009883a 	mov	r4,r18
 8006aa8:	1c000015 	stw	r16,0(r3)
 8006aac:	800f8f00 	call	800f8f0 <__malloc_unlock>
 8006ab0:	00800044 	movi	r2,1
 8006ab4:	003fe706 	br	8006a54 <__alt_data_end+0xfc006a54>
 8006ab8:	000b883a 	mov	r5,zero
 8006abc:	9009883a 	mov	r4,r18
 8006ac0:	8009a400 	call	8009a40 <_sbrk_r>
 8006ac4:	99000217 	ldw	r4,8(r19)
 8006ac8:	014003c4 	movi	r5,15
 8006acc:	1107c83a 	sub	r3,r2,r4
 8006ad0:	28ffdd0e 	bge	r5,r3,8006a48 <__alt_data_end+0xfc006a48>
 8006ad4:	01420074 	movhi	r5,2049
 8006ad8:	29503804 	addi	r5,r5,16608
 8006adc:	29400017 	ldw	r5,0(r5)
 8006ae0:	18c00054 	ori	r3,r3,1
 8006ae4:	20c00115 	stw	r3,4(r4)
 8006ae8:	00c20074 	movhi	r3,2049
 8006aec:	1145c83a 	sub	r2,r2,r5
 8006af0:	18d70f04 	addi	r3,r3,23612
 8006af4:	18800015 	stw	r2,0(r3)
 8006af8:	003fd306 	br	8006a48 <__alt_data_end+0xfc006a48>

08006afc <_free_r>:
 8006afc:	28004126 	beq	r5,zero,8006c04 <_free_r+0x108>
 8006b00:	defffd04 	addi	sp,sp,-12
 8006b04:	dc400115 	stw	r17,4(sp)
 8006b08:	dc000015 	stw	r16,0(sp)
 8006b0c:	2023883a 	mov	r17,r4
 8006b10:	2821883a 	mov	r16,r5
 8006b14:	dfc00215 	stw	ra,8(sp)
 8006b18:	800f8cc0 	call	800f8cc <__malloc_lock>
 8006b1c:	81ffff17 	ldw	r7,-4(r16)
 8006b20:	00bfff84 	movi	r2,-2
 8006b24:	01020074 	movhi	r4,2049
 8006b28:	81bffe04 	addi	r6,r16,-8
 8006b2c:	3884703a 	and	r2,r7,r2
 8006b30:	210ab104 	addi	r4,r4,10948
 8006b34:	308b883a 	add	r5,r6,r2
 8006b38:	2a400117 	ldw	r9,4(r5)
 8006b3c:	22000217 	ldw	r8,8(r4)
 8006b40:	00ffff04 	movi	r3,-4
 8006b44:	48c6703a 	and	r3,r9,r3
 8006b48:	2a005726 	beq	r5,r8,8006ca8 <_free_r+0x1ac>
 8006b4c:	28c00115 	stw	r3,4(r5)
 8006b50:	39c0004c 	andi	r7,r7,1
 8006b54:	3800091e 	bne	r7,zero,8006b7c <_free_r+0x80>
 8006b58:	823ffe17 	ldw	r8,-8(r16)
 8006b5c:	22400204 	addi	r9,r4,8
 8006b60:	320dc83a 	sub	r6,r6,r8
 8006b64:	31c00217 	ldw	r7,8(r6)
 8006b68:	1205883a 	add	r2,r2,r8
 8006b6c:	3a406526 	beq	r7,r9,8006d04 <_free_r+0x208>
 8006b70:	32000317 	ldw	r8,12(r6)
 8006b74:	3a000315 	stw	r8,12(r7)
 8006b78:	41c00215 	stw	r7,8(r8)
 8006b7c:	28cf883a 	add	r7,r5,r3
 8006b80:	39c00117 	ldw	r7,4(r7)
 8006b84:	39c0004c 	andi	r7,r7,1
 8006b88:	38003a26 	beq	r7,zero,8006c74 <_free_r+0x178>
 8006b8c:	10c00054 	ori	r3,r2,1
 8006b90:	30c00115 	stw	r3,4(r6)
 8006b94:	3087883a 	add	r3,r6,r2
 8006b98:	18800015 	stw	r2,0(r3)
 8006b9c:	00c07fc4 	movi	r3,511
 8006ba0:	18801936 	bltu	r3,r2,8006c08 <_free_r+0x10c>
 8006ba4:	1004d0fa 	srli	r2,r2,3
 8006ba8:	01c00044 	movi	r7,1
 8006bac:	21400117 	ldw	r5,4(r4)
 8006bb0:	10c00044 	addi	r3,r2,1
 8006bb4:	18c7883a 	add	r3,r3,r3
 8006bb8:	1005d0ba 	srai	r2,r2,2
 8006bbc:	18c7883a 	add	r3,r3,r3
 8006bc0:	18c7883a 	add	r3,r3,r3
 8006bc4:	1907883a 	add	r3,r3,r4
 8006bc8:	3884983a 	sll	r2,r7,r2
 8006bcc:	19c00017 	ldw	r7,0(r3)
 8006bd0:	1a3ffe04 	addi	r8,r3,-8
 8006bd4:	1144b03a 	or	r2,r2,r5
 8006bd8:	32000315 	stw	r8,12(r6)
 8006bdc:	31c00215 	stw	r7,8(r6)
 8006be0:	20800115 	stw	r2,4(r4)
 8006be4:	19800015 	stw	r6,0(r3)
 8006be8:	39800315 	stw	r6,12(r7)
 8006bec:	8809883a 	mov	r4,r17
 8006bf0:	dfc00217 	ldw	ra,8(sp)
 8006bf4:	dc400117 	ldw	r17,4(sp)
 8006bf8:	dc000017 	ldw	r16,0(sp)
 8006bfc:	dec00304 	addi	sp,sp,12
 8006c00:	800f8f01 	jmpi	800f8f0 <__malloc_unlock>
 8006c04:	f800283a 	ret
 8006c08:	100ad27a 	srli	r5,r2,9
 8006c0c:	00c00104 	movi	r3,4
 8006c10:	19404a36 	bltu	r3,r5,8006d3c <_free_r+0x240>
 8006c14:	100ad1ba 	srli	r5,r2,6
 8006c18:	28c00e44 	addi	r3,r5,57
 8006c1c:	18c7883a 	add	r3,r3,r3
 8006c20:	29400e04 	addi	r5,r5,56
 8006c24:	18c7883a 	add	r3,r3,r3
 8006c28:	18c7883a 	add	r3,r3,r3
 8006c2c:	1909883a 	add	r4,r3,r4
 8006c30:	20c00017 	ldw	r3,0(r4)
 8006c34:	01c20074 	movhi	r7,2049
 8006c38:	213ffe04 	addi	r4,r4,-8
 8006c3c:	39cab104 	addi	r7,r7,10948
 8006c40:	20c04426 	beq	r4,r3,8006d54 <_free_r+0x258>
 8006c44:	01ffff04 	movi	r7,-4
 8006c48:	19400117 	ldw	r5,4(r3)
 8006c4c:	29ca703a 	and	r5,r5,r7
 8006c50:	1140022e 	bgeu	r2,r5,8006c5c <_free_r+0x160>
 8006c54:	18c00217 	ldw	r3,8(r3)
 8006c58:	20fffb1e 	bne	r4,r3,8006c48 <__alt_data_end+0xfc006c48>
 8006c5c:	19000317 	ldw	r4,12(r3)
 8006c60:	31000315 	stw	r4,12(r6)
 8006c64:	30c00215 	stw	r3,8(r6)
 8006c68:	21800215 	stw	r6,8(r4)
 8006c6c:	19800315 	stw	r6,12(r3)
 8006c70:	003fde06 	br	8006bec <__alt_data_end+0xfc006bec>
 8006c74:	29c00217 	ldw	r7,8(r5)
 8006c78:	10c5883a 	add	r2,r2,r3
 8006c7c:	00c20074 	movhi	r3,2049
 8006c80:	18cab304 	addi	r3,r3,10956
 8006c84:	38c03b26 	beq	r7,r3,8006d74 <_free_r+0x278>
 8006c88:	2a000317 	ldw	r8,12(r5)
 8006c8c:	11400054 	ori	r5,r2,1
 8006c90:	3087883a 	add	r3,r6,r2
 8006c94:	3a000315 	stw	r8,12(r7)
 8006c98:	41c00215 	stw	r7,8(r8)
 8006c9c:	31400115 	stw	r5,4(r6)
 8006ca0:	18800015 	stw	r2,0(r3)
 8006ca4:	003fbd06 	br	8006b9c <__alt_data_end+0xfc006b9c>
 8006ca8:	39c0004c 	andi	r7,r7,1
 8006cac:	10c5883a 	add	r2,r2,r3
 8006cb0:	3800071e 	bne	r7,zero,8006cd0 <_free_r+0x1d4>
 8006cb4:	81fffe17 	ldw	r7,-8(r16)
 8006cb8:	31cdc83a 	sub	r6,r6,r7
 8006cbc:	30c00317 	ldw	r3,12(r6)
 8006cc0:	31400217 	ldw	r5,8(r6)
 8006cc4:	11c5883a 	add	r2,r2,r7
 8006cc8:	28c00315 	stw	r3,12(r5)
 8006ccc:	19400215 	stw	r5,8(r3)
 8006cd0:	10c00054 	ori	r3,r2,1
 8006cd4:	30c00115 	stw	r3,4(r6)
 8006cd8:	00c20074 	movhi	r3,2049
 8006cdc:	18d03904 	addi	r3,r3,16612
 8006ce0:	18c00017 	ldw	r3,0(r3)
 8006ce4:	21800215 	stw	r6,8(r4)
 8006ce8:	10ffc036 	bltu	r2,r3,8006bec <__alt_data_end+0xfc006bec>
 8006cec:	00820074 	movhi	r2,2049
 8006cf0:	10970604 	addi	r2,r2,23576
 8006cf4:	11400017 	ldw	r5,0(r2)
 8006cf8:	8809883a 	mov	r4,r17
 8006cfc:	80069d80 	call	80069d8 <_malloc_trim_r>
 8006d00:	003fba06 	br	8006bec <__alt_data_end+0xfc006bec>
 8006d04:	28c9883a 	add	r4,r5,r3
 8006d08:	21000117 	ldw	r4,4(r4)
 8006d0c:	2100004c 	andi	r4,r4,1
 8006d10:	2000391e 	bne	r4,zero,8006df8 <_free_r+0x2fc>
 8006d14:	29c00217 	ldw	r7,8(r5)
 8006d18:	29000317 	ldw	r4,12(r5)
 8006d1c:	1885883a 	add	r2,r3,r2
 8006d20:	10c00054 	ori	r3,r2,1
 8006d24:	39000315 	stw	r4,12(r7)
 8006d28:	21c00215 	stw	r7,8(r4)
 8006d2c:	30c00115 	stw	r3,4(r6)
 8006d30:	308d883a 	add	r6,r6,r2
 8006d34:	30800015 	stw	r2,0(r6)
 8006d38:	003fac06 	br	8006bec <__alt_data_end+0xfc006bec>
 8006d3c:	00c00504 	movi	r3,20
 8006d40:	19401536 	bltu	r3,r5,8006d98 <_free_r+0x29c>
 8006d44:	28c01704 	addi	r3,r5,92
 8006d48:	18c7883a 	add	r3,r3,r3
 8006d4c:	294016c4 	addi	r5,r5,91
 8006d50:	003fb406 	br	8006c24 <__alt_data_end+0xfc006c24>
 8006d54:	280bd0ba 	srai	r5,r5,2
 8006d58:	00c00044 	movi	r3,1
 8006d5c:	38800117 	ldw	r2,4(r7)
 8006d60:	194a983a 	sll	r5,r3,r5
 8006d64:	2007883a 	mov	r3,r4
 8006d68:	2884b03a 	or	r2,r5,r2
 8006d6c:	38800115 	stw	r2,4(r7)
 8006d70:	003fbb06 	br	8006c60 <__alt_data_end+0xfc006c60>
 8006d74:	21800515 	stw	r6,20(r4)
 8006d78:	21800415 	stw	r6,16(r4)
 8006d7c:	10c00054 	ori	r3,r2,1
 8006d80:	31c00315 	stw	r7,12(r6)
 8006d84:	31c00215 	stw	r7,8(r6)
 8006d88:	30c00115 	stw	r3,4(r6)
 8006d8c:	308d883a 	add	r6,r6,r2
 8006d90:	30800015 	stw	r2,0(r6)
 8006d94:	003f9506 	br	8006bec <__alt_data_end+0xfc006bec>
 8006d98:	00c01504 	movi	r3,84
 8006d9c:	19400536 	bltu	r3,r5,8006db4 <_free_r+0x2b8>
 8006da0:	100ad33a 	srli	r5,r2,12
 8006da4:	28c01bc4 	addi	r3,r5,111
 8006da8:	18c7883a 	add	r3,r3,r3
 8006dac:	29401b84 	addi	r5,r5,110
 8006db0:	003f9c06 	br	8006c24 <__alt_data_end+0xfc006c24>
 8006db4:	00c05504 	movi	r3,340
 8006db8:	19400536 	bltu	r3,r5,8006dd0 <_free_r+0x2d4>
 8006dbc:	100ad3fa 	srli	r5,r2,15
 8006dc0:	28c01e04 	addi	r3,r5,120
 8006dc4:	18c7883a 	add	r3,r3,r3
 8006dc8:	29401dc4 	addi	r5,r5,119
 8006dcc:	003f9506 	br	8006c24 <__alt_data_end+0xfc006c24>
 8006dd0:	00c15504 	movi	r3,1364
 8006dd4:	19400536 	bltu	r3,r5,8006dec <_free_r+0x2f0>
 8006dd8:	100ad4ba 	srli	r5,r2,18
 8006ddc:	28c01f44 	addi	r3,r5,125
 8006de0:	18c7883a 	add	r3,r3,r3
 8006de4:	29401f04 	addi	r5,r5,124
 8006de8:	003f8e06 	br	8006c24 <__alt_data_end+0xfc006c24>
 8006dec:	00c03f84 	movi	r3,254
 8006df0:	01401f84 	movi	r5,126
 8006df4:	003f8b06 	br	8006c24 <__alt_data_end+0xfc006c24>
 8006df8:	10c00054 	ori	r3,r2,1
 8006dfc:	30c00115 	stw	r3,4(r6)
 8006e00:	308d883a 	add	r6,r6,r2
 8006e04:	30800015 	stw	r2,0(r6)
 8006e08:	003f7806 	br	8006bec <__alt_data_end+0xfc006bec>

08006e0c <__sfvwrite_r>:
 8006e0c:	30800217 	ldw	r2,8(r6)
 8006e10:	10006726 	beq	r2,zero,8006fb0 <__sfvwrite_r+0x1a4>
 8006e14:	28c0030b 	ldhu	r3,12(r5)
 8006e18:	defff404 	addi	sp,sp,-48
 8006e1c:	dd400715 	stw	r21,28(sp)
 8006e20:	dd000615 	stw	r20,24(sp)
 8006e24:	dc000215 	stw	r16,8(sp)
 8006e28:	dfc00b15 	stw	ra,44(sp)
 8006e2c:	df000a15 	stw	fp,40(sp)
 8006e30:	ddc00915 	stw	r23,36(sp)
 8006e34:	dd800815 	stw	r22,32(sp)
 8006e38:	dcc00515 	stw	r19,20(sp)
 8006e3c:	dc800415 	stw	r18,16(sp)
 8006e40:	dc400315 	stw	r17,12(sp)
 8006e44:	1880020c 	andi	r2,r3,8
 8006e48:	2821883a 	mov	r16,r5
 8006e4c:	202b883a 	mov	r21,r4
 8006e50:	3029883a 	mov	r20,r6
 8006e54:	10002726 	beq	r2,zero,8006ef4 <__sfvwrite_r+0xe8>
 8006e58:	28800417 	ldw	r2,16(r5)
 8006e5c:	10002526 	beq	r2,zero,8006ef4 <__sfvwrite_r+0xe8>
 8006e60:	1880008c 	andi	r2,r3,2
 8006e64:	a4400017 	ldw	r17,0(r20)
 8006e68:	10002a26 	beq	r2,zero,8006f14 <__sfvwrite_r+0x108>
 8006e6c:	05a00034 	movhi	r22,32768
 8006e70:	0027883a 	mov	r19,zero
 8006e74:	0025883a 	mov	r18,zero
 8006e78:	b5bf0004 	addi	r22,r22,-1024
 8006e7c:	980d883a 	mov	r6,r19
 8006e80:	a809883a 	mov	r4,r21
 8006e84:	90004626 	beq	r18,zero,8006fa0 <__sfvwrite_r+0x194>
 8006e88:	900f883a 	mov	r7,r18
 8006e8c:	b480022e 	bgeu	r22,r18,8006e98 <__sfvwrite_r+0x8c>
 8006e90:	01e00034 	movhi	r7,32768
 8006e94:	39ff0004 	addi	r7,r7,-1024
 8006e98:	80800917 	ldw	r2,36(r16)
 8006e9c:	81400717 	ldw	r5,28(r16)
 8006ea0:	103ee83a 	callr	r2
 8006ea4:	00805a0e 	bge	zero,r2,8007010 <__sfvwrite_r+0x204>
 8006ea8:	a0c00217 	ldw	r3,8(r20)
 8006eac:	98a7883a 	add	r19,r19,r2
 8006eb0:	90a5c83a 	sub	r18,r18,r2
 8006eb4:	1885c83a 	sub	r2,r3,r2
 8006eb8:	a0800215 	stw	r2,8(r20)
 8006ebc:	103fef1e 	bne	r2,zero,8006e7c <__alt_data_end+0xfc006e7c>
 8006ec0:	0005883a 	mov	r2,zero
 8006ec4:	dfc00b17 	ldw	ra,44(sp)
 8006ec8:	df000a17 	ldw	fp,40(sp)
 8006ecc:	ddc00917 	ldw	r23,36(sp)
 8006ed0:	dd800817 	ldw	r22,32(sp)
 8006ed4:	dd400717 	ldw	r21,28(sp)
 8006ed8:	dd000617 	ldw	r20,24(sp)
 8006edc:	dcc00517 	ldw	r19,20(sp)
 8006ee0:	dc800417 	ldw	r18,16(sp)
 8006ee4:	dc400317 	ldw	r17,12(sp)
 8006ee8:	dc000217 	ldw	r16,8(sp)
 8006eec:	dec00c04 	addi	sp,sp,48
 8006ef0:	f800283a 	ret
 8006ef4:	800b883a 	mov	r5,r16
 8006ef8:	a809883a 	mov	r4,r21
 8006efc:	800497c0 	call	800497c <__swsetup_r>
 8006f00:	1000ee1e 	bne	r2,zero,80072bc <__sfvwrite_r+0x4b0>
 8006f04:	80c0030b 	ldhu	r3,12(r16)
 8006f08:	a4400017 	ldw	r17,0(r20)
 8006f0c:	1880008c 	andi	r2,r3,2
 8006f10:	103fd61e 	bne	r2,zero,8006e6c <__alt_data_end+0xfc006e6c>
 8006f14:	1880004c 	andi	r2,r3,1
 8006f18:	1000421e 	bne	r2,zero,8007024 <__sfvwrite_r+0x218>
 8006f1c:	0039883a 	mov	fp,zero
 8006f20:	0025883a 	mov	r18,zero
 8006f24:	90001a26 	beq	r18,zero,8006f90 <__sfvwrite_r+0x184>
 8006f28:	1880800c 	andi	r2,r3,512
 8006f2c:	84c00217 	ldw	r19,8(r16)
 8006f30:	10002126 	beq	r2,zero,8006fb8 <__sfvwrite_r+0x1ac>
 8006f34:	982f883a 	mov	r23,r19
 8006f38:	94c09636 	bltu	r18,r19,8007194 <__sfvwrite_r+0x388>
 8006f3c:	1881200c 	andi	r2,r3,1152
 8006f40:	1000a11e 	bne	r2,zero,80071c8 <__sfvwrite_r+0x3bc>
 8006f44:	81000017 	ldw	r4,0(r16)
 8006f48:	b80d883a 	mov	r6,r23
 8006f4c:	e00b883a 	mov	r5,fp
 8006f50:	800812c0 	call	800812c <memmove>
 8006f54:	80c00217 	ldw	r3,8(r16)
 8006f58:	81000017 	ldw	r4,0(r16)
 8006f5c:	9005883a 	mov	r2,r18
 8006f60:	1ce7c83a 	sub	r19,r3,r19
 8006f64:	25cf883a 	add	r7,r4,r23
 8006f68:	84c00215 	stw	r19,8(r16)
 8006f6c:	81c00015 	stw	r7,0(r16)
 8006f70:	a0c00217 	ldw	r3,8(r20)
 8006f74:	e0b9883a 	add	fp,fp,r2
 8006f78:	90a5c83a 	sub	r18,r18,r2
 8006f7c:	18a7c83a 	sub	r19,r3,r2
 8006f80:	a4c00215 	stw	r19,8(r20)
 8006f84:	983fce26 	beq	r19,zero,8006ec0 <__alt_data_end+0xfc006ec0>
 8006f88:	80c0030b 	ldhu	r3,12(r16)
 8006f8c:	903fe61e 	bne	r18,zero,8006f28 <__alt_data_end+0xfc006f28>
 8006f90:	8f000017 	ldw	fp,0(r17)
 8006f94:	8c800117 	ldw	r18,4(r17)
 8006f98:	8c400204 	addi	r17,r17,8
 8006f9c:	003fe106 	br	8006f24 <__alt_data_end+0xfc006f24>
 8006fa0:	8cc00017 	ldw	r19,0(r17)
 8006fa4:	8c800117 	ldw	r18,4(r17)
 8006fa8:	8c400204 	addi	r17,r17,8
 8006fac:	003fb306 	br	8006e7c <__alt_data_end+0xfc006e7c>
 8006fb0:	0005883a 	mov	r2,zero
 8006fb4:	f800283a 	ret
 8006fb8:	81000017 	ldw	r4,0(r16)
 8006fbc:	80800417 	ldw	r2,16(r16)
 8006fc0:	11005a36 	bltu	r2,r4,800712c <__sfvwrite_r+0x320>
 8006fc4:	85c00517 	ldw	r23,20(r16)
 8006fc8:	95c05836 	bltu	r18,r23,800712c <__sfvwrite_r+0x320>
 8006fcc:	00a00034 	movhi	r2,32768
 8006fd0:	10bfffc4 	addi	r2,r2,-1
 8006fd4:	9009883a 	mov	r4,r18
 8006fd8:	1480012e 	bgeu	r2,r18,8006fe0 <__sfvwrite_r+0x1d4>
 8006fdc:	1009883a 	mov	r4,r2
 8006fe0:	b80b883a 	mov	r5,r23
 8006fe4:	800c8b00 	call	800c8b0 <__divsi3>
 8006fe8:	b80b883a 	mov	r5,r23
 8006fec:	1009883a 	mov	r4,r2
 8006ff0:	800ca640 	call	800ca64 <__mulsi3>
 8006ff4:	81400717 	ldw	r5,28(r16)
 8006ff8:	80c00917 	ldw	r3,36(r16)
 8006ffc:	100f883a 	mov	r7,r2
 8007000:	e00d883a 	mov	r6,fp
 8007004:	a809883a 	mov	r4,r21
 8007008:	183ee83a 	callr	r3
 800700c:	00bfd816 	blt	zero,r2,8006f70 <__alt_data_end+0xfc006f70>
 8007010:	8080030b 	ldhu	r2,12(r16)
 8007014:	10801014 	ori	r2,r2,64
 8007018:	8080030d 	sth	r2,12(r16)
 800701c:	00bfffc4 	movi	r2,-1
 8007020:	003fa806 	br	8006ec4 <__alt_data_end+0xfc006ec4>
 8007024:	0027883a 	mov	r19,zero
 8007028:	0011883a 	mov	r8,zero
 800702c:	0039883a 	mov	fp,zero
 8007030:	0025883a 	mov	r18,zero
 8007034:	90001f26 	beq	r18,zero,80070b4 <__sfvwrite_r+0x2a8>
 8007038:	40005a26 	beq	r8,zero,80071a4 <__sfvwrite_r+0x398>
 800703c:	982d883a 	mov	r22,r19
 8007040:	94c0012e 	bgeu	r18,r19,8007048 <__sfvwrite_r+0x23c>
 8007044:	902d883a 	mov	r22,r18
 8007048:	81000017 	ldw	r4,0(r16)
 800704c:	80800417 	ldw	r2,16(r16)
 8007050:	b02f883a 	mov	r23,r22
 8007054:	81c00517 	ldw	r7,20(r16)
 8007058:	1100032e 	bgeu	r2,r4,8007068 <__sfvwrite_r+0x25c>
 800705c:	80c00217 	ldw	r3,8(r16)
 8007060:	38c7883a 	add	r3,r7,r3
 8007064:	1d801816 	blt	r3,r22,80070c8 <__sfvwrite_r+0x2bc>
 8007068:	b1c03e16 	blt	r22,r7,8007164 <__sfvwrite_r+0x358>
 800706c:	80800917 	ldw	r2,36(r16)
 8007070:	81400717 	ldw	r5,28(r16)
 8007074:	e00d883a 	mov	r6,fp
 8007078:	da000115 	stw	r8,4(sp)
 800707c:	a809883a 	mov	r4,r21
 8007080:	103ee83a 	callr	r2
 8007084:	102f883a 	mov	r23,r2
 8007088:	da000117 	ldw	r8,4(sp)
 800708c:	00bfe00e 	bge	zero,r2,8007010 <__alt_data_end+0xfc007010>
 8007090:	9de7c83a 	sub	r19,r19,r23
 8007094:	98001f26 	beq	r19,zero,8007114 <__sfvwrite_r+0x308>
 8007098:	a0800217 	ldw	r2,8(r20)
 800709c:	e5f9883a 	add	fp,fp,r23
 80070a0:	95e5c83a 	sub	r18,r18,r23
 80070a4:	15efc83a 	sub	r23,r2,r23
 80070a8:	a5c00215 	stw	r23,8(r20)
 80070ac:	b83f8426 	beq	r23,zero,8006ec0 <__alt_data_end+0xfc006ec0>
 80070b0:	903fe11e 	bne	r18,zero,8007038 <__alt_data_end+0xfc007038>
 80070b4:	8f000017 	ldw	fp,0(r17)
 80070b8:	8c800117 	ldw	r18,4(r17)
 80070bc:	0011883a 	mov	r8,zero
 80070c0:	8c400204 	addi	r17,r17,8
 80070c4:	003fdb06 	br	8007034 <__alt_data_end+0xfc007034>
 80070c8:	180d883a 	mov	r6,r3
 80070cc:	e00b883a 	mov	r5,fp
 80070d0:	da000115 	stw	r8,4(sp)
 80070d4:	d8c00015 	stw	r3,0(sp)
 80070d8:	800812c0 	call	800812c <memmove>
 80070dc:	d8c00017 	ldw	r3,0(sp)
 80070e0:	80800017 	ldw	r2,0(r16)
 80070e4:	800b883a 	mov	r5,r16
 80070e8:	a809883a 	mov	r4,r21
 80070ec:	10c5883a 	add	r2,r2,r3
 80070f0:	80800015 	stw	r2,0(r16)
 80070f4:	d8c00015 	stw	r3,0(sp)
 80070f8:	800659c0 	call	800659c <_fflush_r>
 80070fc:	d8c00017 	ldw	r3,0(sp)
 8007100:	da000117 	ldw	r8,4(sp)
 8007104:	103fc21e 	bne	r2,zero,8007010 <__alt_data_end+0xfc007010>
 8007108:	182f883a 	mov	r23,r3
 800710c:	9de7c83a 	sub	r19,r19,r23
 8007110:	983fe11e 	bne	r19,zero,8007098 <__alt_data_end+0xfc007098>
 8007114:	800b883a 	mov	r5,r16
 8007118:	a809883a 	mov	r4,r21
 800711c:	800659c0 	call	800659c <_fflush_r>
 8007120:	103fbb1e 	bne	r2,zero,8007010 <__alt_data_end+0xfc007010>
 8007124:	0011883a 	mov	r8,zero
 8007128:	003fdb06 	br	8007098 <__alt_data_end+0xfc007098>
 800712c:	94c0012e 	bgeu	r18,r19,8007134 <__sfvwrite_r+0x328>
 8007130:	9027883a 	mov	r19,r18
 8007134:	980d883a 	mov	r6,r19
 8007138:	e00b883a 	mov	r5,fp
 800713c:	800812c0 	call	800812c <memmove>
 8007140:	80800217 	ldw	r2,8(r16)
 8007144:	80c00017 	ldw	r3,0(r16)
 8007148:	14c5c83a 	sub	r2,r2,r19
 800714c:	1cc7883a 	add	r3,r3,r19
 8007150:	80800215 	stw	r2,8(r16)
 8007154:	80c00015 	stw	r3,0(r16)
 8007158:	10004326 	beq	r2,zero,8007268 <__sfvwrite_r+0x45c>
 800715c:	9805883a 	mov	r2,r19
 8007160:	003f8306 	br	8006f70 <__alt_data_end+0xfc006f70>
 8007164:	b00d883a 	mov	r6,r22
 8007168:	e00b883a 	mov	r5,fp
 800716c:	da000115 	stw	r8,4(sp)
 8007170:	800812c0 	call	800812c <memmove>
 8007174:	80800217 	ldw	r2,8(r16)
 8007178:	80c00017 	ldw	r3,0(r16)
 800717c:	da000117 	ldw	r8,4(sp)
 8007180:	1585c83a 	sub	r2,r2,r22
 8007184:	1dad883a 	add	r22,r3,r22
 8007188:	80800215 	stw	r2,8(r16)
 800718c:	85800015 	stw	r22,0(r16)
 8007190:	003fbf06 	br	8007090 <__alt_data_end+0xfc007090>
 8007194:	81000017 	ldw	r4,0(r16)
 8007198:	9027883a 	mov	r19,r18
 800719c:	902f883a 	mov	r23,r18
 80071a0:	003f6906 	br	8006f48 <__alt_data_end+0xfc006f48>
 80071a4:	900d883a 	mov	r6,r18
 80071a8:	01400284 	movi	r5,10
 80071ac:	e009883a 	mov	r4,fp
 80071b0:	8007f000 	call	8007f00 <memchr>
 80071b4:	10003e26 	beq	r2,zero,80072b0 <__sfvwrite_r+0x4a4>
 80071b8:	10800044 	addi	r2,r2,1
 80071bc:	1727c83a 	sub	r19,r2,fp
 80071c0:	02000044 	movi	r8,1
 80071c4:	003f9d06 	br	800703c <__alt_data_end+0xfc00703c>
 80071c8:	80800517 	ldw	r2,20(r16)
 80071cc:	81400417 	ldw	r5,16(r16)
 80071d0:	81c00017 	ldw	r7,0(r16)
 80071d4:	10a7883a 	add	r19,r2,r2
 80071d8:	9885883a 	add	r2,r19,r2
 80071dc:	1026d7fa 	srli	r19,r2,31
 80071e0:	396dc83a 	sub	r22,r7,r5
 80071e4:	b1000044 	addi	r4,r22,1
 80071e8:	9885883a 	add	r2,r19,r2
 80071ec:	1027d07a 	srai	r19,r2,1
 80071f0:	2485883a 	add	r2,r4,r18
 80071f4:	980d883a 	mov	r6,r19
 80071f8:	9880022e 	bgeu	r19,r2,8007204 <__sfvwrite_r+0x3f8>
 80071fc:	1027883a 	mov	r19,r2
 8007200:	100d883a 	mov	r6,r2
 8007204:	18c1000c 	andi	r3,r3,1024
 8007208:	18001c26 	beq	r3,zero,800727c <__sfvwrite_r+0x470>
 800720c:	300b883a 	mov	r5,r6
 8007210:	a809883a 	mov	r4,r21
 8007214:	80076f40 	call	80076f4 <_malloc_r>
 8007218:	102f883a 	mov	r23,r2
 800721c:	10002926 	beq	r2,zero,80072c4 <__sfvwrite_r+0x4b8>
 8007220:	81400417 	ldw	r5,16(r16)
 8007224:	b00d883a 	mov	r6,r22
 8007228:	1009883a 	mov	r4,r2
 800722c:	8007fe40 	call	8007fe4 <memcpy>
 8007230:	8080030b 	ldhu	r2,12(r16)
 8007234:	00fedfc4 	movi	r3,-1153
 8007238:	10c4703a 	and	r2,r2,r3
 800723c:	10802014 	ori	r2,r2,128
 8007240:	8080030d 	sth	r2,12(r16)
 8007244:	bd89883a 	add	r4,r23,r22
 8007248:	9d8fc83a 	sub	r7,r19,r22
 800724c:	85c00415 	stw	r23,16(r16)
 8007250:	84c00515 	stw	r19,20(r16)
 8007254:	81000015 	stw	r4,0(r16)
 8007258:	9027883a 	mov	r19,r18
 800725c:	81c00215 	stw	r7,8(r16)
 8007260:	902f883a 	mov	r23,r18
 8007264:	003f3806 	br	8006f48 <__alt_data_end+0xfc006f48>
 8007268:	800b883a 	mov	r5,r16
 800726c:	a809883a 	mov	r4,r21
 8007270:	800659c0 	call	800659c <_fflush_r>
 8007274:	103fb926 	beq	r2,zero,800715c <__alt_data_end+0xfc00715c>
 8007278:	003f6506 	br	8007010 <__alt_data_end+0xfc007010>
 800727c:	a809883a 	mov	r4,r21
 8007280:	80094680 	call	8009468 <_realloc_r>
 8007284:	102f883a 	mov	r23,r2
 8007288:	103fee1e 	bne	r2,zero,8007244 <__alt_data_end+0xfc007244>
 800728c:	81400417 	ldw	r5,16(r16)
 8007290:	a809883a 	mov	r4,r21
 8007294:	8006afc0 	call	8006afc <_free_r>
 8007298:	8080030b 	ldhu	r2,12(r16)
 800729c:	00ffdfc4 	movi	r3,-129
 80072a0:	1884703a 	and	r2,r3,r2
 80072a4:	00c00304 	movi	r3,12
 80072a8:	a8c00015 	stw	r3,0(r21)
 80072ac:	003f5906 	br	8007014 <__alt_data_end+0xfc007014>
 80072b0:	94c00044 	addi	r19,r18,1
 80072b4:	02000044 	movi	r8,1
 80072b8:	003f6006 	br	800703c <__alt_data_end+0xfc00703c>
 80072bc:	00bfffc4 	movi	r2,-1
 80072c0:	003f0006 	br	8006ec4 <__alt_data_end+0xfc006ec4>
 80072c4:	00800304 	movi	r2,12
 80072c8:	a8800015 	stw	r2,0(r21)
 80072cc:	8080030b 	ldhu	r2,12(r16)
 80072d0:	003f5006 	br	8007014 <__alt_data_end+0xfc007014>

080072d4 <_fwalk>:
 80072d4:	defff704 	addi	sp,sp,-36
 80072d8:	dd000415 	stw	r20,16(sp)
 80072dc:	dfc00815 	stw	ra,32(sp)
 80072e0:	ddc00715 	stw	r23,28(sp)
 80072e4:	dd800615 	stw	r22,24(sp)
 80072e8:	dd400515 	stw	r21,20(sp)
 80072ec:	dcc00315 	stw	r19,12(sp)
 80072f0:	dc800215 	stw	r18,8(sp)
 80072f4:	dc400115 	stw	r17,4(sp)
 80072f8:	dc000015 	stw	r16,0(sp)
 80072fc:	2500b804 	addi	r20,r4,736
 8007300:	a0002326 	beq	r20,zero,8007390 <_fwalk+0xbc>
 8007304:	282b883a 	mov	r21,r5
 8007308:	002f883a 	mov	r23,zero
 800730c:	05800044 	movi	r22,1
 8007310:	04ffffc4 	movi	r19,-1
 8007314:	a4400117 	ldw	r17,4(r20)
 8007318:	a4800217 	ldw	r18,8(r20)
 800731c:	8c7fffc4 	addi	r17,r17,-1
 8007320:	88000d16 	blt	r17,zero,8007358 <_fwalk+0x84>
 8007324:	94000304 	addi	r16,r18,12
 8007328:	94800384 	addi	r18,r18,14
 800732c:	8080000b 	ldhu	r2,0(r16)
 8007330:	8c7fffc4 	addi	r17,r17,-1
 8007334:	813ffd04 	addi	r4,r16,-12
 8007338:	b080042e 	bgeu	r22,r2,800734c <_fwalk+0x78>
 800733c:	9080000f 	ldh	r2,0(r18)
 8007340:	14c00226 	beq	r2,r19,800734c <_fwalk+0x78>
 8007344:	a83ee83a 	callr	r21
 8007348:	b8aeb03a 	or	r23,r23,r2
 800734c:	84001a04 	addi	r16,r16,104
 8007350:	94801a04 	addi	r18,r18,104
 8007354:	8cfff51e 	bne	r17,r19,800732c <__alt_data_end+0xfc00732c>
 8007358:	a5000017 	ldw	r20,0(r20)
 800735c:	a03fed1e 	bne	r20,zero,8007314 <__alt_data_end+0xfc007314>
 8007360:	b805883a 	mov	r2,r23
 8007364:	dfc00817 	ldw	ra,32(sp)
 8007368:	ddc00717 	ldw	r23,28(sp)
 800736c:	dd800617 	ldw	r22,24(sp)
 8007370:	dd400517 	ldw	r21,20(sp)
 8007374:	dd000417 	ldw	r20,16(sp)
 8007378:	dcc00317 	ldw	r19,12(sp)
 800737c:	dc800217 	ldw	r18,8(sp)
 8007380:	dc400117 	ldw	r17,4(sp)
 8007384:	dc000017 	ldw	r16,0(sp)
 8007388:	dec00904 	addi	sp,sp,36
 800738c:	f800283a 	ret
 8007390:	002f883a 	mov	r23,zero
 8007394:	003ff206 	br	8007360 <__alt_data_end+0xfc007360>

08007398 <_fwalk_reent>:
 8007398:	defff704 	addi	sp,sp,-36
 800739c:	dd000415 	stw	r20,16(sp)
 80073a0:	dfc00815 	stw	ra,32(sp)
 80073a4:	ddc00715 	stw	r23,28(sp)
 80073a8:	dd800615 	stw	r22,24(sp)
 80073ac:	dd400515 	stw	r21,20(sp)
 80073b0:	dcc00315 	stw	r19,12(sp)
 80073b4:	dc800215 	stw	r18,8(sp)
 80073b8:	dc400115 	stw	r17,4(sp)
 80073bc:	dc000015 	stw	r16,0(sp)
 80073c0:	2500b804 	addi	r20,r4,736
 80073c4:	a0002326 	beq	r20,zero,8007454 <_fwalk_reent+0xbc>
 80073c8:	282b883a 	mov	r21,r5
 80073cc:	2027883a 	mov	r19,r4
 80073d0:	002f883a 	mov	r23,zero
 80073d4:	05800044 	movi	r22,1
 80073d8:	04bfffc4 	movi	r18,-1
 80073dc:	a4400117 	ldw	r17,4(r20)
 80073e0:	a4000217 	ldw	r16,8(r20)
 80073e4:	8c7fffc4 	addi	r17,r17,-1
 80073e8:	88000c16 	blt	r17,zero,800741c <_fwalk_reent+0x84>
 80073ec:	84000304 	addi	r16,r16,12
 80073f0:	8080000b 	ldhu	r2,0(r16)
 80073f4:	8c7fffc4 	addi	r17,r17,-1
 80073f8:	817ffd04 	addi	r5,r16,-12
 80073fc:	b080052e 	bgeu	r22,r2,8007414 <_fwalk_reent+0x7c>
 8007400:	8080008f 	ldh	r2,2(r16)
 8007404:	9809883a 	mov	r4,r19
 8007408:	14800226 	beq	r2,r18,8007414 <_fwalk_reent+0x7c>
 800740c:	a83ee83a 	callr	r21
 8007410:	b8aeb03a 	or	r23,r23,r2
 8007414:	84001a04 	addi	r16,r16,104
 8007418:	8cbff51e 	bne	r17,r18,80073f0 <__alt_data_end+0xfc0073f0>
 800741c:	a5000017 	ldw	r20,0(r20)
 8007420:	a03fee1e 	bne	r20,zero,80073dc <__alt_data_end+0xfc0073dc>
 8007424:	b805883a 	mov	r2,r23
 8007428:	dfc00817 	ldw	ra,32(sp)
 800742c:	ddc00717 	ldw	r23,28(sp)
 8007430:	dd800617 	ldw	r22,24(sp)
 8007434:	dd400517 	ldw	r21,20(sp)
 8007438:	dd000417 	ldw	r20,16(sp)
 800743c:	dcc00317 	ldw	r19,12(sp)
 8007440:	dc800217 	ldw	r18,8(sp)
 8007444:	dc400117 	ldw	r17,4(sp)
 8007448:	dc000017 	ldw	r16,0(sp)
 800744c:	dec00904 	addi	sp,sp,36
 8007450:	f800283a 	ret
 8007454:	002f883a 	mov	r23,zero
 8007458:	003ff206 	br	8007424 <__alt_data_end+0xfc007424>

0800745c <_setlocale_r>:
 800745c:	30001b26 	beq	r6,zero,80074cc <_setlocale_r+0x70>
 8007460:	01420074 	movhi	r5,2049
 8007464:	defffe04 	addi	sp,sp,-8
 8007468:	2948e904 	addi	r5,r5,9124
 800746c:	3009883a 	mov	r4,r6
 8007470:	dc000015 	stw	r16,0(sp)
 8007474:	dfc00115 	stw	ra,4(sp)
 8007478:	3021883a 	mov	r16,r6
 800747c:	8009bd00 	call	8009bd0 <strcmp>
 8007480:	1000061e 	bne	r2,zero,800749c <_setlocale_r+0x40>
 8007484:	00820074 	movhi	r2,2049
 8007488:	1088e804 	addi	r2,r2,9120
 800748c:	dfc00117 	ldw	ra,4(sp)
 8007490:	dc000017 	ldw	r16,0(sp)
 8007494:	dec00204 	addi	sp,sp,8
 8007498:	f800283a 	ret
 800749c:	01420074 	movhi	r5,2049
 80074a0:	2948e804 	addi	r5,r5,9120
 80074a4:	8009883a 	mov	r4,r16
 80074a8:	8009bd00 	call	8009bd0 <strcmp>
 80074ac:	103ff526 	beq	r2,zero,8007484 <__alt_data_end+0xfc007484>
 80074b0:	01420074 	movhi	r5,2049
 80074b4:	2948d304 	addi	r5,r5,9036
 80074b8:	8009883a 	mov	r4,r16
 80074bc:	8009bd00 	call	8009bd0 <strcmp>
 80074c0:	103ff026 	beq	r2,zero,8007484 <__alt_data_end+0xfc007484>
 80074c4:	0005883a 	mov	r2,zero
 80074c8:	003ff006 	br	800748c <__alt_data_end+0xfc00748c>
 80074cc:	00820074 	movhi	r2,2049
 80074d0:	1088e804 	addi	r2,r2,9120
 80074d4:	f800283a 	ret

080074d8 <__locale_charset>:
 80074d8:	00820074 	movhi	r2,2049
 80074dc:	108a9b04 	addi	r2,r2,10860
 80074e0:	f800283a 	ret

080074e4 <__locale_mb_cur_max>:
 80074e4:	00820074 	movhi	r2,2049
 80074e8:	10903704 	addi	r2,r2,16604
 80074ec:	10800017 	ldw	r2,0(r2)
 80074f0:	f800283a 	ret

080074f4 <__locale_msgcharset>:
 80074f4:	00820074 	movhi	r2,2049
 80074f8:	108a9304 	addi	r2,r2,10828
 80074fc:	f800283a 	ret

08007500 <__locale_cjk_lang>:
 8007500:	0005883a 	mov	r2,zero
 8007504:	f800283a 	ret

08007508 <_localeconv_r>:
 8007508:	00820074 	movhi	r2,2049
 800750c:	108aa304 	addi	r2,r2,10892
 8007510:	f800283a 	ret

08007514 <setlocale>:
 8007514:	00820074 	movhi	r2,2049
 8007518:	10903604 	addi	r2,r2,16600
 800751c:	280d883a 	mov	r6,r5
 8007520:	200b883a 	mov	r5,r4
 8007524:	11000017 	ldw	r4,0(r2)
 8007528:	800745c1 	jmpi	800745c <_setlocale_r>

0800752c <localeconv>:
 800752c:	00820074 	movhi	r2,2049
 8007530:	108aa304 	addi	r2,r2,10892
 8007534:	f800283a 	ret

08007538 <__smakebuf_r>:
 8007538:	2880030b 	ldhu	r2,12(r5)
 800753c:	10c0008c 	andi	r3,r2,2
 8007540:	1800411e 	bne	r3,zero,8007648 <__smakebuf_r+0x110>
 8007544:	deffec04 	addi	sp,sp,-80
 8007548:	dc000f15 	stw	r16,60(sp)
 800754c:	2821883a 	mov	r16,r5
 8007550:	2940038f 	ldh	r5,14(r5)
 8007554:	dc401015 	stw	r17,64(sp)
 8007558:	dfc01315 	stw	ra,76(sp)
 800755c:	dcc01215 	stw	r19,72(sp)
 8007560:	dc801115 	stw	r18,68(sp)
 8007564:	2023883a 	mov	r17,r4
 8007568:	28001c16 	blt	r5,zero,80075dc <__smakebuf_r+0xa4>
 800756c:	d80d883a 	mov	r6,sp
 8007570:	800b8400 	call	800b840 <_fstat_r>
 8007574:	10001816 	blt	r2,zero,80075d8 <__smakebuf_r+0xa0>
 8007578:	d8800117 	ldw	r2,4(sp)
 800757c:	00e00014 	movui	r3,32768
 8007580:	10bc000c 	andi	r2,r2,61440
 8007584:	14c80020 	cmpeqi	r19,r2,8192
 8007588:	10c03726 	beq	r2,r3,8007668 <__smakebuf_r+0x130>
 800758c:	80c0030b 	ldhu	r3,12(r16)
 8007590:	18c20014 	ori	r3,r3,2048
 8007594:	80c0030d 	sth	r3,12(r16)
 8007598:	00c80004 	movi	r3,8192
 800759c:	10c0521e 	bne	r2,r3,80076e8 <__smakebuf_r+0x1b0>
 80075a0:	8140038f 	ldh	r5,14(r16)
 80075a4:	8809883a 	mov	r4,r17
 80075a8:	800b89c0 	call	800b89c <_isatty_r>
 80075ac:	10004c26 	beq	r2,zero,80076e0 <__smakebuf_r+0x1a8>
 80075b0:	8080030b 	ldhu	r2,12(r16)
 80075b4:	80c010c4 	addi	r3,r16,67
 80075b8:	80c00015 	stw	r3,0(r16)
 80075bc:	10800054 	ori	r2,r2,1
 80075c0:	8080030d 	sth	r2,12(r16)
 80075c4:	00800044 	movi	r2,1
 80075c8:	80c00415 	stw	r3,16(r16)
 80075cc:	80800515 	stw	r2,20(r16)
 80075d0:	04810004 	movi	r18,1024
 80075d4:	00000706 	br	80075f4 <__smakebuf_r+0xbc>
 80075d8:	8080030b 	ldhu	r2,12(r16)
 80075dc:	10c0200c 	andi	r3,r2,128
 80075e0:	18001f1e 	bne	r3,zero,8007660 <__smakebuf_r+0x128>
 80075e4:	04810004 	movi	r18,1024
 80075e8:	10820014 	ori	r2,r2,2048
 80075ec:	8080030d 	sth	r2,12(r16)
 80075f0:	0027883a 	mov	r19,zero
 80075f4:	900b883a 	mov	r5,r18
 80075f8:	8809883a 	mov	r4,r17
 80075fc:	80076f40 	call	80076f4 <_malloc_r>
 8007600:	10002c26 	beq	r2,zero,80076b4 <__smakebuf_r+0x17c>
 8007604:	80c0030b 	ldhu	r3,12(r16)
 8007608:	01020034 	movhi	r4,2048
 800760c:	21198c04 	addi	r4,r4,26160
 8007610:	89000f15 	stw	r4,60(r17)
 8007614:	18c02014 	ori	r3,r3,128
 8007618:	80c0030d 	sth	r3,12(r16)
 800761c:	80800015 	stw	r2,0(r16)
 8007620:	80800415 	stw	r2,16(r16)
 8007624:	84800515 	stw	r18,20(r16)
 8007628:	98001a1e 	bne	r19,zero,8007694 <__smakebuf_r+0x15c>
 800762c:	dfc01317 	ldw	ra,76(sp)
 8007630:	dcc01217 	ldw	r19,72(sp)
 8007634:	dc801117 	ldw	r18,68(sp)
 8007638:	dc401017 	ldw	r17,64(sp)
 800763c:	dc000f17 	ldw	r16,60(sp)
 8007640:	dec01404 	addi	sp,sp,80
 8007644:	f800283a 	ret
 8007648:	288010c4 	addi	r2,r5,67
 800764c:	28800015 	stw	r2,0(r5)
 8007650:	28800415 	stw	r2,16(r5)
 8007654:	00800044 	movi	r2,1
 8007658:	28800515 	stw	r2,20(r5)
 800765c:	f800283a 	ret
 8007660:	04801004 	movi	r18,64
 8007664:	003fe006 	br	80075e8 <__alt_data_end+0xfc0075e8>
 8007668:	81000a17 	ldw	r4,40(r16)
 800766c:	00c20074 	movhi	r3,2049
 8007670:	18e6db04 	addi	r3,r3,-25748
 8007674:	20ffc51e 	bne	r4,r3,800758c <__alt_data_end+0xfc00758c>
 8007678:	8080030b 	ldhu	r2,12(r16)
 800767c:	04810004 	movi	r18,1024
 8007680:	84801315 	stw	r18,76(r16)
 8007684:	1484b03a 	or	r2,r2,r18
 8007688:	8080030d 	sth	r2,12(r16)
 800768c:	0027883a 	mov	r19,zero
 8007690:	003fd806 	br	80075f4 <__alt_data_end+0xfc0075f4>
 8007694:	8140038f 	ldh	r5,14(r16)
 8007698:	8809883a 	mov	r4,r17
 800769c:	800b89c0 	call	800b89c <_isatty_r>
 80076a0:	103fe226 	beq	r2,zero,800762c <__alt_data_end+0xfc00762c>
 80076a4:	8080030b 	ldhu	r2,12(r16)
 80076a8:	10800054 	ori	r2,r2,1
 80076ac:	8080030d 	sth	r2,12(r16)
 80076b0:	003fde06 	br	800762c <__alt_data_end+0xfc00762c>
 80076b4:	8080030b 	ldhu	r2,12(r16)
 80076b8:	10c0800c 	andi	r3,r2,512
 80076bc:	183fdb1e 	bne	r3,zero,800762c <__alt_data_end+0xfc00762c>
 80076c0:	10800094 	ori	r2,r2,2
 80076c4:	80c010c4 	addi	r3,r16,67
 80076c8:	8080030d 	sth	r2,12(r16)
 80076cc:	00800044 	movi	r2,1
 80076d0:	80c00015 	stw	r3,0(r16)
 80076d4:	80c00415 	stw	r3,16(r16)
 80076d8:	80800515 	stw	r2,20(r16)
 80076dc:	003fd306 	br	800762c <__alt_data_end+0xfc00762c>
 80076e0:	04810004 	movi	r18,1024
 80076e4:	003fc306 	br	80075f4 <__alt_data_end+0xfc0075f4>
 80076e8:	0027883a 	mov	r19,zero
 80076ec:	04810004 	movi	r18,1024
 80076f0:	003fc006 	br	80075f4 <__alt_data_end+0xfc0075f4>

080076f4 <_malloc_r>:
 80076f4:	defff504 	addi	sp,sp,-44
 80076f8:	dc800315 	stw	r18,12(sp)
 80076fc:	dfc00a15 	stw	ra,40(sp)
 8007700:	df000915 	stw	fp,36(sp)
 8007704:	ddc00815 	stw	r23,32(sp)
 8007708:	dd800715 	stw	r22,28(sp)
 800770c:	dd400615 	stw	r21,24(sp)
 8007710:	dd000515 	stw	r20,20(sp)
 8007714:	dcc00415 	stw	r19,16(sp)
 8007718:	dc400215 	stw	r17,8(sp)
 800771c:	dc000115 	stw	r16,4(sp)
 8007720:	288002c4 	addi	r2,r5,11
 8007724:	00c00584 	movi	r3,22
 8007728:	2025883a 	mov	r18,r4
 800772c:	18807f2e 	bgeu	r3,r2,800792c <_malloc_r+0x238>
 8007730:	047ffe04 	movi	r17,-8
 8007734:	1462703a 	and	r17,r2,r17
 8007738:	8800a316 	blt	r17,zero,80079c8 <_malloc_r+0x2d4>
 800773c:	8940a236 	bltu	r17,r5,80079c8 <_malloc_r+0x2d4>
 8007740:	800f8cc0 	call	800f8cc <__malloc_lock>
 8007744:	00807dc4 	movi	r2,503
 8007748:	1441e92e 	bgeu	r2,r17,8007ef0 <_malloc_r+0x7fc>
 800774c:	8804d27a 	srli	r2,r17,9
 8007750:	1000a126 	beq	r2,zero,80079d8 <_malloc_r+0x2e4>
 8007754:	00c00104 	movi	r3,4
 8007758:	18811e36 	bltu	r3,r2,8007bd4 <_malloc_r+0x4e0>
 800775c:	8804d1ba 	srli	r2,r17,6
 8007760:	12000e44 	addi	r8,r2,57
 8007764:	11c00e04 	addi	r7,r2,56
 8007768:	4209883a 	add	r4,r8,r8
 800776c:	04c20074 	movhi	r19,2049
 8007770:	2109883a 	add	r4,r4,r4
 8007774:	9ccab104 	addi	r19,r19,10948
 8007778:	2109883a 	add	r4,r4,r4
 800777c:	9909883a 	add	r4,r19,r4
 8007780:	24000117 	ldw	r16,4(r4)
 8007784:	213ffe04 	addi	r4,r4,-8
 8007788:	24009726 	beq	r4,r16,80079e8 <_malloc_r+0x2f4>
 800778c:	80800117 	ldw	r2,4(r16)
 8007790:	01bfff04 	movi	r6,-4
 8007794:	014003c4 	movi	r5,15
 8007798:	1184703a 	and	r2,r2,r6
 800779c:	1447c83a 	sub	r3,r2,r17
 80077a0:	28c00716 	blt	r5,r3,80077c0 <_malloc_r+0xcc>
 80077a4:	1800920e 	bge	r3,zero,80079f0 <_malloc_r+0x2fc>
 80077a8:	84000317 	ldw	r16,12(r16)
 80077ac:	24008e26 	beq	r4,r16,80079e8 <_malloc_r+0x2f4>
 80077b0:	80800117 	ldw	r2,4(r16)
 80077b4:	1184703a 	and	r2,r2,r6
 80077b8:	1447c83a 	sub	r3,r2,r17
 80077bc:	28fff90e 	bge	r5,r3,80077a4 <__alt_data_end+0xfc0077a4>
 80077c0:	3809883a 	mov	r4,r7
 80077c4:	01820074 	movhi	r6,2049
 80077c8:	9c000417 	ldw	r16,16(r19)
 80077cc:	318ab104 	addi	r6,r6,10948
 80077d0:	32000204 	addi	r8,r6,8
 80077d4:	82013426 	beq	r16,r8,8007ca8 <_malloc_r+0x5b4>
 80077d8:	80c00117 	ldw	r3,4(r16)
 80077dc:	00bfff04 	movi	r2,-4
 80077e0:	188e703a 	and	r7,r3,r2
 80077e4:	3c45c83a 	sub	r2,r7,r17
 80077e8:	00c003c4 	movi	r3,15
 80077ec:	18811f16 	blt	r3,r2,8007c6c <_malloc_r+0x578>
 80077f0:	32000515 	stw	r8,20(r6)
 80077f4:	32000415 	stw	r8,16(r6)
 80077f8:	10007f0e 	bge	r2,zero,80079f8 <_malloc_r+0x304>
 80077fc:	00807fc4 	movi	r2,511
 8007800:	11c0fd36 	bltu	r2,r7,8007bf8 <_malloc_r+0x504>
 8007804:	3806d0fa 	srli	r3,r7,3
 8007808:	01c00044 	movi	r7,1
 800780c:	30800117 	ldw	r2,4(r6)
 8007810:	19400044 	addi	r5,r3,1
 8007814:	294b883a 	add	r5,r5,r5
 8007818:	1807d0ba 	srai	r3,r3,2
 800781c:	294b883a 	add	r5,r5,r5
 8007820:	294b883a 	add	r5,r5,r5
 8007824:	298b883a 	add	r5,r5,r6
 8007828:	38c6983a 	sll	r3,r7,r3
 800782c:	29c00017 	ldw	r7,0(r5)
 8007830:	2a7ffe04 	addi	r9,r5,-8
 8007834:	1886b03a 	or	r3,r3,r2
 8007838:	82400315 	stw	r9,12(r16)
 800783c:	81c00215 	stw	r7,8(r16)
 8007840:	30c00115 	stw	r3,4(r6)
 8007844:	2c000015 	stw	r16,0(r5)
 8007848:	3c000315 	stw	r16,12(r7)
 800784c:	2005d0ba 	srai	r2,r4,2
 8007850:	01400044 	movi	r5,1
 8007854:	288a983a 	sll	r5,r5,r2
 8007858:	19406f36 	bltu	r3,r5,8007a18 <_malloc_r+0x324>
 800785c:	28c4703a 	and	r2,r5,r3
 8007860:	10000a1e 	bne	r2,zero,800788c <_malloc_r+0x198>
 8007864:	00bfff04 	movi	r2,-4
 8007868:	294b883a 	add	r5,r5,r5
 800786c:	2088703a 	and	r4,r4,r2
 8007870:	28c4703a 	and	r2,r5,r3
 8007874:	21000104 	addi	r4,r4,4
 8007878:	1000041e 	bne	r2,zero,800788c <_malloc_r+0x198>
 800787c:	294b883a 	add	r5,r5,r5
 8007880:	28c4703a 	and	r2,r5,r3
 8007884:	21000104 	addi	r4,r4,4
 8007888:	103ffc26 	beq	r2,zero,800787c <__alt_data_end+0xfc00787c>
 800788c:	02bfff04 	movi	r10,-4
 8007890:	024003c4 	movi	r9,15
 8007894:	21800044 	addi	r6,r4,1
 8007898:	318d883a 	add	r6,r6,r6
 800789c:	318d883a 	add	r6,r6,r6
 80078a0:	318d883a 	add	r6,r6,r6
 80078a4:	998d883a 	add	r6,r19,r6
 80078a8:	333ffe04 	addi	r12,r6,-8
 80078ac:	2017883a 	mov	r11,r4
 80078b0:	31800104 	addi	r6,r6,4
 80078b4:	34000017 	ldw	r16,0(r6)
 80078b8:	31fffd04 	addi	r7,r6,-12
 80078bc:	81c0041e 	bne	r16,r7,80078d0 <_malloc_r+0x1dc>
 80078c0:	0000fb06 	br	8007cb0 <_malloc_r+0x5bc>
 80078c4:	1801030e 	bge	r3,zero,8007cd4 <_malloc_r+0x5e0>
 80078c8:	84000317 	ldw	r16,12(r16)
 80078cc:	81c0f826 	beq	r16,r7,8007cb0 <_malloc_r+0x5bc>
 80078d0:	80800117 	ldw	r2,4(r16)
 80078d4:	1284703a 	and	r2,r2,r10
 80078d8:	1447c83a 	sub	r3,r2,r17
 80078dc:	48fff90e 	bge	r9,r3,80078c4 <__alt_data_end+0xfc0078c4>
 80078e0:	80800317 	ldw	r2,12(r16)
 80078e4:	81000217 	ldw	r4,8(r16)
 80078e8:	89400054 	ori	r5,r17,1
 80078ec:	81400115 	stw	r5,4(r16)
 80078f0:	20800315 	stw	r2,12(r4)
 80078f4:	11000215 	stw	r4,8(r2)
 80078f8:	8463883a 	add	r17,r16,r17
 80078fc:	9c400515 	stw	r17,20(r19)
 8007900:	9c400415 	stw	r17,16(r19)
 8007904:	18800054 	ori	r2,r3,1
 8007908:	88800115 	stw	r2,4(r17)
 800790c:	8a000315 	stw	r8,12(r17)
 8007910:	8a000215 	stw	r8,8(r17)
 8007914:	88e3883a 	add	r17,r17,r3
 8007918:	88c00015 	stw	r3,0(r17)
 800791c:	9009883a 	mov	r4,r18
 8007920:	800f8f00 	call	800f8f0 <__malloc_unlock>
 8007924:	80800204 	addi	r2,r16,8
 8007928:	00001b06 	br	8007998 <_malloc_r+0x2a4>
 800792c:	04400404 	movi	r17,16
 8007930:	89402536 	bltu	r17,r5,80079c8 <_malloc_r+0x2d4>
 8007934:	800f8cc0 	call	800f8cc <__malloc_lock>
 8007938:	00800184 	movi	r2,6
 800793c:	01000084 	movi	r4,2
 8007940:	04c20074 	movhi	r19,2049
 8007944:	1085883a 	add	r2,r2,r2
 8007948:	9ccab104 	addi	r19,r19,10948
 800794c:	1085883a 	add	r2,r2,r2
 8007950:	9885883a 	add	r2,r19,r2
 8007954:	14000117 	ldw	r16,4(r2)
 8007958:	10fffe04 	addi	r3,r2,-8
 800795c:	80c0d926 	beq	r16,r3,8007cc4 <_malloc_r+0x5d0>
 8007960:	80c00117 	ldw	r3,4(r16)
 8007964:	81000317 	ldw	r4,12(r16)
 8007968:	00bfff04 	movi	r2,-4
 800796c:	1884703a 	and	r2,r3,r2
 8007970:	81400217 	ldw	r5,8(r16)
 8007974:	8085883a 	add	r2,r16,r2
 8007978:	10c00117 	ldw	r3,4(r2)
 800797c:	29000315 	stw	r4,12(r5)
 8007980:	21400215 	stw	r5,8(r4)
 8007984:	18c00054 	ori	r3,r3,1
 8007988:	10c00115 	stw	r3,4(r2)
 800798c:	9009883a 	mov	r4,r18
 8007990:	800f8f00 	call	800f8f0 <__malloc_unlock>
 8007994:	80800204 	addi	r2,r16,8
 8007998:	dfc00a17 	ldw	ra,40(sp)
 800799c:	df000917 	ldw	fp,36(sp)
 80079a0:	ddc00817 	ldw	r23,32(sp)
 80079a4:	dd800717 	ldw	r22,28(sp)
 80079a8:	dd400617 	ldw	r21,24(sp)
 80079ac:	dd000517 	ldw	r20,20(sp)
 80079b0:	dcc00417 	ldw	r19,16(sp)
 80079b4:	dc800317 	ldw	r18,12(sp)
 80079b8:	dc400217 	ldw	r17,8(sp)
 80079bc:	dc000117 	ldw	r16,4(sp)
 80079c0:	dec00b04 	addi	sp,sp,44
 80079c4:	f800283a 	ret
 80079c8:	00800304 	movi	r2,12
 80079cc:	90800015 	stw	r2,0(r18)
 80079d0:	0005883a 	mov	r2,zero
 80079d4:	003ff006 	br	8007998 <__alt_data_end+0xfc007998>
 80079d8:	01002004 	movi	r4,128
 80079dc:	02001004 	movi	r8,64
 80079e0:	01c00fc4 	movi	r7,63
 80079e4:	003f6106 	br	800776c <__alt_data_end+0xfc00776c>
 80079e8:	4009883a 	mov	r4,r8
 80079ec:	003f7506 	br	80077c4 <__alt_data_end+0xfc0077c4>
 80079f0:	81000317 	ldw	r4,12(r16)
 80079f4:	003fde06 	br	8007970 <__alt_data_end+0xfc007970>
 80079f8:	81c5883a 	add	r2,r16,r7
 80079fc:	11400117 	ldw	r5,4(r2)
 8007a00:	9009883a 	mov	r4,r18
 8007a04:	29400054 	ori	r5,r5,1
 8007a08:	11400115 	stw	r5,4(r2)
 8007a0c:	800f8f00 	call	800f8f0 <__malloc_unlock>
 8007a10:	80800204 	addi	r2,r16,8
 8007a14:	003fe006 	br	8007998 <__alt_data_end+0xfc007998>
 8007a18:	9c000217 	ldw	r16,8(r19)
 8007a1c:	00bfff04 	movi	r2,-4
 8007a20:	85800117 	ldw	r22,4(r16)
 8007a24:	b0ac703a 	and	r22,r22,r2
 8007a28:	b4400336 	bltu	r22,r17,8007a38 <_malloc_r+0x344>
 8007a2c:	b445c83a 	sub	r2,r22,r17
 8007a30:	00c003c4 	movi	r3,15
 8007a34:	18805d16 	blt	r3,r2,8007bac <_malloc_r+0x4b8>
 8007a38:	05c20074 	movhi	r23,2049
 8007a3c:	00820074 	movhi	r2,2049
 8007a40:	10970604 	addi	r2,r2,23576
 8007a44:	bdd03804 	addi	r23,r23,16608
 8007a48:	15400017 	ldw	r21,0(r2)
 8007a4c:	b8c00017 	ldw	r3,0(r23)
 8007a50:	00bfffc4 	movi	r2,-1
 8007a54:	858d883a 	add	r6,r16,r22
 8007a58:	8d6b883a 	add	r21,r17,r21
 8007a5c:	1880ea26 	beq	r3,r2,8007e08 <_malloc_r+0x714>
 8007a60:	ad4403c4 	addi	r21,r21,4111
 8007a64:	00bc0004 	movi	r2,-4096
 8007a68:	a8aa703a 	and	r21,r21,r2
 8007a6c:	a80b883a 	mov	r5,r21
 8007a70:	9009883a 	mov	r4,r18
 8007a74:	d9800015 	stw	r6,0(sp)
 8007a78:	8009a400 	call	8009a40 <_sbrk_r>
 8007a7c:	1029883a 	mov	r20,r2
 8007a80:	00bfffc4 	movi	r2,-1
 8007a84:	d9800017 	ldw	r6,0(sp)
 8007a88:	a080e826 	beq	r20,r2,8007e2c <_malloc_r+0x738>
 8007a8c:	a180a636 	bltu	r20,r6,8007d28 <_malloc_r+0x634>
 8007a90:	07020074 	movhi	fp,2049
 8007a94:	e7170f04 	addi	fp,fp,23612
 8007a98:	e0800017 	ldw	r2,0(fp)
 8007a9c:	a887883a 	add	r3,r21,r2
 8007aa0:	e0c00015 	stw	r3,0(fp)
 8007aa4:	3500e626 	beq	r6,r20,8007e40 <_malloc_r+0x74c>
 8007aa8:	b9000017 	ldw	r4,0(r23)
 8007aac:	00bfffc4 	movi	r2,-1
 8007ab0:	2080ee26 	beq	r4,r2,8007e6c <_malloc_r+0x778>
 8007ab4:	a185c83a 	sub	r2,r20,r6
 8007ab8:	10c5883a 	add	r2,r2,r3
 8007abc:	e0800015 	stw	r2,0(fp)
 8007ac0:	a0c001cc 	andi	r3,r20,7
 8007ac4:	1800bc26 	beq	r3,zero,8007db8 <_malloc_r+0x6c4>
 8007ac8:	a0e9c83a 	sub	r20,r20,r3
 8007acc:	00840204 	movi	r2,4104
 8007ad0:	a5000204 	addi	r20,r20,8
 8007ad4:	10c7c83a 	sub	r3,r2,r3
 8007ad8:	a545883a 	add	r2,r20,r21
 8007adc:	1083ffcc 	andi	r2,r2,4095
 8007ae0:	18abc83a 	sub	r21,r3,r2
 8007ae4:	a80b883a 	mov	r5,r21
 8007ae8:	9009883a 	mov	r4,r18
 8007aec:	8009a400 	call	8009a40 <_sbrk_r>
 8007af0:	00ffffc4 	movi	r3,-1
 8007af4:	10c0e126 	beq	r2,r3,8007e7c <_malloc_r+0x788>
 8007af8:	1505c83a 	sub	r2,r2,r20
 8007afc:	1545883a 	add	r2,r2,r21
 8007b00:	10800054 	ori	r2,r2,1
 8007b04:	e0c00017 	ldw	r3,0(fp)
 8007b08:	9d000215 	stw	r20,8(r19)
 8007b0c:	a0800115 	stw	r2,4(r20)
 8007b10:	a8c7883a 	add	r3,r21,r3
 8007b14:	e0c00015 	stw	r3,0(fp)
 8007b18:	84c00e26 	beq	r16,r19,8007b54 <_malloc_r+0x460>
 8007b1c:	018003c4 	movi	r6,15
 8007b20:	3580a72e 	bgeu	r6,r22,8007dc0 <_malloc_r+0x6cc>
 8007b24:	81400117 	ldw	r5,4(r16)
 8007b28:	013ffe04 	movi	r4,-8
 8007b2c:	b0bffd04 	addi	r2,r22,-12
 8007b30:	1104703a 	and	r2,r2,r4
 8007b34:	2900004c 	andi	r4,r5,1
 8007b38:	2088b03a 	or	r4,r4,r2
 8007b3c:	81000115 	stw	r4,4(r16)
 8007b40:	01400144 	movi	r5,5
 8007b44:	8089883a 	add	r4,r16,r2
 8007b48:	21400115 	stw	r5,4(r4)
 8007b4c:	21400215 	stw	r5,8(r4)
 8007b50:	3080cd36 	bltu	r6,r2,8007e88 <_malloc_r+0x794>
 8007b54:	00820074 	movhi	r2,2049
 8007b58:	10970504 	addi	r2,r2,23572
 8007b5c:	11000017 	ldw	r4,0(r2)
 8007b60:	20c0012e 	bgeu	r4,r3,8007b68 <_malloc_r+0x474>
 8007b64:	10c00015 	stw	r3,0(r2)
 8007b68:	00820074 	movhi	r2,2049
 8007b6c:	10970404 	addi	r2,r2,23568
 8007b70:	11000017 	ldw	r4,0(r2)
 8007b74:	9c000217 	ldw	r16,8(r19)
 8007b78:	20c0012e 	bgeu	r4,r3,8007b80 <_malloc_r+0x48c>
 8007b7c:	10c00015 	stw	r3,0(r2)
 8007b80:	80c00117 	ldw	r3,4(r16)
 8007b84:	00bfff04 	movi	r2,-4
 8007b88:	1886703a 	and	r3,r3,r2
 8007b8c:	1c45c83a 	sub	r2,r3,r17
 8007b90:	1c400236 	bltu	r3,r17,8007b9c <_malloc_r+0x4a8>
 8007b94:	00c003c4 	movi	r3,15
 8007b98:	18800416 	blt	r3,r2,8007bac <_malloc_r+0x4b8>
 8007b9c:	9009883a 	mov	r4,r18
 8007ba0:	800f8f00 	call	800f8f0 <__malloc_unlock>
 8007ba4:	0005883a 	mov	r2,zero
 8007ba8:	003f7b06 	br	8007998 <__alt_data_end+0xfc007998>
 8007bac:	88c00054 	ori	r3,r17,1
 8007bb0:	80c00115 	stw	r3,4(r16)
 8007bb4:	8463883a 	add	r17,r16,r17
 8007bb8:	10800054 	ori	r2,r2,1
 8007bbc:	9c400215 	stw	r17,8(r19)
 8007bc0:	88800115 	stw	r2,4(r17)
 8007bc4:	9009883a 	mov	r4,r18
 8007bc8:	800f8f00 	call	800f8f0 <__malloc_unlock>
 8007bcc:	80800204 	addi	r2,r16,8
 8007bd0:	003f7106 	br	8007998 <__alt_data_end+0xfc007998>
 8007bd4:	00c00504 	movi	r3,20
 8007bd8:	18804a2e 	bgeu	r3,r2,8007d04 <_malloc_r+0x610>
 8007bdc:	00c01504 	movi	r3,84
 8007be0:	18806e36 	bltu	r3,r2,8007d9c <_malloc_r+0x6a8>
 8007be4:	8804d33a 	srli	r2,r17,12
 8007be8:	12001bc4 	addi	r8,r2,111
 8007bec:	11c01b84 	addi	r7,r2,110
 8007bf0:	4209883a 	add	r4,r8,r8
 8007bf4:	003edd06 	br	800776c <__alt_data_end+0xfc00776c>
 8007bf8:	3804d27a 	srli	r2,r7,9
 8007bfc:	00c00104 	movi	r3,4
 8007c00:	1880442e 	bgeu	r3,r2,8007d14 <_malloc_r+0x620>
 8007c04:	00c00504 	movi	r3,20
 8007c08:	18808136 	bltu	r3,r2,8007e10 <_malloc_r+0x71c>
 8007c0c:	11401704 	addi	r5,r2,92
 8007c10:	10c016c4 	addi	r3,r2,91
 8007c14:	294b883a 	add	r5,r5,r5
 8007c18:	294b883a 	add	r5,r5,r5
 8007c1c:	294b883a 	add	r5,r5,r5
 8007c20:	994b883a 	add	r5,r19,r5
 8007c24:	28800017 	ldw	r2,0(r5)
 8007c28:	01820074 	movhi	r6,2049
 8007c2c:	297ffe04 	addi	r5,r5,-8
 8007c30:	318ab104 	addi	r6,r6,10948
 8007c34:	28806526 	beq	r5,r2,8007dcc <_malloc_r+0x6d8>
 8007c38:	01bfff04 	movi	r6,-4
 8007c3c:	10c00117 	ldw	r3,4(r2)
 8007c40:	1986703a 	and	r3,r3,r6
 8007c44:	38c0022e 	bgeu	r7,r3,8007c50 <_malloc_r+0x55c>
 8007c48:	10800217 	ldw	r2,8(r2)
 8007c4c:	28bffb1e 	bne	r5,r2,8007c3c <__alt_data_end+0xfc007c3c>
 8007c50:	11400317 	ldw	r5,12(r2)
 8007c54:	98c00117 	ldw	r3,4(r19)
 8007c58:	81400315 	stw	r5,12(r16)
 8007c5c:	80800215 	stw	r2,8(r16)
 8007c60:	2c000215 	stw	r16,8(r5)
 8007c64:	14000315 	stw	r16,12(r2)
 8007c68:	003ef806 	br	800784c <__alt_data_end+0xfc00784c>
 8007c6c:	88c00054 	ori	r3,r17,1
 8007c70:	80c00115 	stw	r3,4(r16)
 8007c74:	8463883a 	add	r17,r16,r17
 8007c78:	34400515 	stw	r17,20(r6)
 8007c7c:	34400415 	stw	r17,16(r6)
 8007c80:	10c00054 	ori	r3,r2,1
 8007c84:	8a000315 	stw	r8,12(r17)
 8007c88:	8a000215 	stw	r8,8(r17)
 8007c8c:	88c00115 	stw	r3,4(r17)
 8007c90:	88a3883a 	add	r17,r17,r2
 8007c94:	88800015 	stw	r2,0(r17)
 8007c98:	9009883a 	mov	r4,r18
 8007c9c:	800f8f00 	call	800f8f0 <__malloc_unlock>
 8007ca0:	80800204 	addi	r2,r16,8
 8007ca4:	003f3c06 	br	8007998 <__alt_data_end+0xfc007998>
 8007ca8:	30c00117 	ldw	r3,4(r6)
 8007cac:	003ee706 	br	800784c <__alt_data_end+0xfc00784c>
 8007cb0:	5ac00044 	addi	r11,r11,1
 8007cb4:	588000cc 	andi	r2,r11,3
 8007cb8:	31800204 	addi	r6,r6,8
 8007cbc:	103efd1e 	bne	r2,zero,80078b4 <__alt_data_end+0xfc0078b4>
 8007cc0:	00002406 	br	8007d54 <_malloc_r+0x660>
 8007cc4:	14000317 	ldw	r16,12(r2)
 8007cc8:	143f251e 	bne	r2,r16,8007960 <__alt_data_end+0xfc007960>
 8007ccc:	21000084 	addi	r4,r4,2
 8007cd0:	003ebc06 	br	80077c4 <__alt_data_end+0xfc0077c4>
 8007cd4:	8085883a 	add	r2,r16,r2
 8007cd8:	10c00117 	ldw	r3,4(r2)
 8007cdc:	81000317 	ldw	r4,12(r16)
 8007ce0:	81400217 	ldw	r5,8(r16)
 8007ce4:	18c00054 	ori	r3,r3,1
 8007ce8:	10c00115 	stw	r3,4(r2)
 8007cec:	29000315 	stw	r4,12(r5)
 8007cf0:	21400215 	stw	r5,8(r4)
 8007cf4:	9009883a 	mov	r4,r18
 8007cf8:	800f8f00 	call	800f8f0 <__malloc_unlock>
 8007cfc:	80800204 	addi	r2,r16,8
 8007d00:	003f2506 	br	8007998 <__alt_data_end+0xfc007998>
 8007d04:	12001704 	addi	r8,r2,92
 8007d08:	11c016c4 	addi	r7,r2,91
 8007d0c:	4209883a 	add	r4,r8,r8
 8007d10:	003e9606 	br	800776c <__alt_data_end+0xfc00776c>
 8007d14:	3804d1ba 	srli	r2,r7,6
 8007d18:	11400e44 	addi	r5,r2,57
 8007d1c:	10c00e04 	addi	r3,r2,56
 8007d20:	294b883a 	add	r5,r5,r5
 8007d24:	003fbc06 	br	8007c18 <__alt_data_end+0xfc007c18>
 8007d28:	84ff5926 	beq	r16,r19,8007a90 <__alt_data_end+0xfc007a90>
 8007d2c:	00820074 	movhi	r2,2049
 8007d30:	108ab104 	addi	r2,r2,10948
 8007d34:	14000217 	ldw	r16,8(r2)
 8007d38:	00bfff04 	movi	r2,-4
 8007d3c:	80c00117 	ldw	r3,4(r16)
 8007d40:	1886703a 	and	r3,r3,r2
 8007d44:	003f9106 	br	8007b8c <__alt_data_end+0xfc007b8c>
 8007d48:	60800217 	ldw	r2,8(r12)
 8007d4c:	213fffc4 	addi	r4,r4,-1
 8007d50:	1300651e 	bne	r2,r12,8007ee8 <_malloc_r+0x7f4>
 8007d54:	208000cc 	andi	r2,r4,3
 8007d58:	633ffe04 	addi	r12,r12,-8
 8007d5c:	103ffa1e 	bne	r2,zero,8007d48 <__alt_data_end+0xfc007d48>
 8007d60:	98800117 	ldw	r2,4(r19)
 8007d64:	0146303a 	nor	r3,zero,r5
 8007d68:	1884703a 	and	r2,r3,r2
 8007d6c:	98800115 	stw	r2,4(r19)
 8007d70:	294b883a 	add	r5,r5,r5
 8007d74:	117f2836 	bltu	r2,r5,8007a18 <__alt_data_end+0xfc007a18>
 8007d78:	283f2726 	beq	r5,zero,8007a18 <__alt_data_end+0xfc007a18>
 8007d7c:	2886703a 	and	r3,r5,r2
 8007d80:	5809883a 	mov	r4,r11
 8007d84:	183ec31e 	bne	r3,zero,8007894 <__alt_data_end+0xfc007894>
 8007d88:	294b883a 	add	r5,r5,r5
 8007d8c:	2886703a 	and	r3,r5,r2
 8007d90:	21000104 	addi	r4,r4,4
 8007d94:	183ffc26 	beq	r3,zero,8007d88 <__alt_data_end+0xfc007d88>
 8007d98:	003ebe06 	br	8007894 <__alt_data_end+0xfc007894>
 8007d9c:	00c05504 	movi	r3,340
 8007da0:	18801236 	bltu	r3,r2,8007dec <_malloc_r+0x6f8>
 8007da4:	8804d3fa 	srli	r2,r17,15
 8007da8:	12001e04 	addi	r8,r2,120
 8007dac:	11c01dc4 	addi	r7,r2,119
 8007db0:	4209883a 	add	r4,r8,r8
 8007db4:	003e6d06 	br	800776c <__alt_data_end+0xfc00776c>
 8007db8:	00c40004 	movi	r3,4096
 8007dbc:	003f4606 	br	8007ad8 <__alt_data_end+0xfc007ad8>
 8007dc0:	00800044 	movi	r2,1
 8007dc4:	a0800115 	stw	r2,4(r20)
 8007dc8:	003f7406 	br	8007b9c <__alt_data_end+0xfc007b9c>
 8007dcc:	1805d0ba 	srai	r2,r3,2
 8007dd0:	01c00044 	movi	r7,1
 8007dd4:	30c00117 	ldw	r3,4(r6)
 8007dd8:	388e983a 	sll	r7,r7,r2
 8007ddc:	2805883a 	mov	r2,r5
 8007de0:	38c6b03a 	or	r3,r7,r3
 8007de4:	30c00115 	stw	r3,4(r6)
 8007de8:	003f9b06 	br	8007c58 <__alt_data_end+0xfc007c58>
 8007dec:	00c15504 	movi	r3,1364
 8007df0:	18801a36 	bltu	r3,r2,8007e5c <_malloc_r+0x768>
 8007df4:	8804d4ba 	srli	r2,r17,18
 8007df8:	12001f44 	addi	r8,r2,125
 8007dfc:	11c01f04 	addi	r7,r2,124
 8007e00:	4209883a 	add	r4,r8,r8
 8007e04:	003e5906 	br	800776c <__alt_data_end+0xfc00776c>
 8007e08:	ad400404 	addi	r21,r21,16
 8007e0c:	003f1706 	br	8007a6c <__alt_data_end+0xfc007a6c>
 8007e10:	00c01504 	movi	r3,84
 8007e14:	18802336 	bltu	r3,r2,8007ea4 <_malloc_r+0x7b0>
 8007e18:	3804d33a 	srli	r2,r7,12
 8007e1c:	11401bc4 	addi	r5,r2,111
 8007e20:	10c01b84 	addi	r3,r2,110
 8007e24:	294b883a 	add	r5,r5,r5
 8007e28:	003f7b06 	br	8007c18 <__alt_data_end+0xfc007c18>
 8007e2c:	9c000217 	ldw	r16,8(r19)
 8007e30:	00bfff04 	movi	r2,-4
 8007e34:	80c00117 	ldw	r3,4(r16)
 8007e38:	1886703a 	and	r3,r3,r2
 8007e3c:	003f5306 	br	8007b8c <__alt_data_end+0xfc007b8c>
 8007e40:	3083ffcc 	andi	r2,r6,4095
 8007e44:	103f181e 	bne	r2,zero,8007aa8 <__alt_data_end+0xfc007aa8>
 8007e48:	99000217 	ldw	r4,8(r19)
 8007e4c:	b545883a 	add	r2,r22,r21
 8007e50:	10800054 	ori	r2,r2,1
 8007e54:	20800115 	stw	r2,4(r4)
 8007e58:	003f3e06 	br	8007b54 <__alt_data_end+0xfc007b54>
 8007e5c:	01003f84 	movi	r4,254
 8007e60:	02001fc4 	movi	r8,127
 8007e64:	01c01f84 	movi	r7,126
 8007e68:	003e4006 	br	800776c <__alt_data_end+0xfc00776c>
 8007e6c:	00820074 	movhi	r2,2049
 8007e70:	10903804 	addi	r2,r2,16608
 8007e74:	15000015 	stw	r20,0(r2)
 8007e78:	003f1106 	br	8007ac0 <__alt_data_end+0xfc007ac0>
 8007e7c:	00800044 	movi	r2,1
 8007e80:	002b883a 	mov	r21,zero
 8007e84:	003f1f06 	br	8007b04 <__alt_data_end+0xfc007b04>
 8007e88:	81400204 	addi	r5,r16,8
 8007e8c:	9009883a 	mov	r4,r18
 8007e90:	8006afc0 	call	8006afc <_free_r>
 8007e94:	00820074 	movhi	r2,2049
 8007e98:	10970f04 	addi	r2,r2,23612
 8007e9c:	10c00017 	ldw	r3,0(r2)
 8007ea0:	003f2c06 	br	8007b54 <__alt_data_end+0xfc007b54>
 8007ea4:	00c05504 	movi	r3,340
 8007ea8:	18800536 	bltu	r3,r2,8007ec0 <_malloc_r+0x7cc>
 8007eac:	3804d3fa 	srli	r2,r7,15
 8007eb0:	11401e04 	addi	r5,r2,120
 8007eb4:	10c01dc4 	addi	r3,r2,119
 8007eb8:	294b883a 	add	r5,r5,r5
 8007ebc:	003f5606 	br	8007c18 <__alt_data_end+0xfc007c18>
 8007ec0:	00c15504 	movi	r3,1364
 8007ec4:	18800536 	bltu	r3,r2,8007edc <_malloc_r+0x7e8>
 8007ec8:	3804d4ba 	srli	r2,r7,18
 8007ecc:	11401f44 	addi	r5,r2,125
 8007ed0:	10c01f04 	addi	r3,r2,124
 8007ed4:	294b883a 	add	r5,r5,r5
 8007ed8:	003f4f06 	br	8007c18 <__alt_data_end+0xfc007c18>
 8007edc:	01403f84 	movi	r5,254
 8007ee0:	00c01f84 	movi	r3,126
 8007ee4:	003f4c06 	br	8007c18 <__alt_data_end+0xfc007c18>
 8007ee8:	98800117 	ldw	r2,4(r19)
 8007eec:	003fa006 	br	8007d70 <__alt_data_end+0xfc007d70>
 8007ef0:	8808d0fa 	srli	r4,r17,3
 8007ef4:	20800044 	addi	r2,r4,1
 8007ef8:	1085883a 	add	r2,r2,r2
 8007efc:	003e9006 	br	8007940 <__alt_data_end+0xfc007940>

08007f00 <memchr>:
 8007f00:	208000cc 	andi	r2,r4,3
 8007f04:	280f883a 	mov	r7,r5
 8007f08:	10003426 	beq	r2,zero,8007fdc <memchr+0xdc>
 8007f0c:	30bfffc4 	addi	r2,r6,-1
 8007f10:	30001a26 	beq	r6,zero,8007f7c <memchr+0x7c>
 8007f14:	20c00003 	ldbu	r3,0(r4)
 8007f18:	29803fcc 	andi	r6,r5,255
 8007f1c:	30c0051e 	bne	r6,r3,8007f34 <memchr+0x34>
 8007f20:	00001806 	br	8007f84 <memchr+0x84>
 8007f24:	10001526 	beq	r2,zero,8007f7c <memchr+0x7c>
 8007f28:	20c00003 	ldbu	r3,0(r4)
 8007f2c:	10bfffc4 	addi	r2,r2,-1
 8007f30:	30c01426 	beq	r6,r3,8007f84 <memchr+0x84>
 8007f34:	21000044 	addi	r4,r4,1
 8007f38:	20c000cc 	andi	r3,r4,3
 8007f3c:	183ff91e 	bne	r3,zero,8007f24 <__alt_data_end+0xfc007f24>
 8007f40:	020000c4 	movi	r8,3
 8007f44:	40801136 	bltu	r8,r2,8007f8c <memchr+0x8c>
 8007f48:	10000c26 	beq	r2,zero,8007f7c <memchr+0x7c>
 8007f4c:	20c00003 	ldbu	r3,0(r4)
 8007f50:	29403fcc 	andi	r5,r5,255
 8007f54:	28c00b26 	beq	r5,r3,8007f84 <memchr+0x84>
 8007f58:	20c00044 	addi	r3,r4,1
 8007f5c:	39803fcc 	andi	r6,r7,255
 8007f60:	2089883a 	add	r4,r4,r2
 8007f64:	00000306 	br	8007f74 <memchr+0x74>
 8007f68:	18c00044 	addi	r3,r3,1
 8007f6c:	197fffc3 	ldbu	r5,-1(r3)
 8007f70:	31400526 	beq	r6,r5,8007f88 <memchr+0x88>
 8007f74:	1805883a 	mov	r2,r3
 8007f78:	20fffb1e 	bne	r4,r3,8007f68 <__alt_data_end+0xfc007f68>
 8007f7c:	0005883a 	mov	r2,zero
 8007f80:	f800283a 	ret
 8007f84:	2005883a 	mov	r2,r4
 8007f88:	f800283a 	ret
 8007f8c:	28c03fcc 	andi	r3,r5,255
 8007f90:	1812923a 	slli	r9,r3,8
 8007f94:	02ffbff4 	movhi	r11,65279
 8007f98:	02a02074 	movhi	r10,32897
 8007f9c:	48d2b03a 	or	r9,r9,r3
 8007fa0:	4806943a 	slli	r3,r9,16
 8007fa4:	5affbfc4 	addi	r11,r11,-257
 8007fa8:	52a02004 	addi	r10,r10,-32640
 8007fac:	48d2b03a 	or	r9,r9,r3
 8007fb0:	20c00017 	ldw	r3,0(r4)
 8007fb4:	48c6f03a 	xor	r3,r9,r3
 8007fb8:	1acd883a 	add	r6,r3,r11
 8007fbc:	00c6303a 	nor	r3,zero,r3
 8007fc0:	30c6703a 	and	r3,r6,r3
 8007fc4:	1a86703a 	and	r3,r3,r10
 8007fc8:	183fe01e 	bne	r3,zero,8007f4c <__alt_data_end+0xfc007f4c>
 8007fcc:	10bfff04 	addi	r2,r2,-4
 8007fd0:	21000104 	addi	r4,r4,4
 8007fd4:	40bff636 	bltu	r8,r2,8007fb0 <__alt_data_end+0xfc007fb0>
 8007fd8:	003fdb06 	br	8007f48 <__alt_data_end+0xfc007f48>
 8007fdc:	3005883a 	mov	r2,r6
 8007fe0:	003fd706 	br	8007f40 <__alt_data_end+0xfc007f40>

08007fe4 <memcpy>:
 8007fe4:	defffd04 	addi	sp,sp,-12
 8007fe8:	dfc00215 	stw	ra,8(sp)
 8007fec:	dc400115 	stw	r17,4(sp)
 8007ff0:	dc000015 	stw	r16,0(sp)
 8007ff4:	00c003c4 	movi	r3,15
 8007ff8:	2005883a 	mov	r2,r4
 8007ffc:	1980452e 	bgeu	r3,r6,8008114 <memcpy+0x130>
 8008000:	2906b03a 	or	r3,r5,r4
 8008004:	18c000cc 	andi	r3,r3,3
 8008008:	1800441e 	bne	r3,zero,800811c <memcpy+0x138>
 800800c:	347ffc04 	addi	r17,r6,-16
 8008010:	8822d13a 	srli	r17,r17,4
 8008014:	28c00104 	addi	r3,r5,4
 8008018:	23400104 	addi	r13,r4,4
 800801c:	8820913a 	slli	r16,r17,4
 8008020:	2b000204 	addi	r12,r5,8
 8008024:	22c00204 	addi	r11,r4,8
 8008028:	84000504 	addi	r16,r16,20
 800802c:	2a800304 	addi	r10,r5,12
 8008030:	22400304 	addi	r9,r4,12
 8008034:	2c21883a 	add	r16,r5,r16
 8008038:	2811883a 	mov	r8,r5
 800803c:	200f883a 	mov	r7,r4
 8008040:	41000017 	ldw	r4,0(r8)
 8008044:	1fc00017 	ldw	ra,0(r3)
 8008048:	63c00017 	ldw	r15,0(r12)
 800804c:	39000015 	stw	r4,0(r7)
 8008050:	53800017 	ldw	r14,0(r10)
 8008054:	6fc00015 	stw	ra,0(r13)
 8008058:	5bc00015 	stw	r15,0(r11)
 800805c:	4b800015 	stw	r14,0(r9)
 8008060:	18c00404 	addi	r3,r3,16
 8008064:	39c00404 	addi	r7,r7,16
 8008068:	42000404 	addi	r8,r8,16
 800806c:	6b400404 	addi	r13,r13,16
 8008070:	63000404 	addi	r12,r12,16
 8008074:	5ac00404 	addi	r11,r11,16
 8008078:	52800404 	addi	r10,r10,16
 800807c:	4a400404 	addi	r9,r9,16
 8008080:	1c3fef1e 	bne	r3,r16,8008040 <__alt_data_end+0xfc008040>
 8008084:	89c00044 	addi	r7,r17,1
 8008088:	380e913a 	slli	r7,r7,4
 800808c:	310003cc 	andi	r4,r6,15
 8008090:	02c000c4 	movi	r11,3
 8008094:	11c7883a 	add	r3,r2,r7
 8008098:	29cb883a 	add	r5,r5,r7
 800809c:	5900212e 	bgeu	r11,r4,8008124 <memcpy+0x140>
 80080a0:	1813883a 	mov	r9,r3
 80080a4:	2811883a 	mov	r8,r5
 80080a8:	200f883a 	mov	r7,r4
 80080ac:	42800017 	ldw	r10,0(r8)
 80080b0:	4a400104 	addi	r9,r9,4
 80080b4:	39ffff04 	addi	r7,r7,-4
 80080b8:	4abfff15 	stw	r10,-4(r9)
 80080bc:	42000104 	addi	r8,r8,4
 80080c0:	59fffa36 	bltu	r11,r7,80080ac <__alt_data_end+0xfc0080ac>
 80080c4:	213fff04 	addi	r4,r4,-4
 80080c8:	2008d0ba 	srli	r4,r4,2
 80080cc:	318000cc 	andi	r6,r6,3
 80080d0:	21000044 	addi	r4,r4,1
 80080d4:	2109883a 	add	r4,r4,r4
 80080d8:	2109883a 	add	r4,r4,r4
 80080dc:	1907883a 	add	r3,r3,r4
 80080e0:	290b883a 	add	r5,r5,r4
 80080e4:	30000626 	beq	r6,zero,8008100 <memcpy+0x11c>
 80080e8:	198d883a 	add	r6,r3,r6
 80080ec:	29c00003 	ldbu	r7,0(r5)
 80080f0:	18c00044 	addi	r3,r3,1
 80080f4:	29400044 	addi	r5,r5,1
 80080f8:	19ffffc5 	stb	r7,-1(r3)
 80080fc:	19bffb1e 	bne	r3,r6,80080ec <__alt_data_end+0xfc0080ec>
 8008100:	dfc00217 	ldw	ra,8(sp)
 8008104:	dc400117 	ldw	r17,4(sp)
 8008108:	dc000017 	ldw	r16,0(sp)
 800810c:	dec00304 	addi	sp,sp,12
 8008110:	f800283a 	ret
 8008114:	2007883a 	mov	r3,r4
 8008118:	003ff206 	br	80080e4 <__alt_data_end+0xfc0080e4>
 800811c:	2007883a 	mov	r3,r4
 8008120:	003ff106 	br	80080e8 <__alt_data_end+0xfc0080e8>
 8008124:	200d883a 	mov	r6,r4
 8008128:	003fee06 	br	80080e4 <__alt_data_end+0xfc0080e4>

0800812c <memmove>:
 800812c:	2005883a 	mov	r2,r4
 8008130:	29000b2e 	bgeu	r5,r4,8008160 <memmove+0x34>
 8008134:	298f883a 	add	r7,r5,r6
 8008138:	21c0092e 	bgeu	r4,r7,8008160 <memmove+0x34>
 800813c:	2187883a 	add	r3,r4,r6
 8008140:	198bc83a 	sub	r5,r3,r6
 8008144:	30004826 	beq	r6,zero,8008268 <memmove+0x13c>
 8008148:	39ffffc4 	addi	r7,r7,-1
 800814c:	39000003 	ldbu	r4,0(r7)
 8008150:	18ffffc4 	addi	r3,r3,-1
 8008154:	19000005 	stb	r4,0(r3)
 8008158:	28fffb1e 	bne	r5,r3,8008148 <__alt_data_end+0xfc008148>
 800815c:	f800283a 	ret
 8008160:	00c003c4 	movi	r3,15
 8008164:	1980412e 	bgeu	r3,r6,800826c <memmove+0x140>
 8008168:	2886b03a 	or	r3,r5,r2
 800816c:	18c000cc 	andi	r3,r3,3
 8008170:	1800401e 	bne	r3,zero,8008274 <memmove+0x148>
 8008174:	33fffc04 	addi	r15,r6,-16
 8008178:	781ed13a 	srli	r15,r15,4
 800817c:	28c00104 	addi	r3,r5,4
 8008180:	13400104 	addi	r13,r2,4
 8008184:	781c913a 	slli	r14,r15,4
 8008188:	2b000204 	addi	r12,r5,8
 800818c:	12c00204 	addi	r11,r2,8
 8008190:	73800504 	addi	r14,r14,20
 8008194:	2a800304 	addi	r10,r5,12
 8008198:	12400304 	addi	r9,r2,12
 800819c:	2b9d883a 	add	r14,r5,r14
 80081a0:	2811883a 	mov	r8,r5
 80081a4:	100f883a 	mov	r7,r2
 80081a8:	41000017 	ldw	r4,0(r8)
 80081ac:	39c00404 	addi	r7,r7,16
 80081b0:	18c00404 	addi	r3,r3,16
 80081b4:	393ffc15 	stw	r4,-16(r7)
 80081b8:	193ffc17 	ldw	r4,-16(r3)
 80081bc:	6b400404 	addi	r13,r13,16
 80081c0:	5ac00404 	addi	r11,r11,16
 80081c4:	693ffc15 	stw	r4,-16(r13)
 80081c8:	61000017 	ldw	r4,0(r12)
 80081cc:	4a400404 	addi	r9,r9,16
 80081d0:	42000404 	addi	r8,r8,16
 80081d4:	593ffc15 	stw	r4,-16(r11)
 80081d8:	51000017 	ldw	r4,0(r10)
 80081dc:	63000404 	addi	r12,r12,16
 80081e0:	52800404 	addi	r10,r10,16
 80081e4:	493ffc15 	stw	r4,-16(r9)
 80081e8:	1bbfef1e 	bne	r3,r14,80081a8 <__alt_data_end+0xfc0081a8>
 80081ec:	79000044 	addi	r4,r15,1
 80081f0:	2008913a 	slli	r4,r4,4
 80081f4:	328003cc 	andi	r10,r6,15
 80081f8:	02c000c4 	movi	r11,3
 80081fc:	1107883a 	add	r3,r2,r4
 8008200:	290b883a 	add	r5,r5,r4
 8008204:	5a801e2e 	bgeu	r11,r10,8008280 <memmove+0x154>
 8008208:	1813883a 	mov	r9,r3
 800820c:	2811883a 	mov	r8,r5
 8008210:	500f883a 	mov	r7,r10
 8008214:	41000017 	ldw	r4,0(r8)
 8008218:	4a400104 	addi	r9,r9,4
 800821c:	39ffff04 	addi	r7,r7,-4
 8008220:	493fff15 	stw	r4,-4(r9)
 8008224:	42000104 	addi	r8,r8,4
 8008228:	59fffa36 	bltu	r11,r7,8008214 <__alt_data_end+0xfc008214>
 800822c:	513fff04 	addi	r4,r10,-4
 8008230:	2008d0ba 	srli	r4,r4,2
 8008234:	318000cc 	andi	r6,r6,3
 8008238:	21000044 	addi	r4,r4,1
 800823c:	2109883a 	add	r4,r4,r4
 8008240:	2109883a 	add	r4,r4,r4
 8008244:	1907883a 	add	r3,r3,r4
 8008248:	290b883a 	add	r5,r5,r4
 800824c:	30000b26 	beq	r6,zero,800827c <memmove+0x150>
 8008250:	198d883a 	add	r6,r3,r6
 8008254:	29c00003 	ldbu	r7,0(r5)
 8008258:	18c00044 	addi	r3,r3,1
 800825c:	29400044 	addi	r5,r5,1
 8008260:	19ffffc5 	stb	r7,-1(r3)
 8008264:	19bffb1e 	bne	r3,r6,8008254 <__alt_data_end+0xfc008254>
 8008268:	f800283a 	ret
 800826c:	1007883a 	mov	r3,r2
 8008270:	003ff606 	br	800824c <__alt_data_end+0xfc00824c>
 8008274:	1007883a 	mov	r3,r2
 8008278:	003ff506 	br	8008250 <__alt_data_end+0xfc008250>
 800827c:	f800283a 	ret
 8008280:	500d883a 	mov	r6,r10
 8008284:	003ff106 	br	800824c <__alt_data_end+0xfc00824c>

08008288 <memset>:
 8008288:	20c000cc 	andi	r3,r4,3
 800828c:	2005883a 	mov	r2,r4
 8008290:	18004426 	beq	r3,zero,80083a4 <memset+0x11c>
 8008294:	31ffffc4 	addi	r7,r6,-1
 8008298:	30004026 	beq	r6,zero,800839c <memset+0x114>
 800829c:	2813883a 	mov	r9,r5
 80082a0:	200d883a 	mov	r6,r4
 80082a4:	2007883a 	mov	r3,r4
 80082a8:	00000406 	br	80082bc <memset+0x34>
 80082ac:	3a3fffc4 	addi	r8,r7,-1
 80082b0:	31800044 	addi	r6,r6,1
 80082b4:	38003926 	beq	r7,zero,800839c <memset+0x114>
 80082b8:	400f883a 	mov	r7,r8
 80082bc:	18c00044 	addi	r3,r3,1
 80082c0:	32400005 	stb	r9,0(r6)
 80082c4:	1a0000cc 	andi	r8,r3,3
 80082c8:	403ff81e 	bne	r8,zero,80082ac <__alt_data_end+0xfc0082ac>
 80082cc:	010000c4 	movi	r4,3
 80082d0:	21c02d2e 	bgeu	r4,r7,8008388 <memset+0x100>
 80082d4:	29003fcc 	andi	r4,r5,255
 80082d8:	200c923a 	slli	r6,r4,8
 80082dc:	3108b03a 	or	r4,r6,r4
 80082e0:	200c943a 	slli	r6,r4,16
 80082e4:	218cb03a 	or	r6,r4,r6
 80082e8:	010003c4 	movi	r4,15
 80082ec:	21c0182e 	bgeu	r4,r7,8008350 <memset+0xc8>
 80082f0:	3b3ffc04 	addi	r12,r7,-16
 80082f4:	6018d13a 	srli	r12,r12,4
 80082f8:	1a000104 	addi	r8,r3,4
 80082fc:	1ac00204 	addi	r11,r3,8
 8008300:	6008913a 	slli	r4,r12,4
 8008304:	1a800304 	addi	r10,r3,12
 8008308:	1813883a 	mov	r9,r3
 800830c:	21000504 	addi	r4,r4,20
 8008310:	1909883a 	add	r4,r3,r4
 8008314:	49800015 	stw	r6,0(r9)
 8008318:	41800015 	stw	r6,0(r8)
 800831c:	59800015 	stw	r6,0(r11)
 8008320:	51800015 	stw	r6,0(r10)
 8008324:	42000404 	addi	r8,r8,16
 8008328:	4a400404 	addi	r9,r9,16
 800832c:	5ac00404 	addi	r11,r11,16
 8008330:	52800404 	addi	r10,r10,16
 8008334:	413ff71e 	bne	r8,r4,8008314 <__alt_data_end+0xfc008314>
 8008338:	63000044 	addi	r12,r12,1
 800833c:	6018913a 	slli	r12,r12,4
 8008340:	39c003cc 	andi	r7,r7,15
 8008344:	010000c4 	movi	r4,3
 8008348:	1b07883a 	add	r3,r3,r12
 800834c:	21c00e2e 	bgeu	r4,r7,8008388 <memset+0x100>
 8008350:	1813883a 	mov	r9,r3
 8008354:	3811883a 	mov	r8,r7
 8008358:	010000c4 	movi	r4,3
 800835c:	49800015 	stw	r6,0(r9)
 8008360:	423fff04 	addi	r8,r8,-4
 8008364:	4a400104 	addi	r9,r9,4
 8008368:	223ffc36 	bltu	r4,r8,800835c <__alt_data_end+0xfc00835c>
 800836c:	393fff04 	addi	r4,r7,-4
 8008370:	2008d0ba 	srli	r4,r4,2
 8008374:	39c000cc 	andi	r7,r7,3
 8008378:	21000044 	addi	r4,r4,1
 800837c:	2109883a 	add	r4,r4,r4
 8008380:	2109883a 	add	r4,r4,r4
 8008384:	1907883a 	add	r3,r3,r4
 8008388:	38000526 	beq	r7,zero,80083a0 <memset+0x118>
 800838c:	19cf883a 	add	r7,r3,r7
 8008390:	19400005 	stb	r5,0(r3)
 8008394:	18c00044 	addi	r3,r3,1
 8008398:	38fffd1e 	bne	r7,r3,8008390 <__alt_data_end+0xfc008390>
 800839c:	f800283a 	ret
 80083a0:	f800283a 	ret
 80083a4:	2007883a 	mov	r3,r4
 80083a8:	300f883a 	mov	r7,r6
 80083ac:	003fc706 	br	80082cc <__alt_data_end+0xfc0082cc>

080083b0 <_Balloc>:
 80083b0:	20801317 	ldw	r2,76(r4)
 80083b4:	defffc04 	addi	sp,sp,-16
 80083b8:	dc400115 	stw	r17,4(sp)
 80083bc:	dc000015 	stw	r16,0(sp)
 80083c0:	dfc00315 	stw	ra,12(sp)
 80083c4:	dc800215 	stw	r18,8(sp)
 80083c8:	2023883a 	mov	r17,r4
 80083cc:	2821883a 	mov	r16,r5
 80083d0:	10000f26 	beq	r2,zero,8008410 <_Balloc+0x60>
 80083d4:	8407883a 	add	r3,r16,r16
 80083d8:	18c7883a 	add	r3,r3,r3
 80083dc:	10c7883a 	add	r3,r2,r3
 80083e0:	18800017 	ldw	r2,0(r3)
 80083e4:	10001126 	beq	r2,zero,800842c <_Balloc+0x7c>
 80083e8:	11000017 	ldw	r4,0(r2)
 80083ec:	19000015 	stw	r4,0(r3)
 80083f0:	10000415 	stw	zero,16(r2)
 80083f4:	10000315 	stw	zero,12(r2)
 80083f8:	dfc00317 	ldw	ra,12(sp)
 80083fc:	dc800217 	ldw	r18,8(sp)
 8008400:	dc400117 	ldw	r17,4(sp)
 8008404:	dc000017 	ldw	r16,0(sp)
 8008408:	dec00404 	addi	sp,sp,16
 800840c:	f800283a 	ret
 8008410:	01800844 	movi	r6,33
 8008414:	01400104 	movi	r5,4
 8008418:	800b4580 	call	800b458 <_calloc_r>
 800841c:	88801315 	stw	r2,76(r17)
 8008420:	103fec1e 	bne	r2,zero,80083d4 <__alt_data_end+0xfc0083d4>
 8008424:	0005883a 	mov	r2,zero
 8008428:	003ff306 	br	80083f8 <__alt_data_end+0xfc0083f8>
 800842c:	01400044 	movi	r5,1
 8008430:	2c24983a 	sll	r18,r5,r16
 8008434:	8809883a 	mov	r4,r17
 8008438:	91800144 	addi	r6,r18,5
 800843c:	318d883a 	add	r6,r6,r6
 8008440:	318d883a 	add	r6,r6,r6
 8008444:	800b4580 	call	800b458 <_calloc_r>
 8008448:	103ff626 	beq	r2,zero,8008424 <__alt_data_end+0xfc008424>
 800844c:	14000115 	stw	r16,4(r2)
 8008450:	14800215 	stw	r18,8(r2)
 8008454:	003fe606 	br	80083f0 <__alt_data_end+0xfc0083f0>

08008458 <_Bfree>:
 8008458:	28000826 	beq	r5,zero,800847c <_Bfree+0x24>
 800845c:	28c00117 	ldw	r3,4(r5)
 8008460:	20801317 	ldw	r2,76(r4)
 8008464:	18c7883a 	add	r3,r3,r3
 8008468:	18c7883a 	add	r3,r3,r3
 800846c:	10c5883a 	add	r2,r2,r3
 8008470:	10c00017 	ldw	r3,0(r2)
 8008474:	28c00015 	stw	r3,0(r5)
 8008478:	11400015 	stw	r5,0(r2)
 800847c:	f800283a 	ret

08008480 <__multadd>:
 8008480:	defff704 	addi	sp,sp,-36
 8008484:	dc800215 	stw	r18,8(sp)
 8008488:	2c800417 	ldw	r18,16(r5)
 800848c:	dd800615 	stw	r22,24(sp)
 8008490:	dd400515 	stw	r21,20(sp)
 8008494:	dd000415 	stw	r20,16(sp)
 8008498:	dcc00315 	stw	r19,12(sp)
 800849c:	dc400115 	stw	r17,4(sp)
 80084a0:	dc000015 	stw	r16,0(sp)
 80084a4:	dfc00815 	stw	ra,32(sp)
 80084a8:	ddc00715 	stw	r23,28(sp)
 80084ac:	2827883a 	mov	r19,r5
 80084b0:	2029883a 	mov	r20,r4
 80084b4:	3023883a 	mov	r17,r6
 80084b8:	3821883a 	mov	r16,r7
 80084bc:	2d400504 	addi	r21,r5,20
 80084c0:	002d883a 	mov	r22,zero
 80084c4:	adc00017 	ldw	r23,0(r21)
 80084c8:	880b883a 	mov	r5,r17
 80084cc:	ad400104 	addi	r21,r21,4
 80084d0:	b93fffcc 	andi	r4,r23,65535
 80084d4:	800ca640 	call	800ca64 <__mulsi3>
 80084d8:	b808d43a 	srli	r4,r23,16
 80084dc:	880b883a 	mov	r5,r17
 80084e0:	1421883a 	add	r16,r2,r16
 80084e4:	800ca640 	call	800ca64 <__mulsi3>
 80084e8:	800ed43a 	srli	r7,r16,16
 80084ec:	80ffffcc 	andi	r3,r16,65535
 80084f0:	b5800044 	addi	r22,r22,1
 80084f4:	11c5883a 	add	r2,r2,r7
 80084f8:	100e943a 	slli	r7,r2,16
 80084fc:	1020d43a 	srli	r16,r2,16
 8008500:	38c7883a 	add	r3,r7,r3
 8008504:	a8ffff15 	stw	r3,-4(r21)
 8008508:	b4bfee16 	blt	r22,r18,80084c4 <__alt_data_end+0xfc0084c4>
 800850c:	80000926 	beq	r16,zero,8008534 <__multadd+0xb4>
 8008510:	98800217 	ldw	r2,8(r19)
 8008514:	9080130e 	bge	r18,r2,8008564 <__multadd+0xe4>
 8008518:	90800144 	addi	r2,r18,5
 800851c:	1085883a 	add	r2,r2,r2
 8008520:	1085883a 	add	r2,r2,r2
 8008524:	9885883a 	add	r2,r19,r2
 8008528:	14000015 	stw	r16,0(r2)
 800852c:	94800044 	addi	r18,r18,1
 8008530:	9c800415 	stw	r18,16(r19)
 8008534:	9805883a 	mov	r2,r19
 8008538:	dfc00817 	ldw	ra,32(sp)
 800853c:	ddc00717 	ldw	r23,28(sp)
 8008540:	dd800617 	ldw	r22,24(sp)
 8008544:	dd400517 	ldw	r21,20(sp)
 8008548:	dd000417 	ldw	r20,16(sp)
 800854c:	dcc00317 	ldw	r19,12(sp)
 8008550:	dc800217 	ldw	r18,8(sp)
 8008554:	dc400117 	ldw	r17,4(sp)
 8008558:	dc000017 	ldw	r16,0(sp)
 800855c:	dec00904 	addi	sp,sp,36
 8008560:	f800283a 	ret
 8008564:	99400117 	ldw	r5,4(r19)
 8008568:	a009883a 	mov	r4,r20
 800856c:	29400044 	addi	r5,r5,1
 8008570:	80083b00 	call	80083b0 <_Balloc>
 8008574:	99800417 	ldw	r6,16(r19)
 8008578:	99400304 	addi	r5,r19,12
 800857c:	11000304 	addi	r4,r2,12
 8008580:	31800084 	addi	r6,r6,2
 8008584:	318d883a 	add	r6,r6,r6
 8008588:	318d883a 	add	r6,r6,r6
 800858c:	1023883a 	mov	r17,r2
 8008590:	8007fe40 	call	8007fe4 <memcpy>
 8008594:	98000a26 	beq	r19,zero,80085c0 <__multadd+0x140>
 8008598:	98c00117 	ldw	r3,4(r19)
 800859c:	a0801317 	ldw	r2,76(r20)
 80085a0:	18c7883a 	add	r3,r3,r3
 80085a4:	18c7883a 	add	r3,r3,r3
 80085a8:	10c5883a 	add	r2,r2,r3
 80085ac:	10c00017 	ldw	r3,0(r2)
 80085b0:	98c00015 	stw	r3,0(r19)
 80085b4:	14c00015 	stw	r19,0(r2)
 80085b8:	8827883a 	mov	r19,r17
 80085bc:	003fd606 	br	8008518 <__alt_data_end+0xfc008518>
 80085c0:	8827883a 	mov	r19,r17
 80085c4:	003fd406 	br	8008518 <__alt_data_end+0xfc008518>

080085c8 <__s2b>:
 80085c8:	defff904 	addi	sp,sp,-28
 80085cc:	dc400115 	stw	r17,4(sp)
 80085d0:	dc000015 	stw	r16,0(sp)
 80085d4:	2023883a 	mov	r17,r4
 80085d8:	2821883a 	mov	r16,r5
 80085dc:	39000204 	addi	r4,r7,8
 80085e0:	01400244 	movi	r5,9
 80085e4:	dcc00315 	stw	r19,12(sp)
 80085e8:	dc800215 	stw	r18,8(sp)
 80085ec:	dfc00615 	stw	ra,24(sp)
 80085f0:	dd400515 	stw	r21,20(sp)
 80085f4:	dd000415 	stw	r20,16(sp)
 80085f8:	3825883a 	mov	r18,r7
 80085fc:	3027883a 	mov	r19,r6
 8008600:	800c8b00 	call	800c8b0 <__divsi3>
 8008604:	00c00044 	movi	r3,1
 8008608:	000b883a 	mov	r5,zero
 800860c:	1880030e 	bge	r3,r2,800861c <__s2b+0x54>
 8008610:	18c7883a 	add	r3,r3,r3
 8008614:	29400044 	addi	r5,r5,1
 8008618:	18bffd16 	blt	r3,r2,8008610 <__alt_data_end+0xfc008610>
 800861c:	8809883a 	mov	r4,r17
 8008620:	80083b00 	call	80083b0 <_Balloc>
 8008624:	d8c00717 	ldw	r3,28(sp)
 8008628:	10c00515 	stw	r3,20(r2)
 800862c:	00c00044 	movi	r3,1
 8008630:	10c00415 	stw	r3,16(r2)
 8008634:	00c00244 	movi	r3,9
 8008638:	1cc0210e 	bge	r3,r19,80086c0 <__s2b+0xf8>
 800863c:	80eb883a 	add	r21,r16,r3
 8008640:	a829883a 	mov	r20,r21
 8008644:	84e1883a 	add	r16,r16,r19
 8008648:	a1c00007 	ldb	r7,0(r20)
 800864c:	01800284 	movi	r6,10
 8008650:	a5000044 	addi	r20,r20,1
 8008654:	100b883a 	mov	r5,r2
 8008658:	39fff404 	addi	r7,r7,-48
 800865c:	8809883a 	mov	r4,r17
 8008660:	80084800 	call	8008480 <__multadd>
 8008664:	a43ff81e 	bne	r20,r16,8008648 <__alt_data_end+0xfc008648>
 8008668:	ace1883a 	add	r16,r21,r19
 800866c:	843ffe04 	addi	r16,r16,-8
 8008670:	9c800a0e 	bge	r19,r18,800869c <__s2b+0xd4>
 8008674:	94e5c83a 	sub	r18,r18,r19
 8008678:	84a5883a 	add	r18,r16,r18
 800867c:	81c00007 	ldb	r7,0(r16)
 8008680:	01800284 	movi	r6,10
 8008684:	84000044 	addi	r16,r16,1
 8008688:	100b883a 	mov	r5,r2
 800868c:	39fff404 	addi	r7,r7,-48
 8008690:	8809883a 	mov	r4,r17
 8008694:	80084800 	call	8008480 <__multadd>
 8008698:	84bff81e 	bne	r16,r18,800867c <__alt_data_end+0xfc00867c>
 800869c:	dfc00617 	ldw	ra,24(sp)
 80086a0:	dd400517 	ldw	r21,20(sp)
 80086a4:	dd000417 	ldw	r20,16(sp)
 80086a8:	dcc00317 	ldw	r19,12(sp)
 80086ac:	dc800217 	ldw	r18,8(sp)
 80086b0:	dc400117 	ldw	r17,4(sp)
 80086b4:	dc000017 	ldw	r16,0(sp)
 80086b8:	dec00704 	addi	sp,sp,28
 80086bc:	f800283a 	ret
 80086c0:	84000284 	addi	r16,r16,10
 80086c4:	1827883a 	mov	r19,r3
 80086c8:	003fe906 	br	8008670 <__alt_data_end+0xfc008670>

080086cc <__hi0bits>:
 80086cc:	20bfffec 	andhi	r2,r4,65535
 80086d0:	1000141e 	bne	r2,zero,8008724 <__hi0bits+0x58>
 80086d4:	2008943a 	slli	r4,r4,16
 80086d8:	00800404 	movi	r2,16
 80086dc:	20ffc02c 	andhi	r3,r4,65280
 80086e0:	1800021e 	bne	r3,zero,80086ec <__hi0bits+0x20>
 80086e4:	2008923a 	slli	r4,r4,8
 80086e8:	10800204 	addi	r2,r2,8
 80086ec:	20fc002c 	andhi	r3,r4,61440
 80086f0:	1800021e 	bne	r3,zero,80086fc <__hi0bits+0x30>
 80086f4:	2008913a 	slli	r4,r4,4
 80086f8:	10800104 	addi	r2,r2,4
 80086fc:	20f0002c 	andhi	r3,r4,49152
 8008700:	1800031e 	bne	r3,zero,8008710 <__hi0bits+0x44>
 8008704:	2109883a 	add	r4,r4,r4
 8008708:	10800084 	addi	r2,r2,2
 800870c:	2109883a 	add	r4,r4,r4
 8008710:	20000316 	blt	r4,zero,8008720 <__hi0bits+0x54>
 8008714:	2110002c 	andhi	r4,r4,16384
 8008718:	2000041e 	bne	r4,zero,800872c <__hi0bits+0x60>
 800871c:	00800804 	movi	r2,32
 8008720:	f800283a 	ret
 8008724:	0005883a 	mov	r2,zero
 8008728:	003fec06 	br	80086dc <__alt_data_end+0xfc0086dc>
 800872c:	10800044 	addi	r2,r2,1
 8008730:	f800283a 	ret

08008734 <__lo0bits>:
 8008734:	20c00017 	ldw	r3,0(r4)
 8008738:	188001cc 	andi	r2,r3,7
 800873c:	10000826 	beq	r2,zero,8008760 <__lo0bits+0x2c>
 8008740:	1880004c 	andi	r2,r3,1
 8008744:	1000211e 	bne	r2,zero,80087cc <__lo0bits+0x98>
 8008748:	1880008c 	andi	r2,r3,2
 800874c:	1000211e 	bne	r2,zero,80087d4 <__lo0bits+0xa0>
 8008750:	1806d0ba 	srli	r3,r3,2
 8008754:	00800084 	movi	r2,2
 8008758:	20c00015 	stw	r3,0(r4)
 800875c:	f800283a 	ret
 8008760:	18bfffcc 	andi	r2,r3,65535
 8008764:	10001326 	beq	r2,zero,80087b4 <__lo0bits+0x80>
 8008768:	0005883a 	mov	r2,zero
 800876c:	19403fcc 	andi	r5,r3,255
 8008770:	2800021e 	bne	r5,zero,800877c <__lo0bits+0x48>
 8008774:	1806d23a 	srli	r3,r3,8
 8008778:	10800204 	addi	r2,r2,8
 800877c:	194003cc 	andi	r5,r3,15
 8008780:	2800021e 	bne	r5,zero,800878c <__lo0bits+0x58>
 8008784:	1806d13a 	srli	r3,r3,4
 8008788:	10800104 	addi	r2,r2,4
 800878c:	194000cc 	andi	r5,r3,3
 8008790:	2800021e 	bne	r5,zero,800879c <__lo0bits+0x68>
 8008794:	1806d0ba 	srli	r3,r3,2
 8008798:	10800084 	addi	r2,r2,2
 800879c:	1940004c 	andi	r5,r3,1
 80087a0:	2800081e 	bne	r5,zero,80087c4 <__lo0bits+0x90>
 80087a4:	1806d07a 	srli	r3,r3,1
 80087a8:	1800051e 	bne	r3,zero,80087c0 <__lo0bits+0x8c>
 80087ac:	00800804 	movi	r2,32
 80087b0:	f800283a 	ret
 80087b4:	1806d43a 	srli	r3,r3,16
 80087b8:	00800404 	movi	r2,16
 80087bc:	003feb06 	br	800876c <__alt_data_end+0xfc00876c>
 80087c0:	10800044 	addi	r2,r2,1
 80087c4:	20c00015 	stw	r3,0(r4)
 80087c8:	f800283a 	ret
 80087cc:	0005883a 	mov	r2,zero
 80087d0:	f800283a 	ret
 80087d4:	1806d07a 	srli	r3,r3,1
 80087d8:	00800044 	movi	r2,1
 80087dc:	20c00015 	stw	r3,0(r4)
 80087e0:	f800283a 	ret

080087e4 <__i2b>:
 80087e4:	defffd04 	addi	sp,sp,-12
 80087e8:	dc000015 	stw	r16,0(sp)
 80087ec:	04000044 	movi	r16,1
 80087f0:	dc400115 	stw	r17,4(sp)
 80087f4:	2823883a 	mov	r17,r5
 80087f8:	800b883a 	mov	r5,r16
 80087fc:	dfc00215 	stw	ra,8(sp)
 8008800:	80083b00 	call	80083b0 <_Balloc>
 8008804:	14400515 	stw	r17,20(r2)
 8008808:	14000415 	stw	r16,16(r2)
 800880c:	dfc00217 	ldw	ra,8(sp)
 8008810:	dc400117 	ldw	r17,4(sp)
 8008814:	dc000017 	ldw	r16,0(sp)
 8008818:	dec00304 	addi	sp,sp,12
 800881c:	f800283a 	ret

08008820 <__multiply>:
 8008820:	deffef04 	addi	sp,sp,-68
 8008824:	dc400815 	stw	r17,32(sp)
 8008828:	dc000715 	stw	r16,28(sp)
 800882c:	34400417 	ldw	r17,16(r6)
 8008830:	2c000417 	ldw	r16,16(r5)
 8008834:	dd800d15 	stw	r22,52(sp)
 8008838:	dc800915 	stw	r18,36(sp)
 800883c:	dfc01015 	stw	ra,64(sp)
 8008840:	df000f15 	stw	fp,60(sp)
 8008844:	ddc00e15 	stw	r23,56(sp)
 8008848:	dd400c15 	stw	r21,48(sp)
 800884c:	dd000b15 	stw	r20,44(sp)
 8008850:	dcc00a15 	stw	r19,40(sp)
 8008854:	2825883a 	mov	r18,r5
 8008858:	302d883a 	mov	r22,r6
 800885c:	8440050e 	bge	r16,r17,8008874 <__multiply+0x54>
 8008860:	8007883a 	mov	r3,r16
 8008864:	3025883a 	mov	r18,r6
 8008868:	8821883a 	mov	r16,r17
 800886c:	282d883a 	mov	r22,r5
 8008870:	1823883a 	mov	r17,r3
 8008874:	90800217 	ldw	r2,8(r18)
 8008878:	8447883a 	add	r3,r16,r17
 800887c:	d8c00215 	stw	r3,8(sp)
 8008880:	91400117 	ldw	r5,4(r18)
 8008884:	10c0010e 	bge	r2,r3,800888c <__multiply+0x6c>
 8008888:	29400044 	addi	r5,r5,1
 800888c:	80083b00 	call	80083b0 <_Balloc>
 8008890:	d8c00217 	ldw	r3,8(sp)
 8008894:	d8800615 	stw	r2,24(sp)
 8008898:	18eb883a 	add	r21,r3,r3
 800889c:	ad6b883a 	add	r21,r21,r21
 80088a0:	10c00504 	addi	r3,r2,20
 80088a4:	1d6b883a 	add	r21,r3,r21
 80088a8:	d8c00115 	stw	r3,4(sp)
 80088ac:	dd400315 	stw	r21,12(sp)
 80088b0:	1805883a 	mov	r2,r3
 80088b4:	1d40042e 	bgeu	r3,r21,80088c8 <__multiply+0xa8>
 80088b8:	d8c00317 	ldw	r3,12(sp)
 80088bc:	10000015 	stw	zero,0(r2)
 80088c0:	10800104 	addi	r2,r2,4
 80088c4:	10fffc36 	bltu	r2,r3,80088b8 <__alt_data_end+0xfc0088b8>
 80088c8:	8c63883a 	add	r17,r17,r17
 80088cc:	b5800504 	addi	r22,r22,20
 80088d0:	8c63883a 	add	r17,r17,r17
 80088d4:	94800504 	addi	r18,r18,20
 80088d8:	8421883a 	add	r16,r16,r16
 80088dc:	b463883a 	add	r17,r22,r17
 80088e0:	8421883a 	add	r16,r16,r16
 80088e4:	dd800015 	stw	r22,0(sp)
 80088e8:	dc800415 	stw	r18,16(sp)
 80088ec:	dc400515 	stw	r17,20(sp)
 80088f0:	9429883a 	add	r20,r18,r16
 80088f4:	b4404f2e 	bgeu	r22,r17,8008a34 <__multiply+0x214>
 80088f8:	d8c00017 	ldw	r3,0(sp)
 80088fc:	1c800017 	ldw	r18,0(r3)
 8008900:	947fffcc 	andi	r17,r18,65535
 8008904:	88001e26 	beq	r17,zero,8008980 <__multiply+0x160>
 8008908:	dd800117 	ldw	r22,4(sp)
 800890c:	dd400417 	ldw	r21,16(sp)
 8008910:	0027883a 	mov	r19,zero
 8008914:	ac800017 	ldw	r18,0(r21)
 8008918:	b4000017 	ldw	r16,0(r22)
 800891c:	880b883a 	mov	r5,r17
 8008920:	913fffcc 	andi	r4,r18,65535
 8008924:	800ca640 	call	800ca64 <__mulsi3>
 8008928:	9008d43a 	srli	r4,r18,16
 800892c:	84bfffcc 	andi	r18,r16,65535
 8008930:	1485883a 	add	r2,r2,r18
 8008934:	14e5883a 	add	r18,r2,r19
 8008938:	8020d43a 	srli	r16,r16,16
 800893c:	9026d43a 	srli	r19,r18,16
 8008940:	880b883a 	mov	r5,r17
 8008944:	800ca640 	call	800ca64 <__mulsi3>
 8008948:	1405883a 	add	r2,r2,r16
 800894c:	14e1883a 	add	r16,r2,r19
 8008950:	90ffffcc 	andi	r3,r18,65535
 8008954:	8024943a 	slli	r18,r16,16
 8008958:	ad400104 	addi	r21,r21,4
 800895c:	b005883a 	mov	r2,r22
 8008960:	90c6b03a 	or	r3,r18,r3
 8008964:	b0c00015 	stw	r3,0(r22)
 8008968:	8026d43a 	srli	r19,r16,16
 800896c:	b5800104 	addi	r22,r22,4
 8008970:	ad3fe836 	bltu	r21,r20,8008914 <__alt_data_end+0xfc008914>
 8008974:	d8c00017 	ldw	r3,0(sp)
 8008978:	14c00115 	stw	r19,4(r2)
 800897c:	1c800017 	ldw	r18,0(r3)
 8008980:	9024d43a 	srli	r18,r18,16
 8008984:	90002226 	beq	r18,zero,8008a10 <__multiply+0x1f0>
 8008988:	d8c00117 	ldw	r3,4(sp)
 800898c:	dd800417 	ldw	r22,16(sp)
 8008990:	002f883a 	mov	r23,zero
 8008994:	1f000017 	ldw	fp,0(r3)
 8008998:	1823883a 	mov	r17,r3
 800899c:	182b883a 	mov	r21,r3
 80089a0:	e021883a 	mov	r16,fp
 80089a4:	00000106 	br	80089ac <__multiply+0x18c>
 80089a8:	982b883a 	mov	r21,r19
 80089ac:	b100000b 	ldhu	r4,0(r22)
 80089b0:	8020d43a 	srli	r16,r16,16
 80089b4:	900b883a 	mov	r5,r18
 80089b8:	800ca640 	call	800ca64 <__mulsi3>
 80089bc:	1405883a 	add	r2,r2,r16
 80089c0:	15ef883a 	add	r23,r2,r23
 80089c4:	b804943a 	slli	r2,r23,16
 80089c8:	e0ffffcc 	andi	r3,fp,65535
 80089cc:	8c400104 	addi	r17,r17,4
 80089d0:	10c6b03a 	or	r3,r2,r3
 80089d4:	88ffff15 	stw	r3,-4(r17)
 80089d8:	b5800104 	addi	r22,r22,4
 80089dc:	b13fff17 	ldw	r4,-4(r22)
 80089e0:	acc00104 	addi	r19,r21,4
 80089e4:	900b883a 	mov	r5,r18
 80089e8:	2008d43a 	srli	r4,r4,16
 80089ec:	9c000017 	ldw	r16,0(r19)
 80089f0:	800ca640 	call	800ca64 <__mulsi3>
 80089f4:	b806d43a 	srli	r3,r23,16
 80089f8:	813fffcc 	andi	r4,r16,65535
 80089fc:	1105883a 	add	r2,r2,r4
 8008a00:	10f9883a 	add	fp,r2,r3
 8008a04:	e02ed43a 	srli	r23,fp,16
 8008a08:	b53fe736 	bltu	r22,r20,80089a8 <__alt_data_end+0xfc0089a8>
 8008a0c:	af000115 	stw	fp,4(r21)
 8008a10:	d8c00017 	ldw	r3,0(sp)
 8008a14:	d9000517 	ldw	r4,20(sp)
 8008a18:	18c00104 	addi	r3,r3,4
 8008a1c:	d8c00015 	stw	r3,0(sp)
 8008a20:	d8c00117 	ldw	r3,4(sp)
 8008a24:	18c00104 	addi	r3,r3,4
 8008a28:	d8c00115 	stw	r3,4(sp)
 8008a2c:	d8c00017 	ldw	r3,0(sp)
 8008a30:	193fb136 	bltu	r3,r4,80088f8 <__alt_data_end+0xfc0088f8>
 8008a34:	d8c00217 	ldw	r3,8(sp)
 8008a38:	00c00c0e 	bge	zero,r3,8008a6c <__multiply+0x24c>
 8008a3c:	d8c00317 	ldw	r3,12(sp)
 8008a40:	18bfff17 	ldw	r2,-4(r3)
 8008a44:	1d7fff04 	addi	r21,r3,-4
 8008a48:	10000326 	beq	r2,zero,8008a58 <__multiply+0x238>
 8008a4c:	00000706 	br	8008a6c <__multiply+0x24c>
 8008a50:	a8800017 	ldw	r2,0(r21)
 8008a54:	1000051e 	bne	r2,zero,8008a6c <__multiply+0x24c>
 8008a58:	d8c00217 	ldw	r3,8(sp)
 8008a5c:	ad7fff04 	addi	r21,r21,-4
 8008a60:	18ffffc4 	addi	r3,r3,-1
 8008a64:	d8c00215 	stw	r3,8(sp)
 8008a68:	183ff91e 	bne	r3,zero,8008a50 <__alt_data_end+0xfc008a50>
 8008a6c:	d8c00617 	ldw	r3,24(sp)
 8008a70:	d9000217 	ldw	r4,8(sp)
 8008a74:	1805883a 	mov	r2,r3
 8008a78:	19000415 	stw	r4,16(r3)
 8008a7c:	dfc01017 	ldw	ra,64(sp)
 8008a80:	df000f17 	ldw	fp,60(sp)
 8008a84:	ddc00e17 	ldw	r23,56(sp)
 8008a88:	dd800d17 	ldw	r22,52(sp)
 8008a8c:	dd400c17 	ldw	r21,48(sp)
 8008a90:	dd000b17 	ldw	r20,44(sp)
 8008a94:	dcc00a17 	ldw	r19,40(sp)
 8008a98:	dc800917 	ldw	r18,36(sp)
 8008a9c:	dc400817 	ldw	r17,32(sp)
 8008aa0:	dc000717 	ldw	r16,28(sp)
 8008aa4:	dec01104 	addi	sp,sp,68
 8008aa8:	f800283a 	ret

08008aac <__pow5mult>:
 8008aac:	defffa04 	addi	sp,sp,-24
 8008ab0:	dcc00315 	stw	r19,12(sp)
 8008ab4:	dc000015 	stw	r16,0(sp)
 8008ab8:	dfc00515 	stw	ra,20(sp)
 8008abc:	dd000415 	stw	r20,16(sp)
 8008ac0:	dc800215 	stw	r18,8(sp)
 8008ac4:	dc400115 	stw	r17,4(sp)
 8008ac8:	308000cc 	andi	r2,r6,3
 8008acc:	3021883a 	mov	r16,r6
 8008ad0:	2027883a 	mov	r19,r4
 8008ad4:	10002f1e 	bne	r2,zero,8008b94 <__pow5mult+0xe8>
 8008ad8:	2825883a 	mov	r18,r5
 8008adc:	8021d0ba 	srai	r16,r16,2
 8008ae0:	80001a26 	beq	r16,zero,8008b4c <__pow5mult+0xa0>
 8008ae4:	9c401217 	ldw	r17,72(r19)
 8008ae8:	8800061e 	bne	r17,zero,8008b04 <__pow5mult+0x58>
 8008aec:	00003406 	br	8008bc0 <__pow5mult+0x114>
 8008af0:	8021d07a 	srai	r16,r16,1
 8008af4:	80001526 	beq	r16,zero,8008b4c <__pow5mult+0xa0>
 8008af8:	88800017 	ldw	r2,0(r17)
 8008afc:	10001c26 	beq	r2,zero,8008b70 <__pow5mult+0xc4>
 8008b00:	1023883a 	mov	r17,r2
 8008b04:	8080004c 	andi	r2,r16,1
 8008b08:	103ff926 	beq	r2,zero,8008af0 <__alt_data_end+0xfc008af0>
 8008b0c:	880d883a 	mov	r6,r17
 8008b10:	900b883a 	mov	r5,r18
 8008b14:	9809883a 	mov	r4,r19
 8008b18:	80088200 	call	8008820 <__multiply>
 8008b1c:	90001b26 	beq	r18,zero,8008b8c <__pow5mult+0xe0>
 8008b20:	91000117 	ldw	r4,4(r18)
 8008b24:	98c01317 	ldw	r3,76(r19)
 8008b28:	8021d07a 	srai	r16,r16,1
 8008b2c:	2109883a 	add	r4,r4,r4
 8008b30:	2109883a 	add	r4,r4,r4
 8008b34:	1907883a 	add	r3,r3,r4
 8008b38:	19000017 	ldw	r4,0(r3)
 8008b3c:	91000015 	stw	r4,0(r18)
 8008b40:	1c800015 	stw	r18,0(r3)
 8008b44:	1025883a 	mov	r18,r2
 8008b48:	803feb1e 	bne	r16,zero,8008af8 <__alt_data_end+0xfc008af8>
 8008b4c:	9005883a 	mov	r2,r18
 8008b50:	dfc00517 	ldw	ra,20(sp)
 8008b54:	dd000417 	ldw	r20,16(sp)
 8008b58:	dcc00317 	ldw	r19,12(sp)
 8008b5c:	dc800217 	ldw	r18,8(sp)
 8008b60:	dc400117 	ldw	r17,4(sp)
 8008b64:	dc000017 	ldw	r16,0(sp)
 8008b68:	dec00604 	addi	sp,sp,24
 8008b6c:	f800283a 	ret
 8008b70:	880d883a 	mov	r6,r17
 8008b74:	880b883a 	mov	r5,r17
 8008b78:	9809883a 	mov	r4,r19
 8008b7c:	80088200 	call	8008820 <__multiply>
 8008b80:	88800015 	stw	r2,0(r17)
 8008b84:	10000015 	stw	zero,0(r2)
 8008b88:	003fdd06 	br	8008b00 <__alt_data_end+0xfc008b00>
 8008b8c:	1025883a 	mov	r18,r2
 8008b90:	003fd706 	br	8008af0 <__alt_data_end+0xfc008af0>
 8008b94:	10bfffc4 	addi	r2,r2,-1
 8008b98:	1085883a 	add	r2,r2,r2
 8008b9c:	00c20074 	movhi	r3,2049
 8008ba0:	18c8ec04 	addi	r3,r3,9136
 8008ba4:	1085883a 	add	r2,r2,r2
 8008ba8:	1885883a 	add	r2,r3,r2
 8008bac:	11800017 	ldw	r6,0(r2)
 8008bb0:	000f883a 	mov	r7,zero
 8008bb4:	80084800 	call	8008480 <__multadd>
 8008bb8:	1025883a 	mov	r18,r2
 8008bbc:	003fc706 	br	8008adc <__alt_data_end+0xfc008adc>
 8008bc0:	05000044 	movi	r20,1
 8008bc4:	a00b883a 	mov	r5,r20
 8008bc8:	9809883a 	mov	r4,r19
 8008bcc:	80083b00 	call	80083b0 <_Balloc>
 8008bd0:	1023883a 	mov	r17,r2
 8008bd4:	00809c44 	movi	r2,625
 8008bd8:	88800515 	stw	r2,20(r17)
 8008bdc:	8d000415 	stw	r20,16(r17)
 8008be0:	9c401215 	stw	r17,72(r19)
 8008be4:	88000015 	stw	zero,0(r17)
 8008be8:	003fc606 	br	8008b04 <__alt_data_end+0xfc008b04>

08008bec <__lshift>:
 8008bec:	defff904 	addi	sp,sp,-28
 8008bf0:	dd400515 	stw	r21,20(sp)
 8008bf4:	dcc00315 	stw	r19,12(sp)
 8008bf8:	302bd17a 	srai	r21,r6,5
 8008bfc:	2cc00417 	ldw	r19,16(r5)
 8008c00:	28800217 	ldw	r2,8(r5)
 8008c04:	dd000415 	stw	r20,16(sp)
 8008c08:	ace7883a 	add	r19,r21,r19
 8008c0c:	dc800215 	stw	r18,8(sp)
 8008c10:	dc400115 	stw	r17,4(sp)
 8008c14:	dc000015 	stw	r16,0(sp)
 8008c18:	dfc00615 	stw	ra,24(sp)
 8008c1c:	9c000044 	addi	r16,r19,1
 8008c20:	2823883a 	mov	r17,r5
 8008c24:	3029883a 	mov	r20,r6
 8008c28:	2025883a 	mov	r18,r4
 8008c2c:	29400117 	ldw	r5,4(r5)
 8008c30:	1400030e 	bge	r2,r16,8008c40 <__lshift+0x54>
 8008c34:	1085883a 	add	r2,r2,r2
 8008c38:	29400044 	addi	r5,r5,1
 8008c3c:	143ffd16 	blt	r2,r16,8008c34 <__alt_data_end+0xfc008c34>
 8008c40:	9009883a 	mov	r4,r18
 8008c44:	80083b00 	call	80083b0 <_Balloc>
 8008c48:	10c00504 	addi	r3,r2,20
 8008c4c:	0540070e 	bge	zero,r21,8008c6c <__lshift+0x80>
 8008c50:	ad6b883a 	add	r21,r21,r21
 8008c54:	ad6b883a 	add	r21,r21,r21
 8008c58:	1809883a 	mov	r4,r3
 8008c5c:	1d47883a 	add	r3,r3,r21
 8008c60:	20000015 	stw	zero,0(r4)
 8008c64:	21000104 	addi	r4,r4,4
 8008c68:	193ffd1e 	bne	r3,r4,8008c60 <__alt_data_end+0xfc008c60>
 8008c6c:	8a000417 	ldw	r8,16(r17)
 8008c70:	89000504 	addi	r4,r17,20
 8008c74:	a18007cc 	andi	r6,r20,31
 8008c78:	4211883a 	add	r8,r8,r8
 8008c7c:	4211883a 	add	r8,r8,r8
 8008c80:	2211883a 	add	r8,r4,r8
 8008c84:	30002326 	beq	r6,zero,8008d14 <__lshift+0x128>
 8008c88:	02400804 	movi	r9,32
 8008c8c:	4993c83a 	sub	r9,r9,r6
 8008c90:	000b883a 	mov	r5,zero
 8008c94:	21c00017 	ldw	r7,0(r4)
 8008c98:	1815883a 	mov	r10,r3
 8008c9c:	18c00104 	addi	r3,r3,4
 8008ca0:	398e983a 	sll	r7,r7,r6
 8008ca4:	21000104 	addi	r4,r4,4
 8008ca8:	394ab03a 	or	r5,r7,r5
 8008cac:	197fff15 	stw	r5,-4(r3)
 8008cb0:	217fff17 	ldw	r5,-4(r4)
 8008cb4:	2a4ad83a 	srl	r5,r5,r9
 8008cb8:	223ff636 	bltu	r4,r8,8008c94 <__alt_data_end+0xfc008c94>
 8008cbc:	51400115 	stw	r5,4(r10)
 8008cc0:	28001a1e 	bne	r5,zero,8008d2c <__lshift+0x140>
 8008cc4:	843fffc4 	addi	r16,r16,-1
 8008cc8:	14000415 	stw	r16,16(r2)
 8008ccc:	88000826 	beq	r17,zero,8008cf0 <__lshift+0x104>
 8008cd0:	89000117 	ldw	r4,4(r17)
 8008cd4:	90c01317 	ldw	r3,76(r18)
 8008cd8:	2109883a 	add	r4,r4,r4
 8008cdc:	2109883a 	add	r4,r4,r4
 8008ce0:	1907883a 	add	r3,r3,r4
 8008ce4:	19000017 	ldw	r4,0(r3)
 8008ce8:	89000015 	stw	r4,0(r17)
 8008cec:	1c400015 	stw	r17,0(r3)
 8008cf0:	dfc00617 	ldw	ra,24(sp)
 8008cf4:	dd400517 	ldw	r21,20(sp)
 8008cf8:	dd000417 	ldw	r20,16(sp)
 8008cfc:	dcc00317 	ldw	r19,12(sp)
 8008d00:	dc800217 	ldw	r18,8(sp)
 8008d04:	dc400117 	ldw	r17,4(sp)
 8008d08:	dc000017 	ldw	r16,0(sp)
 8008d0c:	dec00704 	addi	sp,sp,28
 8008d10:	f800283a 	ret
 8008d14:	21400017 	ldw	r5,0(r4)
 8008d18:	18c00104 	addi	r3,r3,4
 8008d1c:	21000104 	addi	r4,r4,4
 8008d20:	197fff15 	stw	r5,-4(r3)
 8008d24:	223ffb36 	bltu	r4,r8,8008d14 <__alt_data_end+0xfc008d14>
 8008d28:	003fe606 	br	8008cc4 <__alt_data_end+0xfc008cc4>
 8008d2c:	9c000084 	addi	r16,r19,2
 8008d30:	003fe406 	br	8008cc4 <__alt_data_end+0xfc008cc4>

08008d34 <__mcmp>:
 8008d34:	20800417 	ldw	r2,16(r4)
 8008d38:	28c00417 	ldw	r3,16(r5)
 8008d3c:	10c5c83a 	sub	r2,r2,r3
 8008d40:	1000111e 	bne	r2,zero,8008d88 <__mcmp+0x54>
 8008d44:	18c7883a 	add	r3,r3,r3
 8008d48:	18c7883a 	add	r3,r3,r3
 8008d4c:	21000504 	addi	r4,r4,20
 8008d50:	29400504 	addi	r5,r5,20
 8008d54:	20c5883a 	add	r2,r4,r3
 8008d58:	28cb883a 	add	r5,r5,r3
 8008d5c:	00000106 	br	8008d64 <__mcmp+0x30>
 8008d60:	20800a2e 	bgeu	r4,r2,8008d8c <__mcmp+0x58>
 8008d64:	10bfff04 	addi	r2,r2,-4
 8008d68:	297fff04 	addi	r5,r5,-4
 8008d6c:	11800017 	ldw	r6,0(r2)
 8008d70:	28c00017 	ldw	r3,0(r5)
 8008d74:	30fffa26 	beq	r6,r3,8008d60 <__alt_data_end+0xfc008d60>
 8008d78:	30c00236 	bltu	r6,r3,8008d84 <__mcmp+0x50>
 8008d7c:	00800044 	movi	r2,1
 8008d80:	f800283a 	ret
 8008d84:	00bfffc4 	movi	r2,-1
 8008d88:	f800283a 	ret
 8008d8c:	0005883a 	mov	r2,zero
 8008d90:	f800283a 	ret

08008d94 <__mdiff>:
 8008d94:	28c00417 	ldw	r3,16(r5)
 8008d98:	30800417 	ldw	r2,16(r6)
 8008d9c:	defffa04 	addi	sp,sp,-24
 8008da0:	dcc00315 	stw	r19,12(sp)
 8008da4:	dc800215 	stw	r18,8(sp)
 8008da8:	dfc00515 	stw	ra,20(sp)
 8008dac:	dd000415 	stw	r20,16(sp)
 8008db0:	dc400115 	stw	r17,4(sp)
 8008db4:	dc000015 	stw	r16,0(sp)
 8008db8:	1887c83a 	sub	r3,r3,r2
 8008dbc:	2825883a 	mov	r18,r5
 8008dc0:	3027883a 	mov	r19,r6
 8008dc4:	1800141e 	bne	r3,zero,8008e18 <__mdiff+0x84>
 8008dc8:	1085883a 	add	r2,r2,r2
 8008dcc:	1085883a 	add	r2,r2,r2
 8008dd0:	2a000504 	addi	r8,r5,20
 8008dd4:	34000504 	addi	r16,r6,20
 8008dd8:	4087883a 	add	r3,r8,r2
 8008ddc:	8085883a 	add	r2,r16,r2
 8008de0:	00000106 	br	8008de8 <__mdiff+0x54>
 8008de4:	40c0592e 	bgeu	r8,r3,8008f4c <__mdiff+0x1b8>
 8008de8:	18ffff04 	addi	r3,r3,-4
 8008dec:	10bfff04 	addi	r2,r2,-4
 8008df0:	19c00017 	ldw	r7,0(r3)
 8008df4:	11400017 	ldw	r5,0(r2)
 8008df8:	397ffa26 	beq	r7,r5,8008de4 <__alt_data_end+0xfc008de4>
 8008dfc:	3940592e 	bgeu	r7,r5,8008f64 <__mdiff+0x1d0>
 8008e00:	9005883a 	mov	r2,r18
 8008e04:	4023883a 	mov	r17,r8
 8008e08:	9825883a 	mov	r18,r19
 8008e0c:	05000044 	movi	r20,1
 8008e10:	1027883a 	mov	r19,r2
 8008e14:	00000406 	br	8008e28 <__mdiff+0x94>
 8008e18:	18005616 	blt	r3,zero,8008f74 <__mdiff+0x1e0>
 8008e1c:	34400504 	addi	r17,r6,20
 8008e20:	2c000504 	addi	r16,r5,20
 8008e24:	0029883a 	mov	r20,zero
 8008e28:	91400117 	ldw	r5,4(r18)
 8008e2c:	80083b00 	call	80083b0 <_Balloc>
 8008e30:	92400417 	ldw	r9,16(r18)
 8008e34:	9b000417 	ldw	r12,16(r19)
 8008e38:	12c00504 	addi	r11,r2,20
 8008e3c:	4a51883a 	add	r8,r9,r9
 8008e40:	6319883a 	add	r12,r12,r12
 8008e44:	4211883a 	add	r8,r8,r8
 8008e48:	6319883a 	add	r12,r12,r12
 8008e4c:	15000315 	stw	r20,12(r2)
 8008e50:	8211883a 	add	r8,r16,r8
 8008e54:	8b19883a 	add	r12,r17,r12
 8008e58:	0007883a 	mov	r3,zero
 8008e5c:	81400017 	ldw	r5,0(r16)
 8008e60:	89c00017 	ldw	r7,0(r17)
 8008e64:	59800104 	addi	r6,r11,4
 8008e68:	293fffcc 	andi	r4,r5,65535
 8008e6c:	20c7883a 	add	r3,r4,r3
 8008e70:	393fffcc 	andi	r4,r7,65535
 8008e74:	1909c83a 	sub	r4,r3,r4
 8008e78:	280ad43a 	srli	r5,r5,16
 8008e7c:	380ed43a 	srli	r7,r7,16
 8008e80:	2007d43a 	srai	r3,r4,16
 8008e84:	213fffcc 	andi	r4,r4,65535
 8008e88:	29cbc83a 	sub	r5,r5,r7
 8008e8c:	28c7883a 	add	r3,r5,r3
 8008e90:	180a943a 	slli	r5,r3,16
 8008e94:	8c400104 	addi	r17,r17,4
 8008e98:	84000104 	addi	r16,r16,4
 8008e9c:	2908b03a 	or	r4,r5,r4
 8008ea0:	59000015 	stw	r4,0(r11)
 8008ea4:	1807d43a 	srai	r3,r3,16
 8008ea8:	3015883a 	mov	r10,r6
 8008eac:	3017883a 	mov	r11,r6
 8008eb0:	8b3fea36 	bltu	r17,r12,8008e5c <__alt_data_end+0xfc008e5c>
 8008eb4:	8200162e 	bgeu	r16,r8,8008f10 <__mdiff+0x17c>
 8008eb8:	8017883a 	mov	r11,r16
 8008ebc:	59400017 	ldw	r5,0(r11)
 8008ec0:	31800104 	addi	r6,r6,4
 8008ec4:	5ac00104 	addi	r11,r11,4
 8008ec8:	293fffcc 	andi	r4,r5,65535
 8008ecc:	20c7883a 	add	r3,r4,r3
 8008ed0:	280ed43a 	srli	r7,r5,16
 8008ed4:	180bd43a 	srai	r5,r3,16
 8008ed8:	193fffcc 	andi	r4,r3,65535
 8008edc:	3947883a 	add	r3,r7,r5
 8008ee0:	180a943a 	slli	r5,r3,16
 8008ee4:	1807d43a 	srai	r3,r3,16
 8008ee8:	2908b03a 	or	r4,r5,r4
 8008eec:	313fff15 	stw	r4,-4(r6)
 8008ef0:	5a3ff236 	bltu	r11,r8,8008ebc <__alt_data_end+0xfc008ebc>
 8008ef4:	0406303a 	nor	r3,zero,r16
 8008ef8:	1a07883a 	add	r3,r3,r8
 8008efc:	1806d0ba 	srli	r3,r3,2
 8008f00:	18c00044 	addi	r3,r3,1
 8008f04:	18c7883a 	add	r3,r3,r3
 8008f08:	18c7883a 	add	r3,r3,r3
 8008f0c:	50d5883a 	add	r10,r10,r3
 8008f10:	50ffff04 	addi	r3,r10,-4
 8008f14:	2000041e 	bne	r4,zero,8008f28 <__mdiff+0x194>
 8008f18:	18ffff04 	addi	r3,r3,-4
 8008f1c:	19000017 	ldw	r4,0(r3)
 8008f20:	4a7fffc4 	addi	r9,r9,-1
 8008f24:	203ffc26 	beq	r4,zero,8008f18 <__alt_data_end+0xfc008f18>
 8008f28:	12400415 	stw	r9,16(r2)
 8008f2c:	dfc00517 	ldw	ra,20(sp)
 8008f30:	dd000417 	ldw	r20,16(sp)
 8008f34:	dcc00317 	ldw	r19,12(sp)
 8008f38:	dc800217 	ldw	r18,8(sp)
 8008f3c:	dc400117 	ldw	r17,4(sp)
 8008f40:	dc000017 	ldw	r16,0(sp)
 8008f44:	dec00604 	addi	sp,sp,24
 8008f48:	f800283a 	ret
 8008f4c:	000b883a 	mov	r5,zero
 8008f50:	80083b00 	call	80083b0 <_Balloc>
 8008f54:	00c00044 	movi	r3,1
 8008f58:	10c00415 	stw	r3,16(r2)
 8008f5c:	10000515 	stw	zero,20(r2)
 8008f60:	003ff206 	br	8008f2c <__alt_data_end+0xfc008f2c>
 8008f64:	8023883a 	mov	r17,r16
 8008f68:	0029883a 	mov	r20,zero
 8008f6c:	4021883a 	mov	r16,r8
 8008f70:	003fad06 	br	8008e28 <__alt_data_end+0xfc008e28>
 8008f74:	9005883a 	mov	r2,r18
 8008f78:	94400504 	addi	r17,r18,20
 8008f7c:	9c000504 	addi	r16,r19,20
 8008f80:	9825883a 	mov	r18,r19
 8008f84:	05000044 	movi	r20,1
 8008f88:	1027883a 	mov	r19,r2
 8008f8c:	003fa606 	br	8008e28 <__alt_data_end+0xfc008e28>

08008f90 <__ulp>:
 8008f90:	295ffc2c 	andhi	r5,r5,32752
 8008f94:	00bf3034 	movhi	r2,64704
 8008f98:	2887883a 	add	r3,r5,r2
 8008f9c:	00c0020e 	bge	zero,r3,8008fa8 <__ulp+0x18>
 8008fa0:	0005883a 	mov	r2,zero
 8008fa4:	f800283a 	ret
 8008fa8:	00c7c83a 	sub	r3,zero,r3
 8008fac:	1807d53a 	srai	r3,r3,20
 8008fb0:	008004c4 	movi	r2,19
 8008fb4:	10c00b0e 	bge	r2,r3,8008fe4 <__ulp+0x54>
 8008fb8:	18bffb04 	addi	r2,r3,-20
 8008fbc:	01000784 	movi	r4,30
 8008fc0:	0007883a 	mov	r3,zero
 8008fc4:	20800516 	blt	r4,r2,8008fdc <__ulp+0x4c>
 8008fc8:	010007c4 	movi	r4,31
 8008fcc:	2089c83a 	sub	r4,r4,r2
 8008fd0:	00800044 	movi	r2,1
 8008fd4:	1104983a 	sll	r2,r2,r4
 8008fd8:	f800283a 	ret
 8008fdc:	00800044 	movi	r2,1
 8008fe0:	f800283a 	ret
 8008fe4:	01400234 	movhi	r5,8
 8008fe8:	28c7d83a 	sra	r3,r5,r3
 8008fec:	0005883a 	mov	r2,zero
 8008ff0:	f800283a 	ret

08008ff4 <__b2d>:
 8008ff4:	defffa04 	addi	sp,sp,-24
 8008ff8:	dc000015 	stw	r16,0(sp)
 8008ffc:	24000417 	ldw	r16,16(r4)
 8009000:	dc400115 	stw	r17,4(sp)
 8009004:	24400504 	addi	r17,r4,20
 8009008:	8421883a 	add	r16,r16,r16
 800900c:	8421883a 	add	r16,r16,r16
 8009010:	8c21883a 	add	r16,r17,r16
 8009014:	dc800215 	stw	r18,8(sp)
 8009018:	84bfff17 	ldw	r18,-4(r16)
 800901c:	dd000415 	stw	r20,16(sp)
 8009020:	dcc00315 	stw	r19,12(sp)
 8009024:	9009883a 	mov	r4,r18
 8009028:	2829883a 	mov	r20,r5
 800902c:	dfc00515 	stw	ra,20(sp)
 8009030:	80086cc0 	call	80086cc <__hi0bits>
 8009034:	00c00804 	movi	r3,32
 8009038:	1889c83a 	sub	r4,r3,r2
 800903c:	a1000015 	stw	r4,0(r20)
 8009040:	01000284 	movi	r4,10
 8009044:	84ffff04 	addi	r19,r16,-4
 8009048:	20801216 	blt	r4,r2,8009094 <__b2d+0xa0>
 800904c:	018002c4 	movi	r6,11
 8009050:	308dc83a 	sub	r6,r6,r2
 8009054:	9186d83a 	srl	r3,r18,r6
 8009058:	18cffc34 	orhi	r3,r3,16368
 800905c:	8cc0212e 	bgeu	r17,r19,80090e4 <__b2d+0xf0>
 8009060:	813ffe17 	ldw	r4,-8(r16)
 8009064:	218cd83a 	srl	r6,r4,r6
 8009068:	10800544 	addi	r2,r2,21
 800906c:	9084983a 	sll	r2,r18,r2
 8009070:	1184b03a 	or	r2,r2,r6
 8009074:	dfc00517 	ldw	ra,20(sp)
 8009078:	dd000417 	ldw	r20,16(sp)
 800907c:	dcc00317 	ldw	r19,12(sp)
 8009080:	dc800217 	ldw	r18,8(sp)
 8009084:	dc400117 	ldw	r17,4(sp)
 8009088:	dc000017 	ldw	r16,0(sp)
 800908c:	dec00604 	addi	sp,sp,24
 8009090:	f800283a 	ret
 8009094:	8cc00f2e 	bgeu	r17,r19,80090d4 <__b2d+0xe0>
 8009098:	117ffd44 	addi	r5,r2,-11
 800909c:	80bffe17 	ldw	r2,-8(r16)
 80090a0:	28000e26 	beq	r5,zero,80090dc <__b2d+0xe8>
 80090a4:	1949c83a 	sub	r4,r3,r5
 80090a8:	9164983a 	sll	r18,r18,r5
 80090ac:	1106d83a 	srl	r3,r2,r4
 80090b0:	81bffe04 	addi	r6,r16,-8
 80090b4:	948ffc34 	orhi	r18,r18,16368
 80090b8:	90c6b03a 	or	r3,r18,r3
 80090bc:	89800e2e 	bgeu	r17,r6,80090f8 <__b2d+0x104>
 80090c0:	81bffd17 	ldw	r6,-12(r16)
 80090c4:	1144983a 	sll	r2,r2,r5
 80090c8:	310ad83a 	srl	r5,r6,r4
 80090cc:	2884b03a 	or	r2,r5,r2
 80090d0:	003fe806 	br	8009074 <__alt_data_end+0xfc009074>
 80090d4:	10bffd44 	addi	r2,r2,-11
 80090d8:	1000041e 	bne	r2,zero,80090ec <__b2d+0xf8>
 80090dc:	90cffc34 	orhi	r3,r18,16368
 80090e0:	003fe406 	br	8009074 <__alt_data_end+0xfc009074>
 80090e4:	000d883a 	mov	r6,zero
 80090e8:	003fdf06 	br	8009068 <__alt_data_end+0xfc009068>
 80090ec:	90a4983a 	sll	r18,r18,r2
 80090f0:	0005883a 	mov	r2,zero
 80090f4:	003ff906 	br	80090dc <__alt_data_end+0xfc0090dc>
 80090f8:	1144983a 	sll	r2,r2,r5
 80090fc:	003fdd06 	br	8009074 <__alt_data_end+0xfc009074>

08009100 <__d2b>:
 8009100:	defff804 	addi	sp,sp,-32
 8009104:	dc000215 	stw	r16,8(sp)
 8009108:	3021883a 	mov	r16,r6
 800910c:	dc400315 	stw	r17,12(sp)
 8009110:	8022907a 	slli	r17,r16,1
 8009114:	dd000615 	stw	r20,24(sp)
 8009118:	2829883a 	mov	r20,r5
 800911c:	01400044 	movi	r5,1
 8009120:	dcc00515 	stw	r19,20(sp)
 8009124:	dc800415 	stw	r18,16(sp)
 8009128:	dfc00715 	stw	ra,28(sp)
 800912c:	3825883a 	mov	r18,r7
 8009130:	8822d57a 	srli	r17,r17,21
 8009134:	80083b00 	call	80083b0 <_Balloc>
 8009138:	1027883a 	mov	r19,r2
 800913c:	00800434 	movhi	r2,16
 8009140:	10bfffc4 	addi	r2,r2,-1
 8009144:	808c703a 	and	r6,r16,r2
 8009148:	88000126 	beq	r17,zero,8009150 <__d2b+0x50>
 800914c:	31800434 	orhi	r6,r6,16
 8009150:	d9800015 	stw	r6,0(sp)
 8009154:	a0002426 	beq	r20,zero,80091e8 <__d2b+0xe8>
 8009158:	d9000104 	addi	r4,sp,4
 800915c:	dd000115 	stw	r20,4(sp)
 8009160:	80087340 	call	8008734 <__lo0bits>
 8009164:	d8c00017 	ldw	r3,0(sp)
 8009168:	10002f1e 	bne	r2,zero,8009228 <__d2b+0x128>
 800916c:	d9000117 	ldw	r4,4(sp)
 8009170:	99000515 	stw	r4,20(r19)
 8009174:	1821003a 	cmpeq	r16,r3,zero
 8009178:	01000084 	movi	r4,2
 800917c:	2421c83a 	sub	r16,r4,r16
 8009180:	98c00615 	stw	r3,24(r19)
 8009184:	9c000415 	stw	r16,16(r19)
 8009188:	88001f1e 	bne	r17,zero,8009208 <__d2b+0x108>
 800918c:	10bef384 	addi	r2,r2,-1074
 8009190:	90800015 	stw	r2,0(r18)
 8009194:	00900034 	movhi	r2,16384
 8009198:	10bfffc4 	addi	r2,r2,-1
 800919c:	8085883a 	add	r2,r16,r2
 80091a0:	1085883a 	add	r2,r2,r2
 80091a4:	1085883a 	add	r2,r2,r2
 80091a8:	9885883a 	add	r2,r19,r2
 80091ac:	11000517 	ldw	r4,20(r2)
 80091b0:	8020917a 	slli	r16,r16,5
 80091b4:	80086cc0 	call	80086cc <__hi0bits>
 80091b8:	d8c00817 	ldw	r3,32(sp)
 80091bc:	8085c83a 	sub	r2,r16,r2
 80091c0:	18800015 	stw	r2,0(r3)
 80091c4:	9805883a 	mov	r2,r19
 80091c8:	dfc00717 	ldw	ra,28(sp)
 80091cc:	dd000617 	ldw	r20,24(sp)
 80091d0:	dcc00517 	ldw	r19,20(sp)
 80091d4:	dc800417 	ldw	r18,16(sp)
 80091d8:	dc400317 	ldw	r17,12(sp)
 80091dc:	dc000217 	ldw	r16,8(sp)
 80091e0:	dec00804 	addi	sp,sp,32
 80091e4:	f800283a 	ret
 80091e8:	d809883a 	mov	r4,sp
 80091ec:	80087340 	call	8008734 <__lo0bits>
 80091f0:	d8c00017 	ldw	r3,0(sp)
 80091f4:	04000044 	movi	r16,1
 80091f8:	9c000415 	stw	r16,16(r19)
 80091fc:	98c00515 	stw	r3,20(r19)
 8009200:	10800804 	addi	r2,r2,32
 8009204:	883fe126 	beq	r17,zero,800918c <__alt_data_end+0xfc00918c>
 8009208:	00c00d44 	movi	r3,53
 800920c:	8c7ef344 	addi	r17,r17,-1075
 8009210:	88a3883a 	add	r17,r17,r2
 8009214:	1885c83a 	sub	r2,r3,r2
 8009218:	d8c00817 	ldw	r3,32(sp)
 800921c:	94400015 	stw	r17,0(r18)
 8009220:	18800015 	stw	r2,0(r3)
 8009224:	003fe706 	br	80091c4 <__alt_data_end+0xfc0091c4>
 8009228:	01000804 	movi	r4,32
 800922c:	2089c83a 	sub	r4,r4,r2
 8009230:	1908983a 	sll	r4,r3,r4
 8009234:	d9400117 	ldw	r5,4(sp)
 8009238:	1886d83a 	srl	r3,r3,r2
 800923c:	2148b03a 	or	r4,r4,r5
 8009240:	99000515 	stw	r4,20(r19)
 8009244:	d8c00015 	stw	r3,0(sp)
 8009248:	003fca06 	br	8009174 <__alt_data_end+0xfc009174>

0800924c <__ratio>:
 800924c:	defff904 	addi	sp,sp,-28
 8009250:	dc400315 	stw	r17,12(sp)
 8009254:	2823883a 	mov	r17,r5
 8009258:	d9400104 	addi	r5,sp,4
 800925c:	dfc00615 	stw	ra,24(sp)
 8009260:	dcc00515 	stw	r19,20(sp)
 8009264:	dc800415 	stw	r18,16(sp)
 8009268:	2027883a 	mov	r19,r4
 800926c:	dc000215 	stw	r16,8(sp)
 8009270:	8008ff40 	call	8008ff4 <__b2d>
 8009274:	d80b883a 	mov	r5,sp
 8009278:	8809883a 	mov	r4,r17
 800927c:	1025883a 	mov	r18,r2
 8009280:	1821883a 	mov	r16,r3
 8009284:	8008ff40 	call	8008ff4 <__b2d>
 8009288:	8a000417 	ldw	r8,16(r17)
 800928c:	99000417 	ldw	r4,16(r19)
 8009290:	d9400117 	ldw	r5,4(sp)
 8009294:	2209c83a 	sub	r4,r4,r8
 8009298:	2010917a 	slli	r8,r4,5
 800929c:	d9000017 	ldw	r4,0(sp)
 80092a0:	2909c83a 	sub	r4,r5,r4
 80092a4:	4109883a 	add	r4,r8,r4
 80092a8:	01000e0e 	bge	zero,r4,80092e4 <__ratio+0x98>
 80092ac:	2008953a 	slli	r4,r4,20
 80092b0:	2421883a 	add	r16,r4,r16
 80092b4:	100d883a 	mov	r6,r2
 80092b8:	180f883a 	mov	r7,r3
 80092bc:	9009883a 	mov	r4,r18
 80092c0:	800b883a 	mov	r5,r16
 80092c4:	800d3380 	call	800d338 <__divdf3>
 80092c8:	dfc00617 	ldw	ra,24(sp)
 80092cc:	dcc00517 	ldw	r19,20(sp)
 80092d0:	dc800417 	ldw	r18,16(sp)
 80092d4:	dc400317 	ldw	r17,12(sp)
 80092d8:	dc000217 	ldw	r16,8(sp)
 80092dc:	dec00704 	addi	sp,sp,28
 80092e0:	f800283a 	ret
 80092e4:	2008953a 	slli	r4,r4,20
 80092e8:	1907c83a 	sub	r3,r3,r4
 80092ec:	003ff106 	br	80092b4 <__alt_data_end+0xfc0092b4>

080092f0 <_mprec_log10>:
 80092f0:	defffe04 	addi	sp,sp,-8
 80092f4:	dc000015 	stw	r16,0(sp)
 80092f8:	dfc00115 	stw	ra,4(sp)
 80092fc:	008005c4 	movi	r2,23
 8009300:	2021883a 	mov	r16,r4
 8009304:	11000d0e 	bge	r2,r4,800933c <_mprec_log10+0x4c>
 8009308:	0005883a 	mov	r2,zero
 800930c:	00cffc34 	movhi	r3,16368
 8009310:	843fffc4 	addi	r16,r16,-1
 8009314:	000d883a 	mov	r6,zero
 8009318:	01d00934 	movhi	r7,16420
 800931c:	1009883a 	mov	r4,r2
 8009320:	180b883a 	mov	r5,r3
 8009324:	800df600 	call	800df60 <__muldf3>
 8009328:	803ff91e 	bne	r16,zero,8009310 <__alt_data_end+0xfc009310>
 800932c:	dfc00117 	ldw	ra,4(sp)
 8009330:	dc000017 	ldw	r16,0(sp)
 8009334:	dec00204 	addi	sp,sp,8
 8009338:	f800283a 	ret
 800933c:	202090fa 	slli	r16,r4,3
 8009340:	00820074 	movhi	r2,2049
 8009344:	10890304 	addi	r2,r2,9228
 8009348:	1421883a 	add	r16,r2,r16
 800934c:	80800017 	ldw	r2,0(r16)
 8009350:	80c00117 	ldw	r3,4(r16)
 8009354:	dfc00117 	ldw	ra,4(sp)
 8009358:	dc000017 	ldw	r16,0(sp)
 800935c:	dec00204 	addi	sp,sp,8
 8009360:	f800283a 	ret

08009364 <__copybits>:
 8009364:	297fffc4 	addi	r5,r5,-1
 8009368:	280fd17a 	srai	r7,r5,5
 800936c:	30c00417 	ldw	r3,16(r6)
 8009370:	30800504 	addi	r2,r6,20
 8009374:	39c00044 	addi	r7,r7,1
 8009378:	18c7883a 	add	r3,r3,r3
 800937c:	39cf883a 	add	r7,r7,r7
 8009380:	18c7883a 	add	r3,r3,r3
 8009384:	39cf883a 	add	r7,r7,r7
 8009388:	10c7883a 	add	r3,r2,r3
 800938c:	21cf883a 	add	r7,r4,r7
 8009390:	10c00d2e 	bgeu	r2,r3,80093c8 <__copybits+0x64>
 8009394:	200b883a 	mov	r5,r4
 8009398:	12000017 	ldw	r8,0(r2)
 800939c:	29400104 	addi	r5,r5,4
 80093a0:	10800104 	addi	r2,r2,4
 80093a4:	2a3fff15 	stw	r8,-4(r5)
 80093a8:	10fffb36 	bltu	r2,r3,8009398 <__alt_data_end+0xfc009398>
 80093ac:	1985c83a 	sub	r2,r3,r6
 80093b0:	10bffac4 	addi	r2,r2,-21
 80093b4:	1004d0ba 	srli	r2,r2,2
 80093b8:	10800044 	addi	r2,r2,1
 80093bc:	1085883a 	add	r2,r2,r2
 80093c0:	1085883a 	add	r2,r2,r2
 80093c4:	2089883a 	add	r4,r4,r2
 80093c8:	21c0032e 	bgeu	r4,r7,80093d8 <__copybits+0x74>
 80093cc:	20000015 	stw	zero,0(r4)
 80093d0:	21000104 	addi	r4,r4,4
 80093d4:	21fffd36 	bltu	r4,r7,80093cc <__alt_data_end+0xfc0093cc>
 80093d8:	f800283a 	ret

080093dc <__any_on>:
 80093dc:	20c00417 	ldw	r3,16(r4)
 80093e0:	2805d17a 	srai	r2,r5,5
 80093e4:	21000504 	addi	r4,r4,20
 80093e8:	18800d0e 	bge	r3,r2,8009420 <__any_on+0x44>
 80093ec:	18c7883a 	add	r3,r3,r3
 80093f0:	18c7883a 	add	r3,r3,r3
 80093f4:	20c7883a 	add	r3,r4,r3
 80093f8:	20c0192e 	bgeu	r4,r3,8009460 <__any_on+0x84>
 80093fc:	18bfff17 	ldw	r2,-4(r3)
 8009400:	18ffff04 	addi	r3,r3,-4
 8009404:	1000041e 	bne	r2,zero,8009418 <__any_on+0x3c>
 8009408:	20c0142e 	bgeu	r4,r3,800945c <__any_on+0x80>
 800940c:	18ffff04 	addi	r3,r3,-4
 8009410:	19400017 	ldw	r5,0(r3)
 8009414:	283ffc26 	beq	r5,zero,8009408 <__alt_data_end+0xfc009408>
 8009418:	00800044 	movi	r2,1
 800941c:	f800283a 	ret
 8009420:	10c00a0e 	bge	r2,r3,800944c <__any_on+0x70>
 8009424:	1085883a 	add	r2,r2,r2
 8009428:	1085883a 	add	r2,r2,r2
 800942c:	294007cc 	andi	r5,r5,31
 8009430:	2087883a 	add	r3,r4,r2
 8009434:	283ff026 	beq	r5,zero,80093f8 <__alt_data_end+0xfc0093f8>
 8009438:	19800017 	ldw	r6,0(r3)
 800943c:	3144d83a 	srl	r2,r6,r5
 8009440:	114a983a 	sll	r5,r2,r5
 8009444:	317ff41e 	bne	r6,r5,8009418 <__alt_data_end+0xfc009418>
 8009448:	003feb06 	br	80093f8 <__alt_data_end+0xfc0093f8>
 800944c:	1085883a 	add	r2,r2,r2
 8009450:	1085883a 	add	r2,r2,r2
 8009454:	2087883a 	add	r3,r4,r2
 8009458:	003fe706 	br	80093f8 <__alt_data_end+0xfc0093f8>
 800945c:	f800283a 	ret
 8009460:	0005883a 	mov	r2,zero
 8009464:	f800283a 	ret

08009468 <_realloc_r>:
 8009468:	defff604 	addi	sp,sp,-40
 800946c:	dc800215 	stw	r18,8(sp)
 8009470:	dfc00915 	stw	ra,36(sp)
 8009474:	df000815 	stw	fp,32(sp)
 8009478:	ddc00715 	stw	r23,28(sp)
 800947c:	dd800615 	stw	r22,24(sp)
 8009480:	dd400515 	stw	r21,20(sp)
 8009484:	dd000415 	stw	r20,16(sp)
 8009488:	dcc00315 	stw	r19,12(sp)
 800948c:	dc400115 	stw	r17,4(sp)
 8009490:	dc000015 	stw	r16,0(sp)
 8009494:	3025883a 	mov	r18,r6
 8009498:	2800b726 	beq	r5,zero,8009778 <_realloc_r+0x310>
 800949c:	282b883a 	mov	r21,r5
 80094a0:	2029883a 	mov	r20,r4
 80094a4:	800f8cc0 	call	800f8cc <__malloc_lock>
 80094a8:	a8bfff17 	ldw	r2,-4(r21)
 80094ac:	043fff04 	movi	r16,-4
 80094b0:	90c002c4 	addi	r3,r18,11
 80094b4:	01000584 	movi	r4,22
 80094b8:	acfffe04 	addi	r19,r21,-8
 80094bc:	1420703a 	and	r16,r2,r16
 80094c0:	20c0332e 	bgeu	r4,r3,8009590 <_realloc_r+0x128>
 80094c4:	047ffe04 	movi	r17,-8
 80094c8:	1c62703a 	and	r17,r3,r17
 80094cc:	8807883a 	mov	r3,r17
 80094d0:	88005816 	blt	r17,zero,8009634 <_realloc_r+0x1cc>
 80094d4:	8c805736 	bltu	r17,r18,8009634 <_realloc_r+0x1cc>
 80094d8:	80c0300e 	bge	r16,r3,800959c <_realloc_r+0x134>
 80094dc:	07020074 	movhi	fp,2049
 80094e0:	e70ab104 	addi	fp,fp,10948
 80094e4:	e1c00217 	ldw	r7,8(fp)
 80094e8:	9c09883a 	add	r4,r19,r16
 80094ec:	22000117 	ldw	r8,4(r4)
 80094f0:	21c06326 	beq	r4,r7,8009680 <_realloc_r+0x218>
 80094f4:	017fff84 	movi	r5,-2
 80094f8:	414a703a 	and	r5,r8,r5
 80094fc:	214b883a 	add	r5,r4,r5
 8009500:	29800117 	ldw	r6,4(r5)
 8009504:	3180004c 	andi	r6,r6,1
 8009508:	30003f26 	beq	r6,zero,8009608 <_realloc_r+0x1a0>
 800950c:	1080004c 	andi	r2,r2,1
 8009510:	10008326 	beq	r2,zero,8009720 <_realloc_r+0x2b8>
 8009514:	900b883a 	mov	r5,r18
 8009518:	a009883a 	mov	r4,r20
 800951c:	80076f40 	call	80076f4 <_malloc_r>
 8009520:	1025883a 	mov	r18,r2
 8009524:	10011e26 	beq	r2,zero,80099a0 <_realloc_r+0x538>
 8009528:	a93fff17 	ldw	r4,-4(r21)
 800952c:	10fffe04 	addi	r3,r2,-8
 8009530:	00bfff84 	movi	r2,-2
 8009534:	2084703a 	and	r2,r4,r2
 8009538:	9885883a 	add	r2,r19,r2
 800953c:	1880ee26 	beq	r3,r2,80098f8 <_realloc_r+0x490>
 8009540:	81bfff04 	addi	r6,r16,-4
 8009544:	00800904 	movi	r2,36
 8009548:	1180b836 	bltu	r2,r6,800982c <_realloc_r+0x3c4>
 800954c:	00c004c4 	movi	r3,19
 8009550:	19809636 	bltu	r3,r6,80097ac <_realloc_r+0x344>
 8009554:	9005883a 	mov	r2,r18
 8009558:	a807883a 	mov	r3,r21
 800955c:	19000017 	ldw	r4,0(r3)
 8009560:	11000015 	stw	r4,0(r2)
 8009564:	19000117 	ldw	r4,4(r3)
 8009568:	11000115 	stw	r4,4(r2)
 800956c:	18c00217 	ldw	r3,8(r3)
 8009570:	10c00215 	stw	r3,8(r2)
 8009574:	a80b883a 	mov	r5,r21
 8009578:	a009883a 	mov	r4,r20
 800957c:	8006afc0 	call	8006afc <_free_r>
 8009580:	a009883a 	mov	r4,r20
 8009584:	800f8f00 	call	800f8f0 <__malloc_unlock>
 8009588:	9005883a 	mov	r2,r18
 800958c:	00001206 	br	80095d8 <_realloc_r+0x170>
 8009590:	00c00404 	movi	r3,16
 8009594:	1823883a 	mov	r17,r3
 8009598:	003fce06 	br	80094d4 <__alt_data_end+0xfc0094d4>
 800959c:	a825883a 	mov	r18,r21
 80095a0:	8445c83a 	sub	r2,r16,r17
 80095a4:	00c003c4 	movi	r3,15
 80095a8:	18802636 	bltu	r3,r2,8009644 <_realloc_r+0x1dc>
 80095ac:	99800117 	ldw	r6,4(r19)
 80095b0:	9c07883a 	add	r3,r19,r16
 80095b4:	3180004c 	andi	r6,r6,1
 80095b8:	3420b03a 	or	r16,r6,r16
 80095bc:	9c000115 	stw	r16,4(r19)
 80095c0:	18800117 	ldw	r2,4(r3)
 80095c4:	10800054 	ori	r2,r2,1
 80095c8:	18800115 	stw	r2,4(r3)
 80095cc:	a009883a 	mov	r4,r20
 80095d0:	800f8f00 	call	800f8f0 <__malloc_unlock>
 80095d4:	9005883a 	mov	r2,r18
 80095d8:	dfc00917 	ldw	ra,36(sp)
 80095dc:	df000817 	ldw	fp,32(sp)
 80095e0:	ddc00717 	ldw	r23,28(sp)
 80095e4:	dd800617 	ldw	r22,24(sp)
 80095e8:	dd400517 	ldw	r21,20(sp)
 80095ec:	dd000417 	ldw	r20,16(sp)
 80095f0:	dcc00317 	ldw	r19,12(sp)
 80095f4:	dc800217 	ldw	r18,8(sp)
 80095f8:	dc400117 	ldw	r17,4(sp)
 80095fc:	dc000017 	ldw	r16,0(sp)
 8009600:	dec00a04 	addi	sp,sp,40
 8009604:	f800283a 	ret
 8009608:	017fff04 	movi	r5,-4
 800960c:	414a703a 	and	r5,r8,r5
 8009610:	814d883a 	add	r6,r16,r5
 8009614:	30c01f16 	blt	r6,r3,8009694 <_realloc_r+0x22c>
 8009618:	20800317 	ldw	r2,12(r4)
 800961c:	20c00217 	ldw	r3,8(r4)
 8009620:	a825883a 	mov	r18,r21
 8009624:	3021883a 	mov	r16,r6
 8009628:	18800315 	stw	r2,12(r3)
 800962c:	10c00215 	stw	r3,8(r2)
 8009630:	003fdb06 	br	80095a0 <__alt_data_end+0xfc0095a0>
 8009634:	00800304 	movi	r2,12
 8009638:	a0800015 	stw	r2,0(r20)
 800963c:	0005883a 	mov	r2,zero
 8009640:	003fe506 	br	80095d8 <__alt_data_end+0xfc0095d8>
 8009644:	98c00117 	ldw	r3,4(r19)
 8009648:	9c4b883a 	add	r5,r19,r17
 800964c:	11000054 	ori	r4,r2,1
 8009650:	18c0004c 	andi	r3,r3,1
 8009654:	1c62b03a 	or	r17,r3,r17
 8009658:	9c400115 	stw	r17,4(r19)
 800965c:	29000115 	stw	r4,4(r5)
 8009660:	2885883a 	add	r2,r5,r2
 8009664:	10c00117 	ldw	r3,4(r2)
 8009668:	29400204 	addi	r5,r5,8
 800966c:	a009883a 	mov	r4,r20
 8009670:	18c00054 	ori	r3,r3,1
 8009674:	10c00115 	stw	r3,4(r2)
 8009678:	8006afc0 	call	8006afc <_free_r>
 800967c:	003fd306 	br	80095cc <__alt_data_end+0xfc0095cc>
 8009680:	017fff04 	movi	r5,-4
 8009684:	414a703a 	and	r5,r8,r5
 8009688:	89800404 	addi	r6,r17,16
 800968c:	8151883a 	add	r8,r16,r5
 8009690:	4180590e 	bge	r8,r6,80097f8 <_realloc_r+0x390>
 8009694:	1080004c 	andi	r2,r2,1
 8009698:	103f9e1e 	bne	r2,zero,8009514 <__alt_data_end+0xfc009514>
 800969c:	adbffe17 	ldw	r22,-8(r21)
 80096a0:	00bfff04 	movi	r2,-4
 80096a4:	9dadc83a 	sub	r22,r19,r22
 80096a8:	b1800117 	ldw	r6,4(r22)
 80096ac:	3084703a 	and	r2,r6,r2
 80096b0:	20002026 	beq	r4,zero,8009734 <_realloc_r+0x2cc>
 80096b4:	80af883a 	add	r23,r16,r2
 80096b8:	b96f883a 	add	r23,r23,r5
 80096bc:	21c05f26 	beq	r4,r7,800983c <_realloc_r+0x3d4>
 80096c0:	b8c01c16 	blt	r23,r3,8009734 <_realloc_r+0x2cc>
 80096c4:	20800317 	ldw	r2,12(r4)
 80096c8:	20c00217 	ldw	r3,8(r4)
 80096cc:	81bfff04 	addi	r6,r16,-4
 80096d0:	01000904 	movi	r4,36
 80096d4:	18800315 	stw	r2,12(r3)
 80096d8:	10c00215 	stw	r3,8(r2)
 80096dc:	b0c00217 	ldw	r3,8(r22)
 80096e0:	b0800317 	ldw	r2,12(r22)
 80096e4:	b4800204 	addi	r18,r22,8
 80096e8:	18800315 	stw	r2,12(r3)
 80096ec:	10c00215 	stw	r3,8(r2)
 80096f0:	21801b36 	bltu	r4,r6,8009760 <_realloc_r+0x2f8>
 80096f4:	008004c4 	movi	r2,19
 80096f8:	1180352e 	bgeu	r2,r6,80097d0 <_realloc_r+0x368>
 80096fc:	a8800017 	ldw	r2,0(r21)
 8009700:	b0800215 	stw	r2,8(r22)
 8009704:	a8800117 	ldw	r2,4(r21)
 8009708:	b0800315 	stw	r2,12(r22)
 800970c:	008006c4 	movi	r2,27
 8009710:	11807f36 	bltu	r2,r6,8009910 <_realloc_r+0x4a8>
 8009714:	b0800404 	addi	r2,r22,16
 8009718:	ad400204 	addi	r21,r21,8
 800971c:	00002d06 	br	80097d4 <_realloc_r+0x36c>
 8009720:	adbffe17 	ldw	r22,-8(r21)
 8009724:	00bfff04 	movi	r2,-4
 8009728:	9dadc83a 	sub	r22,r19,r22
 800972c:	b1000117 	ldw	r4,4(r22)
 8009730:	2084703a 	and	r2,r4,r2
 8009734:	b03f7726 	beq	r22,zero,8009514 <__alt_data_end+0xfc009514>
 8009738:	80af883a 	add	r23,r16,r2
 800973c:	b8ff7516 	blt	r23,r3,8009514 <__alt_data_end+0xfc009514>
 8009740:	b0800317 	ldw	r2,12(r22)
 8009744:	b0c00217 	ldw	r3,8(r22)
 8009748:	81bfff04 	addi	r6,r16,-4
 800974c:	01000904 	movi	r4,36
 8009750:	18800315 	stw	r2,12(r3)
 8009754:	10c00215 	stw	r3,8(r2)
 8009758:	b4800204 	addi	r18,r22,8
 800975c:	21bfe52e 	bgeu	r4,r6,80096f4 <__alt_data_end+0xfc0096f4>
 8009760:	a80b883a 	mov	r5,r21
 8009764:	9009883a 	mov	r4,r18
 8009768:	800812c0 	call	800812c <memmove>
 800976c:	b821883a 	mov	r16,r23
 8009770:	b027883a 	mov	r19,r22
 8009774:	003f8a06 	br	80095a0 <__alt_data_end+0xfc0095a0>
 8009778:	300b883a 	mov	r5,r6
 800977c:	dfc00917 	ldw	ra,36(sp)
 8009780:	df000817 	ldw	fp,32(sp)
 8009784:	ddc00717 	ldw	r23,28(sp)
 8009788:	dd800617 	ldw	r22,24(sp)
 800978c:	dd400517 	ldw	r21,20(sp)
 8009790:	dd000417 	ldw	r20,16(sp)
 8009794:	dcc00317 	ldw	r19,12(sp)
 8009798:	dc800217 	ldw	r18,8(sp)
 800979c:	dc400117 	ldw	r17,4(sp)
 80097a0:	dc000017 	ldw	r16,0(sp)
 80097a4:	dec00a04 	addi	sp,sp,40
 80097a8:	80076f41 	jmpi	80076f4 <_malloc_r>
 80097ac:	a8c00017 	ldw	r3,0(r21)
 80097b0:	90c00015 	stw	r3,0(r18)
 80097b4:	a8c00117 	ldw	r3,4(r21)
 80097b8:	90c00115 	stw	r3,4(r18)
 80097bc:	00c006c4 	movi	r3,27
 80097c0:	19804536 	bltu	r3,r6,80098d8 <_realloc_r+0x470>
 80097c4:	90800204 	addi	r2,r18,8
 80097c8:	a8c00204 	addi	r3,r21,8
 80097cc:	003f6306 	br	800955c <__alt_data_end+0xfc00955c>
 80097d0:	9005883a 	mov	r2,r18
 80097d4:	a8c00017 	ldw	r3,0(r21)
 80097d8:	b821883a 	mov	r16,r23
 80097dc:	b027883a 	mov	r19,r22
 80097e0:	10c00015 	stw	r3,0(r2)
 80097e4:	a8c00117 	ldw	r3,4(r21)
 80097e8:	10c00115 	stw	r3,4(r2)
 80097ec:	a8c00217 	ldw	r3,8(r21)
 80097f0:	10c00215 	stw	r3,8(r2)
 80097f4:	003f6a06 	br	80095a0 <__alt_data_end+0xfc0095a0>
 80097f8:	9c67883a 	add	r19,r19,r17
 80097fc:	4445c83a 	sub	r2,r8,r17
 8009800:	e4c00215 	stw	r19,8(fp)
 8009804:	10800054 	ori	r2,r2,1
 8009808:	98800115 	stw	r2,4(r19)
 800980c:	a8bfff17 	ldw	r2,-4(r21)
 8009810:	a009883a 	mov	r4,r20
 8009814:	1080004c 	andi	r2,r2,1
 8009818:	1462b03a 	or	r17,r2,r17
 800981c:	ac7fff15 	stw	r17,-4(r21)
 8009820:	800f8f00 	call	800f8f0 <__malloc_unlock>
 8009824:	a805883a 	mov	r2,r21
 8009828:	003f6b06 	br	80095d8 <__alt_data_end+0xfc0095d8>
 800982c:	a80b883a 	mov	r5,r21
 8009830:	9009883a 	mov	r4,r18
 8009834:	800812c0 	call	800812c <memmove>
 8009838:	003f4e06 	br	8009574 <__alt_data_end+0xfc009574>
 800983c:	89000404 	addi	r4,r17,16
 8009840:	b93fbc16 	blt	r23,r4,8009734 <__alt_data_end+0xfc009734>
 8009844:	b0800317 	ldw	r2,12(r22)
 8009848:	b0c00217 	ldw	r3,8(r22)
 800984c:	81bfff04 	addi	r6,r16,-4
 8009850:	01000904 	movi	r4,36
 8009854:	18800315 	stw	r2,12(r3)
 8009858:	10c00215 	stw	r3,8(r2)
 800985c:	b4800204 	addi	r18,r22,8
 8009860:	21804336 	bltu	r4,r6,8009970 <_realloc_r+0x508>
 8009864:	008004c4 	movi	r2,19
 8009868:	11803f2e 	bgeu	r2,r6,8009968 <_realloc_r+0x500>
 800986c:	a8800017 	ldw	r2,0(r21)
 8009870:	b0800215 	stw	r2,8(r22)
 8009874:	a8800117 	ldw	r2,4(r21)
 8009878:	b0800315 	stw	r2,12(r22)
 800987c:	008006c4 	movi	r2,27
 8009880:	11803f36 	bltu	r2,r6,8009980 <_realloc_r+0x518>
 8009884:	b0800404 	addi	r2,r22,16
 8009888:	ad400204 	addi	r21,r21,8
 800988c:	a8c00017 	ldw	r3,0(r21)
 8009890:	10c00015 	stw	r3,0(r2)
 8009894:	a8c00117 	ldw	r3,4(r21)
 8009898:	10c00115 	stw	r3,4(r2)
 800989c:	a8c00217 	ldw	r3,8(r21)
 80098a0:	10c00215 	stw	r3,8(r2)
 80098a4:	b447883a 	add	r3,r22,r17
 80098a8:	bc45c83a 	sub	r2,r23,r17
 80098ac:	e0c00215 	stw	r3,8(fp)
 80098b0:	10800054 	ori	r2,r2,1
 80098b4:	18800115 	stw	r2,4(r3)
 80098b8:	b0800117 	ldw	r2,4(r22)
 80098bc:	a009883a 	mov	r4,r20
 80098c0:	1080004c 	andi	r2,r2,1
 80098c4:	1462b03a 	or	r17,r2,r17
 80098c8:	b4400115 	stw	r17,4(r22)
 80098cc:	800f8f00 	call	800f8f0 <__malloc_unlock>
 80098d0:	9005883a 	mov	r2,r18
 80098d4:	003f4006 	br	80095d8 <__alt_data_end+0xfc0095d8>
 80098d8:	a8c00217 	ldw	r3,8(r21)
 80098dc:	90c00215 	stw	r3,8(r18)
 80098e0:	a8c00317 	ldw	r3,12(r21)
 80098e4:	90c00315 	stw	r3,12(r18)
 80098e8:	30801126 	beq	r6,r2,8009930 <_realloc_r+0x4c8>
 80098ec:	90800404 	addi	r2,r18,16
 80098f0:	a8c00404 	addi	r3,r21,16
 80098f4:	003f1906 	br	800955c <__alt_data_end+0xfc00955c>
 80098f8:	90ffff17 	ldw	r3,-4(r18)
 80098fc:	00bfff04 	movi	r2,-4
 8009900:	a825883a 	mov	r18,r21
 8009904:	1884703a 	and	r2,r3,r2
 8009908:	80a1883a 	add	r16,r16,r2
 800990c:	003f2406 	br	80095a0 <__alt_data_end+0xfc0095a0>
 8009910:	a8800217 	ldw	r2,8(r21)
 8009914:	b0800415 	stw	r2,16(r22)
 8009918:	a8800317 	ldw	r2,12(r21)
 800991c:	b0800515 	stw	r2,20(r22)
 8009920:	31000a26 	beq	r6,r4,800994c <_realloc_r+0x4e4>
 8009924:	b0800604 	addi	r2,r22,24
 8009928:	ad400404 	addi	r21,r21,16
 800992c:	003fa906 	br	80097d4 <__alt_data_end+0xfc0097d4>
 8009930:	a9000417 	ldw	r4,16(r21)
 8009934:	90800604 	addi	r2,r18,24
 8009938:	a8c00604 	addi	r3,r21,24
 800993c:	91000415 	stw	r4,16(r18)
 8009940:	a9000517 	ldw	r4,20(r21)
 8009944:	91000515 	stw	r4,20(r18)
 8009948:	003f0406 	br	800955c <__alt_data_end+0xfc00955c>
 800994c:	a8c00417 	ldw	r3,16(r21)
 8009950:	ad400604 	addi	r21,r21,24
 8009954:	b0800804 	addi	r2,r22,32
 8009958:	b0c00615 	stw	r3,24(r22)
 800995c:	a8ffff17 	ldw	r3,-4(r21)
 8009960:	b0c00715 	stw	r3,28(r22)
 8009964:	003f9b06 	br	80097d4 <__alt_data_end+0xfc0097d4>
 8009968:	9005883a 	mov	r2,r18
 800996c:	003fc706 	br	800988c <__alt_data_end+0xfc00988c>
 8009970:	a80b883a 	mov	r5,r21
 8009974:	9009883a 	mov	r4,r18
 8009978:	800812c0 	call	800812c <memmove>
 800997c:	003fc906 	br	80098a4 <__alt_data_end+0xfc0098a4>
 8009980:	a8800217 	ldw	r2,8(r21)
 8009984:	b0800415 	stw	r2,16(r22)
 8009988:	a8800317 	ldw	r2,12(r21)
 800998c:	b0800515 	stw	r2,20(r22)
 8009990:	31000726 	beq	r6,r4,80099b0 <_realloc_r+0x548>
 8009994:	b0800604 	addi	r2,r22,24
 8009998:	ad400404 	addi	r21,r21,16
 800999c:	003fbb06 	br	800988c <__alt_data_end+0xfc00988c>
 80099a0:	a009883a 	mov	r4,r20
 80099a4:	800f8f00 	call	800f8f0 <__malloc_unlock>
 80099a8:	0005883a 	mov	r2,zero
 80099ac:	003f0a06 	br	80095d8 <__alt_data_end+0xfc0095d8>
 80099b0:	a8c00417 	ldw	r3,16(r21)
 80099b4:	ad400604 	addi	r21,r21,24
 80099b8:	b0800804 	addi	r2,r22,32
 80099bc:	b0c00615 	stw	r3,24(r22)
 80099c0:	a8ffff17 	ldw	r3,-4(r21)
 80099c4:	b0c00715 	stw	r3,28(r22)
 80099c8:	003fb006 	br	800988c <__alt_data_end+0xfc00988c>

080099cc <__fpclassifyd>:
 80099cc:	00a00034 	movhi	r2,32768
 80099d0:	10bfffc4 	addi	r2,r2,-1
 80099d4:	2884703a 	and	r2,r5,r2
 80099d8:	10000726 	beq	r2,zero,80099f8 <__fpclassifyd+0x2c>
 80099dc:	00fffc34 	movhi	r3,65520
 80099e0:	019ff834 	movhi	r6,32736
 80099e4:	28c7883a 	add	r3,r5,r3
 80099e8:	31bfffc4 	addi	r6,r6,-1
 80099ec:	30c00536 	bltu	r6,r3,8009a04 <__fpclassifyd+0x38>
 80099f0:	00800104 	movi	r2,4
 80099f4:	f800283a 	ret
 80099f8:	2000021e 	bne	r4,zero,8009a04 <__fpclassifyd+0x38>
 80099fc:	00800084 	movi	r2,2
 8009a00:	f800283a 	ret
 8009a04:	00dffc34 	movhi	r3,32752
 8009a08:	019ff834 	movhi	r6,32736
 8009a0c:	28cb883a 	add	r5,r5,r3
 8009a10:	31bfffc4 	addi	r6,r6,-1
 8009a14:	317ff62e 	bgeu	r6,r5,80099f0 <__alt_data_end+0xfc0099f0>
 8009a18:	01400434 	movhi	r5,16
 8009a1c:	297fffc4 	addi	r5,r5,-1
 8009a20:	28800236 	bltu	r5,r2,8009a2c <__fpclassifyd+0x60>
 8009a24:	008000c4 	movi	r2,3
 8009a28:	f800283a 	ret
 8009a2c:	10c00226 	beq	r2,r3,8009a38 <__fpclassifyd+0x6c>
 8009a30:	0005883a 	mov	r2,zero
 8009a34:	f800283a 	ret
 8009a38:	2005003a 	cmpeq	r2,r4,zero
 8009a3c:	f800283a 	ret

08009a40 <_sbrk_r>:
 8009a40:	defffd04 	addi	sp,sp,-12
 8009a44:	dc000015 	stw	r16,0(sp)
 8009a48:	04020074 	movhi	r16,2049
 8009a4c:	dc400115 	stw	r17,4(sp)
 8009a50:	84170704 	addi	r16,r16,23580
 8009a54:	2023883a 	mov	r17,r4
 8009a58:	2809883a 	mov	r4,r5
 8009a5c:	dfc00215 	stw	ra,8(sp)
 8009a60:	80000015 	stw	zero,0(r16)
 8009a64:	800fad80 	call	800fad8 <sbrk>
 8009a68:	00ffffc4 	movi	r3,-1
 8009a6c:	10c00526 	beq	r2,r3,8009a84 <_sbrk_r+0x44>
 8009a70:	dfc00217 	ldw	ra,8(sp)
 8009a74:	dc400117 	ldw	r17,4(sp)
 8009a78:	dc000017 	ldw	r16,0(sp)
 8009a7c:	dec00304 	addi	sp,sp,12
 8009a80:	f800283a 	ret
 8009a84:	80c00017 	ldw	r3,0(r16)
 8009a88:	183ff926 	beq	r3,zero,8009a70 <__alt_data_end+0xfc009a70>
 8009a8c:	88c00015 	stw	r3,0(r17)
 8009a90:	003ff706 	br	8009a70 <__alt_data_end+0xfc009a70>

08009a94 <__sread>:
 8009a94:	defffe04 	addi	sp,sp,-8
 8009a98:	dc000015 	stw	r16,0(sp)
 8009a9c:	2821883a 	mov	r16,r5
 8009aa0:	2940038f 	ldh	r5,14(r5)
 8009aa4:	dfc00115 	stw	ra,4(sp)
 8009aa8:	800b9500 	call	800b950 <_read_r>
 8009aac:	10000716 	blt	r2,zero,8009acc <__sread+0x38>
 8009ab0:	80c01417 	ldw	r3,80(r16)
 8009ab4:	1887883a 	add	r3,r3,r2
 8009ab8:	80c01415 	stw	r3,80(r16)
 8009abc:	dfc00117 	ldw	ra,4(sp)
 8009ac0:	dc000017 	ldw	r16,0(sp)
 8009ac4:	dec00204 	addi	sp,sp,8
 8009ac8:	f800283a 	ret
 8009acc:	80c0030b 	ldhu	r3,12(r16)
 8009ad0:	18fbffcc 	andi	r3,r3,61439
 8009ad4:	80c0030d 	sth	r3,12(r16)
 8009ad8:	dfc00117 	ldw	ra,4(sp)
 8009adc:	dc000017 	ldw	r16,0(sp)
 8009ae0:	dec00204 	addi	sp,sp,8
 8009ae4:	f800283a 	ret

08009ae8 <__seofread>:
 8009ae8:	0005883a 	mov	r2,zero
 8009aec:	f800283a 	ret

08009af0 <__swrite>:
 8009af0:	2880030b 	ldhu	r2,12(r5)
 8009af4:	defffb04 	addi	sp,sp,-20
 8009af8:	dcc00315 	stw	r19,12(sp)
 8009afc:	dc800215 	stw	r18,8(sp)
 8009b00:	dc400115 	stw	r17,4(sp)
 8009b04:	dc000015 	stw	r16,0(sp)
 8009b08:	dfc00415 	stw	ra,16(sp)
 8009b0c:	10c0400c 	andi	r3,r2,256
 8009b10:	2821883a 	mov	r16,r5
 8009b14:	2023883a 	mov	r17,r4
 8009b18:	3025883a 	mov	r18,r6
 8009b1c:	3827883a 	mov	r19,r7
 8009b20:	18000526 	beq	r3,zero,8009b38 <__swrite+0x48>
 8009b24:	2940038f 	ldh	r5,14(r5)
 8009b28:	01c00084 	movi	r7,2
 8009b2c:	000d883a 	mov	r6,zero
 8009b30:	800b8f00 	call	800b8f0 <_lseek_r>
 8009b34:	8080030b 	ldhu	r2,12(r16)
 8009b38:	8140038f 	ldh	r5,14(r16)
 8009b3c:	10bbffcc 	andi	r2,r2,61439
 8009b40:	980f883a 	mov	r7,r19
 8009b44:	900d883a 	mov	r6,r18
 8009b48:	8809883a 	mov	r4,r17
 8009b4c:	8080030d 	sth	r2,12(r16)
 8009b50:	dfc00417 	ldw	ra,16(sp)
 8009b54:	dcc00317 	ldw	r19,12(sp)
 8009b58:	dc800217 	ldw	r18,8(sp)
 8009b5c:	dc400117 	ldw	r17,4(sp)
 8009b60:	dc000017 	ldw	r16,0(sp)
 8009b64:	dec00504 	addi	sp,sp,20
 8009b68:	800b3a41 	jmpi	800b3a4 <_write_r>

08009b6c <__sseek>:
 8009b6c:	defffe04 	addi	sp,sp,-8
 8009b70:	dc000015 	stw	r16,0(sp)
 8009b74:	2821883a 	mov	r16,r5
 8009b78:	2940038f 	ldh	r5,14(r5)
 8009b7c:	dfc00115 	stw	ra,4(sp)
 8009b80:	800b8f00 	call	800b8f0 <_lseek_r>
 8009b84:	00ffffc4 	movi	r3,-1
 8009b88:	10c00826 	beq	r2,r3,8009bac <__sseek+0x40>
 8009b8c:	80c0030b 	ldhu	r3,12(r16)
 8009b90:	80801415 	stw	r2,80(r16)
 8009b94:	18c40014 	ori	r3,r3,4096
 8009b98:	80c0030d 	sth	r3,12(r16)
 8009b9c:	dfc00117 	ldw	ra,4(sp)
 8009ba0:	dc000017 	ldw	r16,0(sp)
 8009ba4:	dec00204 	addi	sp,sp,8
 8009ba8:	f800283a 	ret
 8009bac:	80c0030b 	ldhu	r3,12(r16)
 8009bb0:	18fbffcc 	andi	r3,r3,61439
 8009bb4:	80c0030d 	sth	r3,12(r16)
 8009bb8:	dfc00117 	ldw	ra,4(sp)
 8009bbc:	dc000017 	ldw	r16,0(sp)
 8009bc0:	dec00204 	addi	sp,sp,8
 8009bc4:	f800283a 	ret

08009bc8 <__sclose>:
 8009bc8:	2940038f 	ldh	r5,14(r5)
 8009bcc:	800b4041 	jmpi	800b404 <_close_r>

08009bd0 <strcmp>:
 8009bd0:	2144b03a 	or	r2,r4,r5
 8009bd4:	108000cc 	andi	r2,r2,3
 8009bd8:	1000171e 	bne	r2,zero,8009c38 <strcmp+0x68>
 8009bdc:	20800017 	ldw	r2,0(r4)
 8009be0:	28c00017 	ldw	r3,0(r5)
 8009be4:	10c0141e 	bne	r2,r3,8009c38 <strcmp+0x68>
 8009be8:	027fbff4 	movhi	r9,65279
 8009bec:	4a7fbfc4 	addi	r9,r9,-257
 8009bf0:	0086303a 	nor	r3,zero,r2
 8009bf4:	02202074 	movhi	r8,32897
 8009bf8:	1245883a 	add	r2,r2,r9
 8009bfc:	42202004 	addi	r8,r8,-32640
 8009c00:	10c4703a 	and	r2,r2,r3
 8009c04:	1204703a 	and	r2,r2,r8
 8009c08:	10000226 	beq	r2,zero,8009c14 <strcmp+0x44>
 8009c0c:	00002306 	br	8009c9c <strcmp+0xcc>
 8009c10:	1000221e 	bne	r2,zero,8009c9c <strcmp+0xcc>
 8009c14:	21000104 	addi	r4,r4,4
 8009c18:	20c00017 	ldw	r3,0(r4)
 8009c1c:	29400104 	addi	r5,r5,4
 8009c20:	29800017 	ldw	r6,0(r5)
 8009c24:	1a4f883a 	add	r7,r3,r9
 8009c28:	00c4303a 	nor	r2,zero,r3
 8009c2c:	3884703a 	and	r2,r7,r2
 8009c30:	1204703a 	and	r2,r2,r8
 8009c34:	19bff626 	beq	r3,r6,8009c10 <__alt_data_end+0xfc009c10>
 8009c38:	20800003 	ldbu	r2,0(r4)
 8009c3c:	10c03fcc 	andi	r3,r2,255
 8009c40:	18c0201c 	xori	r3,r3,128
 8009c44:	18ffe004 	addi	r3,r3,-128
 8009c48:	18000c26 	beq	r3,zero,8009c7c <strcmp+0xac>
 8009c4c:	29800007 	ldb	r6,0(r5)
 8009c50:	19800326 	beq	r3,r6,8009c60 <strcmp+0x90>
 8009c54:	00001306 	br	8009ca4 <strcmp+0xd4>
 8009c58:	29800007 	ldb	r6,0(r5)
 8009c5c:	11800b1e 	bne	r2,r6,8009c8c <strcmp+0xbc>
 8009c60:	21000044 	addi	r4,r4,1
 8009c64:	20c00003 	ldbu	r3,0(r4)
 8009c68:	29400044 	addi	r5,r5,1
 8009c6c:	18803fcc 	andi	r2,r3,255
 8009c70:	1080201c 	xori	r2,r2,128
 8009c74:	10bfe004 	addi	r2,r2,-128
 8009c78:	103ff71e 	bne	r2,zero,8009c58 <__alt_data_end+0xfc009c58>
 8009c7c:	0007883a 	mov	r3,zero
 8009c80:	28800003 	ldbu	r2,0(r5)
 8009c84:	1885c83a 	sub	r2,r3,r2
 8009c88:	f800283a 	ret
 8009c8c:	28800003 	ldbu	r2,0(r5)
 8009c90:	18c03fcc 	andi	r3,r3,255
 8009c94:	1885c83a 	sub	r2,r3,r2
 8009c98:	f800283a 	ret
 8009c9c:	0005883a 	mov	r2,zero
 8009ca0:	f800283a 	ret
 8009ca4:	10c03fcc 	andi	r3,r2,255
 8009ca8:	003ff506 	br	8009c80 <__alt_data_end+0xfc009c80>

08009cac <__sprint_r.part.0>:
 8009cac:	28801917 	ldw	r2,100(r5)
 8009cb0:	defff604 	addi	sp,sp,-40
 8009cb4:	dd400515 	stw	r21,20(sp)
 8009cb8:	dfc00915 	stw	ra,36(sp)
 8009cbc:	df000815 	stw	fp,32(sp)
 8009cc0:	ddc00715 	stw	r23,28(sp)
 8009cc4:	dd800615 	stw	r22,24(sp)
 8009cc8:	dd000415 	stw	r20,16(sp)
 8009ccc:	dcc00315 	stw	r19,12(sp)
 8009cd0:	dc800215 	stw	r18,8(sp)
 8009cd4:	dc400115 	stw	r17,4(sp)
 8009cd8:	dc000015 	stw	r16,0(sp)
 8009cdc:	1088000c 	andi	r2,r2,8192
 8009ce0:	302b883a 	mov	r21,r6
 8009ce4:	10002e26 	beq	r2,zero,8009da0 <__sprint_r.part.0+0xf4>
 8009ce8:	30800217 	ldw	r2,8(r6)
 8009cec:	35800017 	ldw	r22,0(r6)
 8009cf0:	10002926 	beq	r2,zero,8009d98 <__sprint_r.part.0+0xec>
 8009cf4:	2827883a 	mov	r19,r5
 8009cf8:	2029883a 	mov	r20,r4
 8009cfc:	b5c00104 	addi	r23,r22,4
 8009d00:	04bfffc4 	movi	r18,-1
 8009d04:	bc400017 	ldw	r17,0(r23)
 8009d08:	b4000017 	ldw	r16,0(r22)
 8009d0c:	0039883a 	mov	fp,zero
 8009d10:	8822d0ba 	srli	r17,r17,2
 8009d14:	8800031e 	bne	r17,zero,8009d24 <__sprint_r.part.0+0x78>
 8009d18:	00001806 	br	8009d7c <__sprint_r.part.0+0xd0>
 8009d1c:	84000104 	addi	r16,r16,4
 8009d20:	8f001526 	beq	r17,fp,8009d78 <__sprint_r.part.0+0xcc>
 8009d24:	81400017 	ldw	r5,0(r16)
 8009d28:	980d883a 	mov	r6,r19
 8009d2c:	a009883a 	mov	r4,r20
 8009d30:	800b79c0 	call	800b79c <_fputwc_r>
 8009d34:	e7000044 	addi	fp,fp,1
 8009d38:	14bff81e 	bne	r2,r18,8009d1c <__alt_data_end+0xfc009d1c>
 8009d3c:	9005883a 	mov	r2,r18
 8009d40:	a8000215 	stw	zero,8(r21)
 8009d44:	a8000115 	stw	zero,4(r21)
 8009d48:	dfc00917 	ldw	ra,36(sp)
 8009d4c:	df000817 	ldw	fp,32(sp)
 8009d50:	ddc00717 	ldw	r23,28(sp)
 8009d54:	dd800617 	ldw	r22,24(sp)
 8009d58:	dd400517 	ldw	r21,20(sp)
 8009d5c:	dd000417 	ldw	r20,16(sp)
 8009d60:	dcc00317 	ldw	r19,12(sp)
 8009d64:	dc800217 	ldw	r18,8(sp)
 8009d68:	dc400117 	ldw	r17,4(sp)
 8009d6c:	dc000017 	ldw	r16,0(sp)
 8009d70:	dec00a04 	addi	sp,sp,40
 8009d74:	f800283a 	ret
 8009d78:	a8800217 	ldw	r2,8(r21)
 8009d7c:	8c63883a 	add	r17,r17,r17
 8009d80:	8c63883a 	add	r17,r17,r17
 8009d84:	1445c83a 	sub	r2,r2,r17
 8009d88:	a8800215 	stw	r2,8(r21)
 8009d8c:	b5800204 	addi	r22,r22,8
 8009d90:	bdc00204 	addi	r23,r23,8
 8009d94:	103fdb1e 	bne	r2,zero,8009d04 <__alt_data_end+0xfc009d04>
 8009d98:	0005883a 	mov	r2,zero
 8009d9c:	003fe806 	br	8009d40 <__alt_data_end+0xfc009d40>
 8009da0:	8006e0c0 	call	8006e0c <__sfvwrite_r>
 8009da4:	003fe606 	br	8009d40 <__alt_data_end+0xfc009d40>

08009da8 <__sprint_r>:
 8009da8:	30c00217 	ldw	r3,8(r6)
 8009dac:	18000126 	beq	r3,zero,8009db4 <__sprint_r+0xc>
 8009db0:	8009cac1 	jmpi	8009cac <__sprint_r.part.0>
 8009db4:	30000115 	stw	zero,4(r6)
 8009db8:	0005883a 	mov	r2,zero
 8009dbc:	f800283a 	ret

08009dc0 <___vfiprintf_internal_r>:
 8009dc0:	deffca04 	addi	sp,sp,-216
 8009dc4:	dd403115 	stw	r21,196(sp)
 8009dc8:	dfc03515 	stw	ra,212(sp)
 8009dcc:	df003415 	stw	fp,208(sp)
 8009dd0:	ddc03315 	stw	r23,204(sp)
 8009dd4:	dd803215 	stw	r22,200(sp)
 8009dd8:	dd003015 	stw	r20,192(sp)
 8009ddc:	dcc02f15 	stw	r19,188(sp)
 8009de0:	dc802e15 	stw	r18,184(sp)
 8009de4:	dc402d15 	stw	r17,180(sp)
 8009de8:	dc002c15 	stw	r16,176(sp)
 8009dec:	d9002115 	stw	r4,132(sp)
 8009df0:	d9402015 	stw	r5,128(sp)
 8009df4:	d9c02215 	stw	r7,136(sp)
 8009df8:	302b883a 	mov	r21,r6
 8009dfc:	20000226 	beq	r4,zero,8009e08 <___vfiprintf_internal_r+0x48>
 8009e00:	20800e17 	ldw	r2,56(r4)
 8009e04:	1000cf26 	beq	r2,zero,800a144 <___vfiprintf_internal_r+0x384>
 8009e08:	d8c02017 	ldw	r3,128(sp)
 8009e0c:	1880030b 	ldhu	r2,12(r3)
 8009e10:	10c8000c 	andi	r3,r2,8192
 8009e14:	1800071e 	bne	r3,zero,8009e34 <___vfiprintf_internal_r+0x74>
 8009e18:	d9402017 	ldw	r5,128(sp)
 8009e1c:	00f7ffc4 	movi	r3,-8193
 8009e20:	10880014 	ori	r2,r2,8192
 8009e24:	29001917 	ldw	r4,100(r5)
 8009e28:	2880030d 	sth	r2,12(r5)
 8009e2c:	20c6703a 	and	r3,r4,r3
 8009e30:	28c01915 	stw	r3,100(r5)
 8009e34:	10c0020c 	andi	r3,r2,8
 8009e38:	1800a526 	beq	r3,zero,800a0d0 <___vfiprintf_internal_r+0x310>
 8009e3c:	d9002017 	ldw	r4,128(sp)
 8009e40:	20c00417 	ldw	r3,16(r4)
 8009e44:	1800a226 	beq	r3,zero,800a0d0 <___vfiprintf_internal_r+0x310>
 8009e48:	1080068c 	andi	r2,r2,26
 8009e4c:	00c00284 	movi	r3,10
 8009e50:	10c0a826 	beq	r2,r3,800a0f4 <___vfiprintf_internal_r+0x334>
 8009e54:	d9001a04 	addi	r4,sp,104
 8009e58:	d94019c4 	addi	r5,sp,103
 8009e5c:	04820074 	movhi	r18,2049
 8009e60:	2145c83a 	sub	r2,r4,r5
 8009e64:	94893504 	addi	r18,r18,9428
 8009e68:	d9001e15 	stw	r4,120(sp)
 8009e6c:	d9401f15 	stw	r5,124(sp)
 8009e70:	dec01a15 	stw	sp,104(sp)
 8009e74:	d8001c15 	stw	zero,112(sp)
 8009e78:	d8001b15 	stw	zero,108(sp)
 8009e7c:	d811883a 	mov	r8,sp
 8009e80:	d8002615 	stw	zero,152(sp)
 8009e84:	d8002415 	stw	zero,144(sp)
 8009e88:	d8802815 	stw	r2,160(sp)
 8009e8c:	a82d883a 	mov	r22,r21
 8009e90:	b0800007 	ldb	r2,0(r22)
 8009e94:	10040d26 	beq	r2,zero,800aecc <___vfiprintf_internal_r+0x110c>
 8009e98:	00c00944 	movi	r3,37
 8009e9c:	b029883a 	mov	r20,r22
 8009ea0:	10c0021e 	bne	r2,r3,8009eac <___vfiprintf_internal_r+0xec>
 8009ea4:	00001606 	br	8009f00 <___vfiprintf_internal_r+0x140>
 8009ea8:	10c00326 	beq	r2,r3,8009eb8 <___vfiprintf_internal_r+0xf8>
 8009eac:	a5000044 	addi	r20,r20,1
 8009eb0:	a0800007 	ldb	r2,0(r20)
 8009eb4:	103ffc1e 	bne	r2,zero,8009ea8 <__alt_data_end+0xfc009ea8>
 8009eb8:	a5a1c83a 	sub	r16,r20,r22
 8009ebc:	80001026 	beq	r16,zero,8009f00 <___vfiprintf_internal_r+0x140>
 8009ec0:	d8c01c17 	ldw	r3,112(sp)
 8009ec4:	d8801b17 	ldw	r2,108(sp)
 8009ec8:	45800015 	stw	r22,0(r8)
 8009ecc:	80c7883a 	add	r3,r16,r3
 8009ed0:	10800044 	addi	r2,r2,1
 8009ed4:	44000115 	stw	r16,4(r8)
 8009ed8:	d8c01c15 	stw	r3,112(sp)
 8009edc:	d8801b15 	stw	r2,108(sp)
 8009ee0:	010001c4 	movi	r4,7
 8009ee4:	2080750e 	bge	r4,r2,800a0bc <___vfiprintf_internal_r+0x2fc>
 8009ee8:	1803951e 	bne	r3,zero,800ad40 <___vfiprintf_internal_r+0xf80>
 8009eec:	d8c02417 	ldw	r3,144(sp)
 8009ef0:	d8001b15 	stw	zero,108(sp)
 8009ef4:	d811883a 	mov	r8,sp
 8009ef8:	1c07883a 	add	r3,r3,r16
 8009efc:	d8c02415 	stw	r3,144(sp)
 8009f00:	a0800007 	ldb	r2,0(r20)
 8009f04:	1002e026 	beq	r2,zero,800aa88 <___vfiprintf_internal_r+0xcc8>
 8009f08:	a5800044 	addi	r22,r20,1
 8009f0c:	a0c00047 	ldb	r3,1(r20)
 8009f10:	d8001d85 	stb	zero,118(sp)
 8009f14:	0027883a 	mov	r19,zero
 8009f18:	d8002305 	stb	zero,140(sp)
 8009f1c:	043fffc4 	movi	r16,-1
 8009f20:	d8002515 	stw	zero,148(sp)
 8009f24:	0023883a 	mov	r17,zero
 8009f28:	05001604 	movi	r20,88
 8009f2c:	05400244 	movi	r21,9
 8009f30:	402f883a 	mov	r23,r8
 8009f34:	b5800044 	addi	r22,r22,1
 8009f38:	18bff804 	addi	r2,r3,-32
 8009f3c:	a0827736 	bltu	r20,r2,800a91c <___vfiprintf_internal_r+0xb5c>
 8009f40:	100490ba 	slli	r2,r2,2
 8009f44:	01020074 	movhi	r4,2049
 8009f48:	2127d604 	addi	r4,r4,-24744
 8009f4c:	1105883a 	add	r2,r2,r4
 8009f50:	10800017 	ldw	r2,0(r2)
 8009f54:	1000683a 	jmp	r2
 8009f58:	0800a61c 	xori	zero,at,664
 8009f5c:	0800a91c 	xori	zero,at,676
 8009f60:	0800a91c 	xori	zero,at,676
 8009f64:	0800a638 	rdprs	zero,at,664
 8009f68:	0800a91c 	xori	zero,at,676
 8009f6c:	0800a91c 	xori	zero,at,676
 8009f70:	0800a91c 	xori	zero,at,676
 8009f74:	0800a91c 	xori	zero,at,676
 8009f78:	0800a91c 	xori	zero,at,676
 8009f7c:	0800a91c 	xori	zero,at,676
 8009f80:	0800a840 	call	800a84 <__alt_mem_onchip_memory2_0+0x800a84>
 8009f84:	0800a864 	muli	zero,at,673
 8009f88:	0800a91c 	xori	zero,at,676
 8009f8c:	0800a15c 	xori	zero,at,645
 8009f90:	0800a878 	rdprs	zero,at,673
 8009f94:	0800a91c 	xori	zero,at,676
 8009f98:	0800a644 	addi	zero,at,665
 8009f9c:	0800a650 	cmplti	zero,at,665
 8009fa0:	0800a650 	cmplti	zero,at,665
 8009fa4:	0800a650 	cmplti	zero,at,665
 8009fa8:	0800a650 	cmplti	zero,at,665
 8009fac:	0800a650 	cmplti	zero,at,665
 8009fb0:	0800a650 	cmplti	zero,at,665
 8009fb4:	0800a650 	cmplti	zero,at,665
 8009fb8:	0800a650 	cmplti	zero,at,665
 8009fbc:	0800a650 	cmplti	zero,at,665
 8009fc0:	0800a91c 	xori	zero,at,676
 8009fc4:	0800a91c 	xori	zero,at,676
 8009fc8:	0800a91c 	xori	zero,at,676
 8009fcc:	0800a91c 	xori	zero,at,676
 8009fd0:	0800a91c 	xori	zero,at,676
 8009fd4:	0800a91c 	xori	zero,at,676
 8009fd8:	0800a91c 	xori	zero,at,676
 8009fdc:	0800a91c 	xori	zero,at,676
 8009fe0:	0800a91c 	xori	zero,at,676
 8009fe4:	0800a91c 	xori	zero,at,676
 8009fe8:	0800a690 	cmplti	zero,at,666
 8009fec:	0800a91c 	xori	zero,at,676
 8009ff0:	0800a91c 	xori	zero,at,676
 8009ff4:	0800a91c 	xori	zero,at,676
 8009ff8:	0800a91c 	xori	zero,at,676
 8009ffc:	0800a91c 	xori	zero,at,676
 800a000:	0800a91c 	xori	zero,at,676
 800a004:	0800a91c 	xori	zero,at,676
 800a008:	0800a91c 	xori	zero,at,676
 800a00c:	0800a91c 	xori	zero,at,676
 800a010:	0800a91c 	xori	zero,at,676
 800a014:	0800a6cc 	andi	zero,at,667
 800a018:	0800a91c 	xori	zero,at,676
 800a01c:	0800a91c 	xori	zero,at,676
 800a020:	0800a91c 	xori	zero,at,676
 800a024:	0800a91c 	xori	zero,at,676
 800a028:	0800a91c 	xori	zero,at,676
 800a02c:	0800a728 	cmpgeui	zero,at,668
 800a030:	0800a91c 	xori	zero,at,676
 800a034:	0800a91c 	xori	zero,at,676
 800a038:	0800a79c 	xori	zero,at,670
 800a03c:	0800a91c 	xori	zero,at,676
 800a040:	0800a91c 	xori	zero,at,676
 800a044:	0800a91c 	xori	zero,at,676
 800a048:	0800a91c 	xori	zero,at,676
 800a04c:	0800a91c 	xori	zero,at,676
 800a050:	0800a91c 	xori	zero,at,676
 800a054:	0800a91c 	xori	zero,at,676
 800a058:	0800a91c 	xori	zero,at,676
 800a05c:	0800a91c 	xori	zero,at,676
 800a060:	0800a91c 	xori	zero,at,676
 800a064:	0800a544 	addi	zero,at,661
 800a068:	0800a574 	orhi	zero,at,661
 800a06c:	0800a91c 	xori	zero,at,676
 800a070:	0800a91c 	xori	zero,at,676
 800a074:	0800a91c 	xori	zero,at,676
 800a078:	0800a8c4 	addi	zero,at,675
 800a07c:	0800a574 	orhi	zero,at,661
 800a080:	0800a91c 	xori	zero,at,676
 800a084:	0800a91c 	xori	zero,at,676
 800a088:	0800a41c 	xori	zero,at,656
 800a08c:	0800a91c 	xori	zero,at,676
 800a090:	0800a430 	cmpltui	zero,at,656
 800a094:	0800a468 	cmpgeui	zero,at,657
 800a098:	0800a168 	cmpgeui	zero,at,645
 800a09c:	0800a410 	cmplti	zero,at,656
 800a0a0:	0800a91c 	xori	zero,at,676
 800a0a4:	0800a7dc 	xori	zero,at,671
 800a0a8:	0800a91c 	xori	zero,at,676
 800a0ac:	0800a828 	cmpgeui	zero,at,672
 800a0b0:	0800a91c 	xori	zero,at,676
 800a0b4:	0800a91c 	xori	zero,at,676
 800a0b8:	0800a4ec 	andhi	zero,at,659
 800a0bc:	42000204 	addi	r8,r8,8
 800a0c0:	d8c02417 	ldw	r3,144(sp)
 800a0c4:	1c07883a 	add	r3,r3,r16
 800a0c8:	d8c02415 	stw	r3,144(sp)
 800a0cc:	003f8c06 	br	8009f00 <__alt_data_end+0xfc009f00>
 800a0d0:	d9402017 	ldw	r5,128(sp)
 800a0d4:	d9002117 	ldw	r4,132(sp)
 800a0d8:	800497c0 	call	800497c <__swsetup_r>
 800a0dc:	1003c11e 	bne	r2,zero,800afe4 <___vfiprintf_internal_r+0x1224>
 800a0e0:	d9402017 	ldw	r5,128(sp)
 800a0e4:	00c00284 	movi	r3,10
 800a0e8:	2880030b 	ldhu	r2,12(r5)
 800a0ec:	1080068c 	andi	r2,r2,26
 800a0f0:	10ff581e 	bne	r2,r3,8009e54 <__alt_data_end+0xfc009e54>
 800a0f4:	d8c02017 	ldw	r3,128(sp)
 800a0f8:	1880038f 	ldh	r2,14(r3)
 800a0fc:	103f5516 	blt	r2,zero,8009e54 <__alt_data_end+0xfc009e54>
 800a100:	d9c02217 	ldw	r7,136(sp)
 800a104:	d9002117 	ldw	r4,132(sp)
 800a108:	a80d883a 	mov	r6,r21
 800a10c:	180b883a 	mov	r5,r3
 800a110:	800b2e80 	call	800b2e8 <__sbprintf>
 800a114:	dfc03517 	ldw	ra,212(sp)
 800a118:	df003417 	ldw	fp,208(sp)
 800a11c:	ddc03317 	ldw	r23,204(sp)
 800a120:	dd803217 	ldw	r22,200(sp)
 800a124:	dd403117 	ldw	r21,196(sp)
 800a128:	dd003017 	ldw	r20,192(sp)
 800a12c:	dcc02f17 	ldw	r19,188(sp)
 800a130:	dc802e17 	ldw	r18,184(sp)
 800a134:	dc402d17 	ldw	r17,180(sp)
 800a138:	dc002c17 	ldw	r16,176(sp)
 800a13c:	dec03604 	addi	sp,sp,216
 800a140:	f800283a 	ret
 800a144:	80069880 	call	8006988 <__sinit>
 800a148:	003f2f06 	br	8009e08 <__alt_data_end+0xfc009e08>
 800a14c:	d8c02517 	ldw	r3,148(sp)
 800a150:	d8802215 	stw	r2,136(sp)
 800a154:	00c7c83a 	sub	r3,zero,r3
 800a158:	d8c02515 	stw	r3,148(sp)
 800a15c:	8c400114 	ori	r17,r17,4
 800a160:	b0c00007 	ldb	r3,0(r22)
 800a164:	003f7306 	br	8009f34 <__alt_data_end+0xfc009f34>
 800a168:	00800c04 	movi	r2,48
 800a16c:	d9402217 	ldw	r5,136(sp)
 800a170:	d8801d05 	stb	r2,116(sp)
 800a174:	00801e04 	movi	r2,120
 800a178:	d8801d45 	stb	r2,117(sp)
 800a17c:	d8001d85 	stb	zero,118(sp)
 800a180:	b811883a 	mov	r8,r23
 800a184:	28c00104 	addi	r3,r5,4
 800a188:	2cc00017 	ldw	r19,0(r5)
 800a18c:	0029883a 	mov	r20,zero
 800a190:	88800094 	ori	r2,r17,2
 800a194:	80032516 	blt	r16,zero,800ae2c <___vfiprintf_internal_r+0x106c>
 800a198:	00bfdfc4 	movi	r2,-129
 800a19c:	88a2703a 	and	r17,r17,r2
 800a1a0:	d8c02215 	stw	r3,136(sp)
 800a1a4:	8c400094 	ori	r17,r17,2
 800a1a8:	98032a1e 	bne	r19,zero,800ae54 <___vfiprintf_internal_r+0x1094>
 800a1ac:	00820074 	movhi	r2,2049
 800a1b0:	1088d404 	addi	r2,r2,9040
 800a1b4:	d8802615 	stw	r2,152(sp)
 800a1b8:	002b883a 	mov	r21,zero
 800a1bc:	8001741e 	bne	r16,zero,800a790 <___vfiprintf_internal_r+0x9d0>
 800a1c0:	0021883a 	mov	r16,zero
 800a1c4:	0029883a 	mov	r20,zero
 800a1c8:	ddc01a04 	addi	r23,sp,104
 800a1cc:	8027883a 	mov	r19,r16
 800a1d0:	8500010e 	bge	r16,r20,800a1d8 <___vfiprintf_internal_r+0x418>
 800a1d4:	a027883a 	mov	r19,r20
 800a1d8:	ad403fcc 	andi	r21,r21,255
 800a1dc:	ad40201c 	xori	r21,r21,128
 800a1e0:	ad7fe004 	addi	r21,r21,-128
 800a1e4:	a8000126 	beq	r21,zero,800a1ec <___vfiprintf_internal_r+0x42c>
 800a1e8:	9cc00044 	addi	r19,r19,1
 800a1ec:	89c0008c 	andi	r7,r17,2
 800a1f0:	38000126 	beq	r7,zero,800a1f8 <___vfiprintf_internal_r+0x438>
 800a1f4:	9cc00084 	addi	r19,r19,2
 800a1f8:	88c0210c 	andi	r3,r17,132
 800a1fc:	1801dd1e 	bne	r3,zero,800a974 <___vfiprintf_internal_r+0xbb4>
 800a200:	d9402517 	ldw	r5,148(sp)
 800a204:	2cebc83a 	sub	r21,r5,r19
 800a208:	0541da0e 	bge	zero,r21,800a974 <___vfiprintf_internal_r+0xbb4>
 800a20c:	07000404 	movi	fp,16
 800a210:	d8801c17 	ldw	r2,112(sp)
 800a214:	e543be0e 	bge	fp,r21,800b110 <___vfiprintf_internal_r+0x1350>
 800a218:	01420074 	movhi	r5,2049
 800a21c:	29493904 	addi	r5,r5,9444
 800a220:	dc002715 	stw	r16,156(sp)
 800a224:	d9801b17 	ldw	r6,108(sp)
 800a228:	a821883a 	mov	r16,r21
 800a22c:	d9402315 	stw	r5,140(sp)
 800a230:	028001c4 	movi	r10,7
 800a234:	d9c02915 	stw	r7,164(sp)
 800a238:	182b883a 	mov	r21,r3
 800a23c:	00000506 	br	800a254 <___vfiprintf_internal_r+0x494>
 800a240:	31000084 	addi	r4,r6,2
 800a244:	42000204 	addi	r8,r8,8
 800a248:	180d883a 	mov	r6,r3
 800a24c:	843ffc04 	addi	r16,r16,-16
 800a250:	e4000f0e 	bge	fp,r16,800a290 <___vfiprintf_internal_r+0x4d0>
 800a254:	01020074 	movhi	r4,2049
 800a258:	10800404 	addi	r2,r2,16
 800a25c:	30c00044 	addi	r3,r6,1
 800a260:	21093904 	addi	r4,r4,9444
 800a264:	41000015 	stw	r4,0(r8)
 800a268:	47000115 	stw	fp,4(r8)
 800a26c:	d8801c15 	stw	r2,112(sp)
 800a270:	d8c01b15 	stw	r3,108(sp)
 800a274:	50fff20e 	bge	r10,r3,800a240 <__alt_data_end+0xfc00a240>
 800a278:	1001b21e 	bne	r2,zero,800a944 <___vfiprintf_internal_r+0xb84>
 800a27c:	843ffc04 	addi	r16,r16,-16
 800a280:	000d883a 	mov	r6,zero
 800a284:	01000044 	movi	r4,1
 800a288:	d811883a 	mov	r8,sp
 800a28c:	e43ff116 	blt	fp,r16,800a254 <__alt_data_end+0xfc00a254>
 800a290:	a807883a 	mov	r3,r21
 800a294:	d9c02917 	ldw	r7,164(sp)
 800a298:	802b883a 	mov	r21,r16
 800a29c:	dc002717 	ldw	r16,156(sp)
 800a2a0:	d9402317 	ldw	r5,140(sp)
 800a2a4:	a885883a 	add	r2,r21,r2
 800a2a8:	45400115 	stw	r21,4(r8)
 800a2ac:	41400015 	stw	r5,0(r8)
 800a2b0:	d8801c15 	stw	r2,112(sp)
 800a2b4:	d9001b15 	stw	r4,108(sp)
 800a2b8:	014001c4 	movi	r5,7
 800a2bc:	29026216 	blt	r5,r4,800ac48 <___vfiprintf_internal_r+0xe88>
 800a2c0:	d9801d87 	ldb	r6,118(sp)
 800a2c4:	42000204 	addi	r8,r8,8
 800a2c8:	21400044 	addi	r5,r4,1
 800a2cc:	3001ae1e 	bne	r6,zero,800a988 <___vfiprintf_internal_r+0xbc8>
 800a2d0:	3801bb26 	beq	r7,zero,800a9c0 <___vfiprintf_internal_r+0xc00>
 800a2d4:	d9001d04 	addi	r4,sp,116
 800a2d8:	10800084 	addi	r2,r2,2
 800a2dc:	41000015 	stw	r4,0(r8)
 800a2e0:	01000084 	movi	r4,2
 800a2e4:	41000115 	stw	r4,4(r8)
 800a2e8:	d8801c15 	stw	r2,112(sp)
 800a2ec:	d9401b15 	stw	r5,108(sp)
 800a2f0:	010001c4 	movi	r4,7
 800a2f4:	2142680e 	bge	r4,r5,800ac98 <___vfiprintf_internal_r+0xed8>
 800a2f8:	1002b11e 	bne	r2,zero,800adc0 <___vfiprintf_internal_r+0x1000>
 800a2fc:	01802004 	movi	r6,128
 800a300:	01400044 	movi	r5,1
 800a304:	0009883a 	mov	r4,zero
 800a308:	d811883a 	mov	r8,sp
 800a30c:	1981ae1e 	bne	r3,r6,800a9c8 <___vfiprintf_internal_r+0xc08>
 800a310:	d8c02517 	ldw	r3,148(sp)
 800a314:	1cf9c83a 	sub	fp,r3,r19
 800a318:	0701ab0e 	bge	zero,fp,800a9c8 <___vfiprintf_internal_r+0xc08>
 800a31c:	05400404 	movi	r21,16
 800a320:	af03a90e 	bge	r21,fp,800b1c8 <___vfiprintf_internal_r+0x1408>
 800a324:	01420074 	movhi	r5,2049
 800a328:	29493504 	addi	r5,r5,9428
 800a32c:	d9402315 	stw	r5,140(sp)
 800a330:	01c001c4 	movi	r7,7
 800a334:	00000506 	br	800a34c <___vfiprintf_internal_r+0x58c>
 800a338:	21800084 	addi	r6,r4,2
 800a33c:	42000204 	addi	r8,r8,8
 800a340:	1809883a 	mov	r4,r3
 800a344:	e73ffc04 	addi	fp,fp,-16
 800a348:	af000d0e 	bge	r21,fp,800a380 <___vfiprintf_internal_r+0x5c0>
 800a34c:	10800404 	addi	r2,r2,16
 800a350:	20c00044 	addi	r3,r4,1
 800a354:	44800015 	stw	r18,0(r8)
 800a358:	45400115 	stw	r21,4(r8)
 800a35c:	d8801c15 	stw	r2,112(sp)
 800a360:	d8c01b15 	stw	r3,108(sp)
 800a364:	38fff40e 	bge	r7,r3,800a338 <__alt_data_end+0xfc00a338>
 800a368:	10022b1e 	bne	r2,zero,800ac18 <___vfiprintf_internal_r+0xe58>
 800a36c:	e73ffc04 	addi	fp,fp,-16
 800a370:	01800044 	movi	r6,1
 800a374:	0009883a 	mov	r4,zero
 800a378:	d811883a 	mov	r8,sp
 800a37c:	af3ff316 	blt	r21,fp,800a34c <__alt_data_end+0xfc00a34c>
 800a380:	d8c02317 	ldw	r3,140(sp)
 800a384:	1705883a 	add	r2,r2,fp
 800a388:	47000115 	stw	fp,4(r8)
 800a38c:	40c00015 	stw	r3,0(r8)
 800a390:	d8801c15 	stw	r2,112(sp)
 800a394:	d9801b15 	stw	r6,108(sp)
 800a398:	00c001c4 	movi	r3,7
 800a39c:	19829416 	blt	r3,r6,800adf0 <___vfiprintf_internal_r+0x1030>
 800a3a0:	8521c83a 	sub	r16,r16,r20
 800a3a4:	42000204 	addi	r8,r8,8
 800a3a8:	31400044 	addi	r5,r6,1
 800a3ac:	3009883a 	mov	r4,r6
 800a3b0:	04018716 	blt	zero,r16,800a9d0 <___vfiprintf_internal_r+0xc10>
 800a3b4:	a085883a 	add	r2,r20,r2
 800a3b8:	45c00015 	stw	r23,0(r8)
 800a3bc:	45000115 	stw	r20,4(r8)
 800a3c0:	d8801c15 	stw	r2,112(sp)
 800a3c4:	d9401b15 	stw	r5,108(sp)
 800a3c8:	00c001c4 	movi	r3,7
 800a3cc:	1941c20e 	bge	r3,r5,800aad8 <___vfiprintf_internal_r+0xd18>
 800a3d0:	1002531e 	bne	r2,zero,800ad20 <___vfiprintf_internal_r+0xf60>
 800a3d4:	d8001b15 	stw	zero,108(sp)
 800a3d8:	8c40010c 	andi	r17,r17,4
 800a3dc:	88023226 	beq	r17,zero,800aca8 <___vfiprintf_internal_r+0xee8>
 800a3e0:	d9002517 	ldw	r4,148(sp)
 800a3e4:	24e3c83a 	sub	r17,r4,r19
 800a3e8:	04432916 	blt	zero,r17,800b090 <___vfiprintf_internal_r+0x12d0>
 800a3ec:	d8802517 	ldw	r2,148(sp)
 800a3f0:	14c0010e 	bge	r2,r19,800a3f8 <___vfiprintf_internal_r+0x638>
 800a3f4:	9805883a 	mov	r2,r19
 800a3f8:	d8c02417 	ldw	r3,144(sp)
 800a3fc:	1887883a 	add	r3,r3,r2
 800a400:	d8c02415 	stw	r3,144(sp)
 800a404:	d8001b15 	stw	zero,108(sp)
 800a408:	d811883a 	mov	r8,sp
 800a40c:	003ea006 	br	8009e90 <__alt_data_end+0xfc009e90>
 800a410:	8c400814 	ori	r17,r17,32
 800a414:	b0c00007 	ldb	r3,0(r22)
 800a418:	003ec606 	br	8009f34 <__alt_data_end+0xfc009f34>
 800a41c:	b0c00007 	ldb	r3,0(r22)
 800a420:	00801b04 	movi	r2,108
 800a424:	18832026 	beq	r3,r2,800b0a8 <___vfiprintf_internal_r+0x12e8>
 800a428:	8c400414 	ori	r17,r17,16
 800a42c:	003ec106 	br	8009f34 <__alt_data_end+0xfc009f34>
 800a430:	9cc03fcc 	andi	r19,r19,255
 800a434:	b811883a 	mov	r8,r23
 800a438:	9803981e 	bne	r19,zero,800b29c <___vfiprintf_internal_r+0x14dc>
 800a43c:	8880080c 	andi	r2,r17,32
 800a440:	1002be26 	beq	r2,zero,800af3c <___vfiprintf_internal_r+0x117c>
 800a444:	d9002217 	ldw	r4,136(sp)
 800a448:	d9402417 	ldw	r5,144(sp)
 800a44c:	20800017 	ldw	r2,0(r4)
 800a450:	2807d7fa 	srai	r3,r5,31
 800a454:	21000104 	addi	r4,r4,4
 800a458:	d9002215 	stw	r4,136(sp)
 800a45c:	11400015 	stw	r5,0(r2)
 800a460:	10c00115 	stw	r3,4(r2)
 800a464:	003e8a06 	br	8009e90 <__alt_data_end+0xfc009e90>
 800a468:	9cc03fcc 	andi	r19,r19,255
 800a46c:	b811883a 	mov	r8,r23
 800a470:	9803871e 	bne	r19,zero,800b290 <___vfiprintf_internal_r+0x14d0>
 800a474:	8880080c 	andi	r2,r17,32
 800a478:	10009a26 	beq	r2,zero,800a6e4 <___vfiprintf_internal_r+0x924>
 800a47c:	d9002217 	ldw	r4,136(sp)
 800a480:	d8001d85 	stb	zero,118(sp)
 800a484:	20800204 	addi	r2,r4,8
 800a488:	24c00017 	ldw	r19,0(r4)
 800a48c:	25000117 	ldw	r20,4(r4)
 800a490:	8002a416 	blt	r16,zero,800af24 <___vfiprintf_internal_r+0x1164>
 800a494:	013fdfc4 	movi	r4,-129
 800a498:	9d06b03a 	or	r3,r19,r20
 800a49c:	d8802215 	stw	r2,136(sp)
 800a4a0:	8922703a 	and	r17,r17,r4
 800a4a4:	18009b26 	beq	r3,zero,800a714 <___vfiprintf_internal_r+0x954>
 800a4a8:	002b883a 	mov	r21,zero
 800a4ac:	ddc01a04 	addi	r23,sp,104
 800a4b0:	9806d0fa 	srli	r3,r19,3
 800a4b4:	a008977a 	slli	r4,r20,29
 800a4b8:	a028d0fa 	srli	r20,r20,3
 800a4bc:	9cc001cc 	andi	r19,r19,7
 800a4c0:	98800c04 	addi	r2,r19,48
 800a4c4:	bdffffc4 	addi	r23,r23,-1
 800a4c8:	20e6b03a 	or	r19,r4,r3
 800a4cc:	b8800005 	stb	r2,0(r23)
 800a4d0:	9d06b03a 	or	r3,r19,r20
 800a4d4:	183ff61e 	bne	r3,zero,800a4b0 <__alt_data_end+0xfc00a4b0>
 800a4d8:	88c0004c 	andi	r3,r17,1
 800a4dc:	18021f1e 	bne	r3,zero,800ad5c <___vfiprintf_internal_r+0xf9c>
 800a4e0:	d9401e17 	ldw	r5,120(sp)
 800a4e4:	2de9c83a 	sub	r20,r5,r23
 800a4e8:	003f3806 	br	800a1cc <__alt_data_end+0xfc00a1cc>
 800a4ec:	9cc03fcc 	andi	r19,r19,255
 800a4f0:	b811883a 	mov	r8,r23
 800a4f4:	98034f1e 	bne	r19,zero,800b234 <___vfiprintf_internal_r+0x1474>
 800a4f8:	00820074 	movhi	r2,2049
 800a4fc:	1088d404 	addi	r2,r2,9040
 800a500:	d8802615 	stw	r2,152(sp)
 800a504:	8880080c 	andi	r2,r17,32
 800a508:	1000ac26 	beq	r2,zero,800a7bc <___vfiprintf_internal_r+0x9fc>
 800a50c:	d9002217 	ldw	r4,136(sp)
 800a510:	24c00017 	ldw	r19,0(r4)
 800a514:	25000117 	ldw	r20,4(r4)
 800a518:	21000204 	addi	r4,r4,8
 800a51c:	d9002215 	stw	r4,136(sp)
 800a520:	8880004c 	andi	r2,r17,1
 800a524:	1001e726 	beq	r2,zero,800acc4 <___vfiprintf_internal_r+0xf04>
 800a528:	9d04b03a 	or	r2,r19,r20
 800a52c:	10025c1e 	bne	r2,zero,800aea0 <___vfiprintf_internal_r+0x10e0>
 800a530:	d8001d85 	stb	zero,118(sp)
 800a534:	80024416 	blt	r16,zero,800ae48 <___vfiprintf_internal_r+0x1088>
 800a538:	00bfdfc4 	movi	r2,-129
 800a53c:	88a2703a 	and	r17,r17,r2
 800a540:	003f1d06 	br	800a1b8 <__alt_data_end+0xfc00a1b8>
 800a544:	d8c02217 	ldw	r3,136(sp)
 800a548:	04c00044 	movi	r19,1
 800a54c:	b811883a 	mov	r8,r23
 800a550:	18800017 	ldw	r2,0(r3)
 800a554:	18c00104 	addi	r3,r3,4
 800a558:	d8001d85 	stb	zero,118(sp)
 800a55c:	d8801005 	stb	r2,64(sp)
 800a560:	d8c02215 	stw	r3,136(sp)
 800a564:	9829883a 	mov	r20,r19
 800a568:	ddc01004 	addi	r23,sp,64
 800a56c:	0021883a 	mov	r16,zero
 800a570:	003f1e06 	br	800a1ec <__alt_data_end+0xfc00a1ec>
 800a574:	9cc03fcc 	andi	r19,r19,255
 800a578:	b811883a 	mov	r8,r23
 800a57c:	9803331e 	bne	r19,zero,800b24c <___vfiprintf_internal_r+0x148c>
 800a580:	8880080c 	andi	r2,r17,32
 800a584:	10004826 	beq	r2,zero,800a6a8 <___vfiprintf_internal_r+0x8e8>
 800a588:	d9002217 	ldw	r4,136(sp)
 800a58c:	20800117 	ldw	r2,4(r4)
 800a590:	24c00017 	ldw	r19,0(r4)
 800a594:	21000204 	addi	r4,r4,8
 800a598:	d9002215 	stw	r4,136(sp)
 800a59c:	1029883a 	mov	r20,r2
 800a5a0:	10024c16 	blt	r2,zero,800aed4 <___vfiprintf_internal_r+0x1114>
 800a5a4:	dd401d83 	ldbu	r21,118(sp)
 800a5a8:	80007116 	blt	r16,zero,800a770 <___vfiprintf_internal_r+0x9b0>
 800a5ac:	00ffdfc4 	movi	r3,-129
 800a5b0:	9d04b03a 	or	r2,r19,r20
 800a5b4:	88e2703a 	and	r17,r17,r3
 800a5b8:	1000d126 	beq	r2,zero,800a900 <___vfiprintf_internal_r+0xb40>
 800a5bc:	a0023526 	beq	r20,zero,800ae94 <___vfiprintf_internal_r+0x10d4>
 800a5c0:	ddc01a04 	addi	r23,sp,104
 800a5c4:	4039883a 	mov	fp,r8
 800a5c8:	9809883a 	mov	r4,r19
 800a5cc:	a00b883a 	mov	r5,r20
 800a5d0:	01800284 	movi	r6,10
 800a5d4:	000f883a 	mov	r7,zero
 800a5d8:	800c2ec0 	call	800c2ec <__umoddi3>
 800a5dc:	10800c04 	addi	r2,r2,48
 800a5e0:	bdffffc4 	addi	r23,r23,-1
 800a5e4:	9809883a 	mov	r4,r19
 800a5e8:	a00b883a 	mov	r5,r20
 800a5ec:	b8800005 	stb	r2,0(r23)
 800a5f0:	01800284 	movi	r6,10
 800a5f4:	000f883a 	mov	r7,zero
 800a5f8:	800bcf00 	call	800bcf0 <__udivdi3>
 800a5fc:	1027883a 	mov	r19,r2
 800a600:	10c4b03a 	or	r2,r2,r3
 800a604:	1829883a 	mov	r20,r3
 800a608:	103fef1e 	bne	r2,zero,800a5c8 <__alt_data_end+0xfc00a5c8>
 800a60c:	d9001e17 	ldw	r4,120(sp)
 800a610:	e011883a 	mov	r8,fp
 800a614:	25e9c83a 	sub	r20,r4,r23
 800a618:	003eec06 	br	800a1cc <__alt_data_end+0xfc00a1cc>
 800a61c:	d8802307 	ldb	r2,140(sp)
 800a620:	1002361e 	bne	r2,zero,800aefc <___vfiprintf_internal_r+0x113c>
 800a624:	00c00804 	movi	r3,32
 800a628:	d8c02305 	stb	r3,140(sp)
 800a62c:	04c00044 	movi	r19,1
 800a630:	b0c00007 	ldb	r3,0(r22)
 800a634:	003e3f06 	br	8009f34 <__alt_data_end+0xfc009f34>
 800a638:	8c400054 	ori	r17,r17,1
 800a63c:	b0c00007 	ldb	r3,0(r22)
 800a640:	003e3c06 	br	8009f34 <__alt_data_end+0xfc009f34>
 800a644:	8c402014 	ori	r17,r17,128
 800a648:	b0c00007 	ldb	r3,0(r22)
 800a64c:	003e3906 	br	8009f34 <__alt_data_end+0xfc009f34>
 800a650:	dc002715 	stw	r16,156(sp)
 800a654:	d8002515 	stw	zero,148(sp)
 800a658:	1f3ff404 	addi	fp,r3,-48
 800a65c:	0009883a 	mov	r4,zero
 800a660:	b021883a 	mov	r16,r22
 800a664:	01400284 	movi	r5,10
 800a668:	800ca640 	call	800ca64 <__mulsi3>
 800a66c:	80c00007 	ldb	r3,0(r16)
 800a670:	e089883a 	add	r4,fp,r2
 800a674:	b5800044 	addi	r22,r22,1
 800a678:	1f3ff404 	addi	fp,r3,-48
 800a67c:	b021883a 	mov	r16,r22
 800a680:	af3ff82e 	bgeu	r21,fp,800a664 <__alt_data_end+0xfc00a664>
 800a684:	d9002515 	stw	r4,148(sp)
 800a688:	dc002717 	ldw	r16,156(sp)
 800a68c:	003e2a06 	br	8009f38 <__alt_data_end+0xfc009f38>
 800a690:	9cc03fcc 	andi	r19,r19,255
 800a694:	b811883a 	mov	r8,r23
 800a698:	9802e91e 	bne	r19,zero,800b240 <___vfiprintf_internal_r+0x1480>
 800a69c:	8c400414 	ori	r17,r17,16
 800a6a0:	8880080c 	andi	r2,r17,32
 800a6a4:	103fb81e 	bne	r2,zero,800a588 <__alt_data_end+0xfc00a588>
 800a6a8:	8880040c 	andi	r2,r17,16
 800a6ac:	10022e26 	beq	r2,zero,800af68 <___vfiprintf_internal_r+0x11a8>
 800a6b0:	d9402217 	ldw	r5,136(sp)
 800a6b4:	2cc00017 	ldw	r19,0(r5)
 800a6b8:	29400104 	addi	r5,r5,4
 800a6bc:	d9402215 	stw	r5,136(sp)
 800a6c0:	9829d7fa 	srai	r20,r19,31
 800a6c4:	a005883a 	mov	r2,r20
 800a6c8:	003fb506 	br	800a5a0 <__alt_data_end+0xfc00a5a0>
 800a6cc:	9cc03fcc 	andi	r19,r19,255
 800a6d0:	b811883a 	mov	r8,r23
 800a6d4:	9802fa1e 	bne	r19,zero,800b2c0 <___vfiprintf_internal_r+0x1500>
 800a6d8:	8c400414 	ori	r17,r17,16
 800a6dc:	8880080c 	andi	r2,r17,32
 800a6e0:	103f661e 	bne	r2,zero,800a47c <__alt_data_end+0xfc00a47c>
 800a6e4:	8880040c 	andi	r2,r17,16
 800a6e8:	10020626 	beq	r2,zero,800af04 <___vfiprintf_internal_r+0x1144>
 800a6ec:	d9402217 	ldw	r5,136(sp)
 800a6f0:	d8001d85 	stb	zero,118(sp)
 800a6f4:	0029883a 	mov	r20,zero
 800a6f8:	28800104 	addi	r2,r5,4
 800a6fc:	2cc00017 	ldw	r19,0(r5)
 800a700:	80020816 	blt	r16,zero,800af24 <___vfiprintf_internal_r+0x1164>
 800a704:	00ffdfc4 	movi	r3,-129
 800a708:	d8802215 	stw	r2,136(sp)
 800a70c:	88e2703a 	and	r17,r17,r3
 800a710:	983f651e 	bne	r19,zero,800a4a8 <__alt_data_end+0xfc00a4a8>
 800a714:	002b883a 	mov	r21,zero
 800a718:	8002cf26 	beq	r16,zero,800b258 <___vfiprintf_internal_r+0x1498>
 800a71c:	0027883a 	mov	r19,zero
 800a720:	0029883a 	mov	r20,zero
 800a724:	003f6106 	br	800a4ac <__alt_data_end+0xfc00a4ac>
 800a728:	9cc03fcc 	andi	r19,r19,255
 800a72c:	b811883a 	mov	r8,r23
 800a730:	9802e01e 	bne	r19,zero,800b2b4 <___vfiprintf_internal_r+0x14f4>
 800a734:	8c400414 	ori	r17,r17,16
 800a738:	8880080c 	andi	r2,r17,32
 800a73c:	1000641e 	bne	r2,zero,800a8d0 <___vfiprintf_internal_r+0xb10>
 800a740:	8880040c 	andi	r2,r17,16
 800a744:	1001c81e 	bne	r2,zero,800ae68 <___vfiprintf_internal_r+0x10a8>
 800a748:	8880100c 	andi	r2,r17,64
 800a74c:	d8001d85 	stb	zero,118(sp)
 800a750:	1002281e 	bne	r2,zero,800aff4 <___vfiprintf_internal_r+0x1234>
 800a754:	d9002217 	ldw	r4,136(sp)
 800a758:	0029883a 	mov	r20,zero
 800a75c:	20800104 	addi	r2,r4,4
 800a760:	24c00017 	ldw	r19,0(r4)
 800a764:	8001c60e 	bge	r16,zero,800ae80 <___vfiprintf_internal_r+0x10c0>
 800a768:	d8802215 	stw	r2,136(sp)
 800a76c:	002b883a 	mov	r21,zero
 800a770:	9d04b03a 	or	r2,r19,r20
 800a774:	103f911e 	bne	r2,zero,800a5bc <__alt_data_end+0xfc00a5bc>
 800a778:	00800044 	movi	r2,1
 800a77c:	10803fcc 	andi	r2,r2,255
 800a780:	00c00044 	movi	r3,1
 800a784:	10c05f26 	beq	r2,r3,800a904 <___vfiprintf_internal_r+0xb44>
 800a788:	00c00084 	movi	r3,2
 800a78c:	10ffe31e 	bne	r2,r3,800a71c <__alt_data_end+0xfc00a71c>
 800a790:	0027883a 	mov	r19,zero
 800a794:	0029883a 	mov	r20,zero
 800a798:	00015106 	br	800ace0 <___vfiprintf_internal_r+0xf20>
 800a79c:	9cc03fcc 	andi	r19,r19,255
 800a7a0:	b811883a 	mov	r8,r23
 800a7a4:	9802c01e 	bne	r19,zero,800b2a8 <___vfiprintf_internal_r+0x14e8>
 800a7a8:	01420074 	movhi	r5,2049
 800a7ac:	2948cf04 	addi	r5,r5,9020
 800a7b0:	d9402615 	stw	r5,152(sp)
 800a7b4:	8880080c 	andi	r2,r17,32
 800a7b8:	103f541e 	bne	r2,zero,800a50c <__alt_data_end+0xfc00a50c>
 800a7bc:	8880040c 	andi	r2,r17,16
 800a7c0:	1001f226 	beq	r2,zero,800af8c <___vfiprintf_internal_r+0x11cc>
 800a7c4:	d9402217 	ldw	r5,136(sp)
 800a7c8:	0029883a 	mov	r20,zero
 800a7cc:	2cc00017 	ldw	r19,0(r5)
 800a7d0:	29400104 	addi	r5,r5,4
 800a7d4:	d9402215 	stw	r5,136(sp)
 800a7d8:	003f5106 	br	800a520 <__alt_data_end+0xfc00a520>
 800a7dc:	d8c02217 	ldw	r3,136(sp)
 800a7e0:	b811883a 	mov	r8,r23
 800a7e4:	d8001d85 	stb	zero,118(sp)
 800a7e8:	1dc00017 	ldw	r23,0(r3)
 800a7ec:	1f000104 	addi	fp,r3,4
 800a7f0:	b8025926 	beq	r23,zero,800b158 <___vfiprintf_internal_r+0x1398>
 800a7f4:	80023316 	blt	r16,zero,800b0c4 <___vfiprintf_internal_r+0x1304>
 800a7f8:	800d883a 	mov	r6,r16
 800a7fc:	000b883a 	mov	r5,zero
 800a800:	b809883a 	mov	r4,r23
 800a804:	da002a15 	stw	r8,168(sp)
 800a808:	8007f000 	call	8007f00 <memchr>
 800a80c:	da002a17 	ldw	r8,168(sp)
 800a810:	10026826 	beq	r2,zero,800b1b4 <___vfiprintf_internal_r+0x13f4>
 800a814:	15e9c83a 	sub	r20,r2,r23
 800a818:	dd401d83 	ldbu	r21,118(sp)
 800a81c:	df002215 	stw	fp,136(sp)
 800a820:	0021883a 	mov	r16,zero
 800a824:	003e6906 	br	800a1cc <__alt_data_end+0xfc00a1cc>
 800a828:	9cc03fcc 	andi	r19,r19,255
 800a82c:	b811883a 	mov	r8,r23
 800a830:	983fc126 	beq	r19,zero,800a738 <__alt_data_end+0xfc00a738>
 800a834:	d8c02303 	ldbu	r3,140(sp)
 800a838:	d8c01d85 	stb	r3,118(sp)
 800a83c:	003fbe06 	br	800a738 <__alt_data_end+0xfc00a738>
 800a840:	d9002217 	ldw	r4,136(sp)
 800a844:	d9402217 	ldw	r5,136(sp)
 800a848:	21000017 	ldw	r4,0(r4)
 800a84c:	28800104 	addi	r2,r5,4
 800a850:	d9002515 	stw	r4,148(sp)
 800a854:	203e3d16 	blt	r4,zero,800a14c <__alt_data_end+0xfc00a14c>
 800a858:	d8802215 	stw	r2,136(sp)
 800a85c:	b0c00007 	ldb	r3,0(r22)
 800a860:	003db406 	br	8009f34 <__alt_data_end+0xfc009f34>
 800a864:	00c00ac4 	movi	r3,43
 800a868:	d8c02305 	stb	r3,140(sp)
 800a86c:	04c00044 	movi	r19,1
 800a870:	b0c00007 	ldb	r3,0(r22)
 800a874:	003daf06 	br	8009f34 <__alt_data_end+0xfc009f34>
 800a878:	b0c00007 	ldb	r3,0(r22)
 800a87c:	01000a84 	movi	r4,42
 800a880:	b4000044 	addi	r16,r22,1
 800a884:	19025e26 	beq	r3,r4,800b200 <___vfiprintf_internal_r+0x1440>
 800a888:	1f3ff404 	addi	fp,r3,-48
 800a88c:	0009883a 	mov	r4,zero
 800a890:	af025236 	bltu	r21,fp,800b1dc <___vfiprintf_internal_r+0x141c>
 800a894:	01400284 	movi	r5,10
 800a898:	800ca640 	call	800ca64 <__mulsi3>
 800a89c:	80c00007 	ldb	r3,0(r16)
 800a8a0:	1709883a 	add	r4,r2,fp
 800a8a4:	85800044 	addi	r22,r16,1
 800a8a8:	1f3ff404 	addi	fp,r3,-48
 800a8ac:	b021883a 	mov	r16,r22
 800a8b0:	af3ff82e 	bgeu	r21,fp,800a894 <__alt_data_end+0xfc00a894>
 800a8b4:	2021883a 	mov	r16,r4
 800a8b8:	203d9f0e 	bge	r4,zero,8009f38 <__alt_data_end+0xfc009f38>
 800a8bc:	043fffc4 	movi	r16,-1
 800a8c0:	003d9d06 	br	8009f38 <__alt_data_end+0xfc009f38>
 800a8c4:	8c401014 	ori	r17,r17,64
 800a8c8:	b0c00007 	ldb	r3,0(r22)
 800a8cc:	003d9906 	br	8009f34 <__alt_data_end+0xfc009f34>
 800a8d0:	d9002217 	ldw	r4,136(sp)
 800a8d4:	d8001d85 	stb	zero,118(sp)
 800a8d8:	20c00204 	addi	r3,r4,8
 800a8dc:	24c00017 	ldw	r19,0(r4)
 800a8e0:	25000117 	ldw	r20,4(r4)
 800a8e4:	8001e716 	blt	r16,zero,800b084 <___vfiprintf_internal_r+0x12c4>
 800a8e8:	013fdfc4 	movi	r4,-129
 800a8ec:	9d04b03a 	or	r2,r19,r20
 800a8f0:	d8c02215 	stw	r3,136(sp)
 800a8f4:	8922703a 	and	r17,r17,r4
 800a8f8:	002b883a 	mov	r21,zero
 800a8fc:	103f2f1e 	bne	r2,zero,800a5bc <__alt_data_end+0xfc00a5bc>
 800a900:	803e2f26 	beq	r16,zero,800a1c0 <__alt_data_end+0xfc00a1c0>
 800a904:	0027883a 	mov	r19,zero
 800a908:	9cc00c04 	addi	r19,r19,48
 800a90c:	dcc019c5 	stb	r19,103(sp)
 800a910:	dd002817 	ldw	r20,160(sp)
 800a914:	ddc019c4 	addi	r23,sp,103
 800a918:	003e2c06 	br	800a1cc <__alt_data_end+0xfc00a1cc>
 800a91c:	9cc03fcc 	andi	r19,r19,255
 800a920:	b811883a 	mov	r8,r23
 800a924:	9802571e 	bne	r19,zero,800b284 <___vfiprintf_internal_r+0x14c4>
 800a928:	18005726 	beq	r3,zero,800aa88 <___vfiprintf_internal_r+0xcc8>
 800a92c:	04c00044 	movi	r19,1
 800a930:	d8c01005 	stb	r3,64(sp)
 800a934:	d8001d85 	stb	zero,118(sp)
 800a938:	9829883a 	mov	r20,r19
 800a93c:	ddc01004 	addi	r23,sp,64
 800a940:	003f0a06 	br	800a56c <__alt_data_end+0xfc00a56c>
 800a944:	d9402017 	ldw	r5,128(sp)
 800a948:	d9002117 	ldw	r4,132(sp)
 800a94c:	d9801a04 	addi	r6,sp,104
 800a950:	da802a15 	stw	r10,168(sp)
 800a954:	8009cac0 	call	8009cac <__sprint_r.part.0>
 800a958:	da802a17 	ldw	r10,168(sp)
 800a95c:	1000501e 	bne	r2,zero,800aaa0 <___vfiprintf_internal_r+0xce0>
 800a960:	d9801b17 	ldw	r6,108(sp)
 800a964:	d8801c17 	ldw	r2,112(sp)
 800a968:	d811883a 	mov	r8,sp
 800a96c:	31000044 	addi	r4,r6,1
 800a970:	003e3606 	br	800a24c <__alt_data_end+0xfc00a24c>
 800a974:	d9001b17 	ldw	r4,108(sp)
 800a978:	d8801c17 	ldw	r2,112(sp)
 800a97c:	21400044 	addi	r5,r4,1
 800a980:	d9801d87 	ldb	r6,118(sp)
 800a984:	303e5226 	beq	r6,zero,800a2d0 <__alt_data_end+0xfc00a2d0>
 800a988:	01800044 	movi	r6,1
 800a98c:	d9001d84 	addi	r4,sp,118
 800a990:	1185883a 	add	r2,r2,r6
 800a994:	41000015 	stw	r4,0(r8)
 800a998:	41800115 	stw	r6,4(r8)
 800a99c:	d8801c15 	stw	r2,112(sp)
 800a9a0:	d9401b15 	stw	r5,108(sp)
 800a9a4:	010001c4 	movi	r4,7
 800a9a8:	2140b00e 	bge	r4,r5,800ac6c <___vfiprintf_internal_r+0xeac>
 800a9ac:	1000f61e 	bne	r2,zero,800ad88 <___vfiprintf_internal_r+0xfc8>
 800a9b0:	3800b31e 	bne	r7,zero,800ac80 <___vfiprintf_internal_r+0xec0>
 800a9b4:	0009883a 	mov	r4,zero
 800a9b8:	300b883a 	mov	r5,r6
 800a9bc:	d811883a 	mov	r8,sp
 800a9c0:	01802004 	movi	r6,128
 800a9c4:	19be5226 	beq	r3,r6,800a310 <__alt_data_end+0xfc00a310>
 800a9c8:	8521c83a 	sub	r16,r16,r20
 800a9cc:	043e790e 	bge	zero,r16,800a3b4 <__alt_data_end+0xfc00a3b4>
 800a9d0:	05400404 	movi	r21,16
 800a9d4:	ac01b00e 	bge	r21,r16,800b098 <___vfiprintf_internal_r+0x12d8>
 800a9d8:	01420074 	movhi	r5,2049
 800a9dc:	29493504 	addi	r5,r5,9428
 800a9e0:	d9402315 	stw	r5,140(sp)
 800a9e4:	070001c4 	movi	fp,7
 800a9e8:	00000506 	br	800aa00 <___vfiprintf_internal_r+0xc40>
 800a9ec:	21400084 	addi	r5,r4,2
 800a9f0:	42000204 	addi	r8,r8,8
 800a9f4:	1809883a 	mov	r4,r3
 800a9f8:	843ffc04 	addi	r16,r16,-16
 800a9fc:	ac000d0e 	bge	r21,r16,800aa34 <___vfiprintf_internal_r+0xc74>
 800aa00:	10800404 	addi	r2,r2,16
 800aa04:	20c00044 	addi	r3,r4,1
 800aa08:	44800015 	stw	r18,0(r8)
 800aa0c:	45400115 	stw	r21,4(r8)
 800aa10:	d8801c15 	stw	r2,112(sp)
 800aa14:	d8c01b15 	stw	r3,108(sp)
 800aa18:	e0fff40e 	bge	fp,r3,800a9ec <__alt_data_end+0xfc00a9ec>
 800aa1c:	1000101e 	bne	r2,zero,800aa60 <___vfiprintf_internal_r+0xca0>
 800aa20:	843ffc04 	addi	r16,r16,-16
 800aa24:	01400044 	movi	r5,1
 800aa28:	0009883a 	mov	r4,zero
 800aa2c:	d811883a 	mov	r8,sp
 800aa30:	ac3ff316 	blt	r21,r16,800aa00 <__alt_data_end+0xfc00aa00>
 800aa34:	d8c02317 	ldw	r3,140(sp)
 800aa38:	1405883a 	add	r2,r2,r16
 800aa3c:	44000115 	stw	r16,4(r8)
 800aa40:	40c00015 	stw	r3,0(r8)
 800aa44:	d8801c15 	stw	r2,112(sp)
 800aa48:	d9401b15 	stw	r5,108(sp)
 800aa4c:	00c001c4 	movi	r3,7
 800aa50:	19401916 	blt	r3,r5,800aab8 <___vfiprintf_internal_r+0xcf8>
 800aa54:	42000204 	addi	r8,r8,8
 800aa58:	29400044 	addi	r5,r5,1
 800aa5c:	003e5506 	br	800a3b4 <__alt_data_end+0xfc00a3b4>
 800aa60:	d9402017 	ldw	r5,128(sp)
 800aa64:	d9002117 	ldw	r4,132(sp)
 800aa68:	d9801a04 	addi	r6,sp,104
 800aa6c:	8009cac0 	call	8009cac <__sprint_r.part.0>
 800aa70:	10000b1e 	bne	r2,zero,800aaa0 <___vfiprintf_internal_r+0xce0>
 800aa74:	d9001b17 	ldw	r4,108(sp)
 800aa78:	d8801c17 	ldw	r2,112(sp)
 800aa7c:	d811883a 	mov	r8,sp
 800aa80:	21400044 	addi	r5,r4,1
 800aa84:	003fdc06 	br	800a9f8 <__alt_data_end+0xfc00a9f8>
 800aa88:	d8801c17 	ldw	r2,112(sp)
 800aa8c:	10000426 	beq	r2,zero,800aaa0 <___vfiprintf_internal_r+0xce0>
 800aa90:	d9402017 	ldw	r5,128(sp)
 800aa94:	d9002117 	ldw	r4,132(sp)
 800aa98:	d9801a04 	addi	r6,sp,104
 800aa9c:	8009cac0 	call	8009cac <__sprint_r.part.0>
 800aaa0:	d9402017 	ldw	r5,128(sp)
 800aaa4:	2880030b 	ldhu	r2,12(r5)
 800aaa8:	1080100c 	andi	r2,r2,64
 800aaac:	10014d1e 	bne	r2,zero,800afe4 <___vfiprintf_internal_r+0x1224>
 800aab0:	d8802417 	ldw	r2,144(sp)
 800aab4:	003d9706 	br	800a114 <__alt_data_end+0xfc00a114>
 800aab8:	1000d21e 	bne	r2,zero,800ae04 <___vfiprintf_internal_r+0x1044>
 800aabc:	00c00044 	movi	r3,1
 800aac0:	a005883a 	mov	r2,r20
 800aac4:	ddc00015 	stw	r23,0(sp)
 800aac8:	dd000115 	stw	r20,4(sp)
 800aacc:	dd001c15 	stw	r20,112(sp)
 800aad0:	d8c01b15 	stw	r3,108(sp)
 800aad4:	d811883a 	mov	r8,sp
 800aad8:	42000204 	addi	r8,r8,8
 800aadc:	8c40010c 	andi	r17,r17,4
 800aae0:	88004026 	beq	r17,zero,800abe4 <___vfiprintf_internal_r+0xe24>
 800aae4:	d9002517 	ldw	r4,148(sp)
 800aae8:	24e3c83a 	sub	r17,r4,r19
 800aaec:	04403d0e 	bge	zero,r17,800abe4 <___vfiprintf_internal_r+0xe24>
 800aaf0:	04000404 	movi	r16,16
 800aaf4:	8441a90e 	bge	r16,r17,800b19c <___vfiprintf_internal_r+0x13dc>
 800aaf8:	00c20074 	movhi	r3,2049
 800aafc:	18c93904 	addi	r3,r3,9444
 800ab00:	d9001b17 	ldw	r4,108(sp)
 800ab04:	d8c02315 	stw	r3,140(sp)
 800ab08:	050001c4 	movi	r20,7
 800ab0c:	dd402117 	ldw	r21,132(sp)
 800ab10:	ddc02017 	ldw	r23,128(sp)
 800ab14:	00000506 	br	800ab2c <___vfiprintf_internal_r+0xd6c>
 800ab18:	21400084 	addi	r5,r4,2
 800ab1c:	42000204 	addi	r8,r8,8
 800ab20:	1809883a 	mov	r4,r3
 800ab24:	8c7ffc04 	addi	r17,r17,-16
 800ab28:	84400f0e 	bge	r16,r17,800ab68 <___vfiprintf_internal_r+0xda8>
 800ab2c:	01420074 	movhi	r5,2049
 800ab30:	10800404 	addi	r2,r2,16
 800ab34:	20c00044 	addi	r3,r4,1
 800ab38:	29493904 	addi	r5,r5,9444
 800ab3c:	41400015 	stw	r5,0(r8)
 800ab40:	44000115 	stw	r16,4(r8)
 800ab44:	d8801c15 	stw	r2,112(sp)
 800ab48:	d8c01b15 	stw	r3,108(sp)
 800ab4c:	a0fff20e 	bge	r20,r3,800ab18 <__alt_data_end+0xfc00ab18>
 800ab50:	1000141e 	bne	r2,zero,800aba4 <___vfiprintf_internal_r+0xde4>
 800ab54:	8c7ffc04 	addi	r17,r17,-16
 800ab58:	01400044 	movi	r5,1
 800ab5c:	0009883a 	mov	r4,zero
 800ab60:	d811883a 	mov	r8,sp
 800ab64:	847ff116 	blt	r16,r17,800ab2c <__alt_data_end+0xfc00ab2c>
 800ab68:	d8c02317 	ldw	r3,140(sp)
 800ab6c:	1445883a 	add	r2,r2,r17
 800ab70:	44400115 	stw	r17,4(r8)
 800ab74:	40c00015 	stw	r3,0(r8)
 800ab78:	d8801c15 	stw	r2,112(sp)
 800ab7c:	d9401b15 	stw	r5,108(sp)
 800ab80:	00c001c4 	movi	r3,7
 800ab84:	1940170e 	bge	r3,r5,800abe4 <___vfiprintf_internal_r+0xe24>
 800ab88:	1000101e 	bne	r2,zero,800abcc <___vfiprintf_internal_r+0xe0c>
 800ab8c:	d8802517 	ldw	r2,148(sp)
 800ab90:	14c11616 	blt	r2,r19,800afec <___vfiprintf_internal_r+0x122c>
 800ab94:	d9002417 	ldw	r4,144(sp)
 800ab98:	2089883a 	add	r4,r4,r2
 800ab9c:	d9002415 	stw	r4,144(sp)
 800aba0:	003e1806 	br	800a404 <__alt_data_end+0xfc00a404>
 800aba4:	d9801a04 	addi	r6,sp,104
 800aba8:	b80b883a 	mov	r5,r23
 800abac:	a809883a 	mov	r4,r21
 800abb0:	8009cac0 	call	8009cac <__sprint_r.part.0>
 800abb4:	103fba1e 	bne	r2,zero,800aaa0 <__alt_data_end+0xfc00aaa0>
 800abb8:	d9001b17 	ldw	r4,108(sp)
 800abbc:	d8801c17 	ldw	r2,112(sp)
 800abc0:	d811883a 	mov	r8,sp
 800abc4:	21400044 	addi	r5,r4,1
 800abc8:	003fd606 	br	800ab24 <__alt_data_end+0xfc00ab24>
 800abcc:	d9402017 	ldw	r5,128(sp)
 800abd0:	d9002117 	ldw	r4,132(sp)
 800abd4:	d9801a04 	addi	r6,sp,104
 800abd8:	8009cac0 	call	8009cac <__sprint_r.part.0>
 800abdc:	103fb01e 	bne	r2,zero,800aaa0 <__alt_data_end+0xfc00aaa0>
 800abe0:	d8801c17 	ldw	r2,112(sp)
 800abe4:	d8c02517 	ldw	r3,148(sp)
 800abe8:	1cc0010e 	bge	r3,r19,800abf0 <___vfiprintf_internal_r+0xe30>
 800abec:	9807883a 	mov	r3,r19
 800abf0:	d9002417 	ldw	r4,144(sp)
 800abf4:	20c9883a 	add	r4,r4,r3
 800abf8:	d9002415 	stw	r4,144(sp)
 800abfc:	103e0126 	beq	r2,zero,800a404 <__alt_data_end+0xfc00a404>
 800ac00:	d9402017 	ldw	r5,128(sp)
 800ac04:	d9002117 	ldw	r4,132(sp)
 800ac08:	d9801a04 	addi	r6,sp,104
 800ac0c:	8009cac0 	call	8009cac <__sprint_r.part.0>
 800ac10:	103dfc26 	beq	r2,zero,800a404 <__alt_data_end+0xfc00a404>
 800ac14:	003fa206 	br	800aaa0 <__alt_data_end+0xfc00aaa0>
 800ac18:	d9402017 	ldw	r5,128(sp)
 800ac1c:	d9002117 	ldw	r4,132(sp)
 800ac20:	d9801a04 	addi	r6,sp,104
 800ac24:	d9c02b15 	stw	r7,172(sp)
 800ac28:	8009cac0 	call	8009cac <__sprint_r.part.0>
 800ac2c:	d9c02b17 	ldw	r7,172(sp)
 800ac30:	103f9b1e 	bne	r2,zero,800aaa0 <__alt_data_end+0xfc00aaa0>
 800ac34:	d9001b17 	ldw	r4,108(sp)
 800ac38:	d8801c17 	ldw	r2,112(sp)
 800ac3c:	d811883a 	mov	r8,sp
 800ac40:	21800044 	addi	r6,r4,1
 800ac44:	003dbf06 	br	800a344 <__alt_data_end+0xfc00a344>
 800ac48:	1000d81e 	bne	r2,zero,800afac <___vfiprintf_internal_r+0x11ec>
 800ac4c:	d9001d87 	ldb	r4,118(sp)
 800ac50:	20000a26 	beq	r4,zero,800ac7c <___vfiprintf_internal_r+0xebc>
 800ac54:	00800044 	movi	r2,1
 800ac58:	d9001d84 	addi	r4,sp,118
 800ac5c:	100b883a 	mov	r5,r2
 800ac60:	d9000015 	stw	r4,0(sp)
 800ac64:	d8800115 	stw	r2,4(sp)
 800ac68:	d811883a 	mov	r8,sp
 800ac6c:	2809883a 	mov	r4,r5
 800ac70:	42000204 	addi	r8,r8,8
 800ac74:	29400044 	addi	r5,r5,1
 800ac78:	003d9506 	br	800a2d0 <__alt_data_end+0xfc00a2d0>
 800ac7c:	3800fd26 	beq	r7,zero,800b074 <___vfiprintf_internal_r+0x12b4>
 800ac80:	00800084 	movi	r2,2
 800ac84:	d9001d04 	addi	r4,sp,116
 800ac88:	d9000015 	stw	r4,0(sp)
 800ac8c:	d8800115 	stw	r2,4(sp)
 800ac90:	01400044 	movi	r5,1
 800ac94:	d811883a 	mov	r8,sp
 800ac98:	2809883a 	mov	r4,r5
 800ac9c:	42000204 	addi	r8,r8,8
 800aca0:	29400044 	addi	r5,r5,1
 800aca4:	003f4606 	br	800a9c0 <__alt_data_end+0xfc00a9c0>
 800aca8:	d8802517 	ldw	r2,148(sp)
 800acac:	14c0010e 	bge	r2,r19,800acb4 <___vfiprintf_internal_r+0xef4>
 800acb0:	9805883a 	mov	r2,r19
 800acb4:	d9402417 	ldw	r5,144(sp)
 800acb8:	288b883a 	add	r5,r5,r2
 800acbc:	d9402415 	stw	r5,144(sp)
 800acc0:	003dd006 	br	800a404 <__alt_data_end+0xfc00a404>
 800acc4:	d8001d85 	stb	zero,118(sp)
 800acc8:	80005d16 	blt	r16,zero,800ae40 <___vfiprintf_internal_r+0x1080>
 800accc:	00ffdfc4 	movi	r3,-129
 800acd0:	9d04b03a 	or	r2,r19,r20
 800acd4:	88e2703a 	and	r17,r17,r3
 800acd8:	103d3726 	beq	r2,zero,800a1b8 <__alt_data_end+0xfc00a1b8>
 800acdc:	002b883a 	mov	r21,zero
 800ace0:	d9002617 	ldw	r4,152(sp)
 800ace4:	ddc01a04 	addi	r23,sp,104
 800ace8:	988003cc 	andi	r2,r19,15
 800acec:	a006973a 	slli	r3,r20,28
 800acf0:	2085883a 	add	r2,r4,r2
 800acf4:	9826d13a 	srli	r19,r19,4
 800acf8:	10800003 	ldbu	r2,0(r2)
 800acfc:	a028d13a 	srli	r20,r20,4
 800ad00:	bdffffc4 	addi	r23,r23,-1
 800ad04:	1ce6b03a 	or	r19,r3,r19
 800ad08:	b8800005 	stb	r2,0(r23)
 800ad0c:	9d04b03a 	or	r2,r19,r20
 800ad10:	103ff51e 	bne	r2,zero,800ace8 <__alt_data_end+0xfc00ace8>
 800ad14:	d8801e17 	ldw	r2,120(sp)
 800ad18:	15e9c83a 	sub	r20,r2,r23
 800ad1c:	003d2b06 	br	800a1cc <__alt_data_end+0xfc00a1cc>
 800ad20:	d9402017 	ldw	r5,128(sp)
 800ad24:	d9002117 	ldw	r4,132(sp)
 800ad28:	d9801a04 	addi	r6,sp,104
 800ad2c:	8009cac0 	call	8009cac <__sprint_r.part.0>
 800ad30:	103f5b1e 	bne	r2,zero,800aaa0 <__alt_data_end+0xfc00aaa0>
 800ad34:	d8801c17 	ldw	r2,112(sp)
 800ad38:	d811883a 	mov	r8,sp
 800ad3c:	003f6706 	br	800aadc <__alt_data_end+0xfc00aadc>
 800ad40:	d9402017 	ldw	r5,128(sp)
 800ad44:	d9002117 	ldw	r4,132(sp)
 800ad48:	d9801a04 	addi	r6,sp,104
 800ad4c:	8009cac0 	call	8009cac <__sprint_r.part.0>
 800ad50:	103f531e 	bne	r2,zero,800aaa0 <__alt_data_end+0xfc00aaa0>
 800ad54:	d811883a 	mov	r8,sp
 800ad58:	003cd906 	br	800a0c0 <__alt_data_end+0xfc00a0c0>
 800ad5c:	10803fcc 	andi	r2,r2,255
 800ad60:	1080201c 	xori	r2,r2,128
 800ad64:	10bfe004 	addi	r2,r2,-128
 800ad68:	00c00c04 	movi	r3,48
 800ad6c:	10ffe926 	beq	r2,r3,800ad14 <__alt_data_end+0xfc00ad14>
 800ad70:	b8ffffc5 	stb	r3,-1(r23)
 800ad74:	d8c01e17 	ldw	r3,120(sp)
 800ad78:	b8bfffc4 	addi	r2,r23,-1
 800ad7c:	102f883a 	mov	r23,r2
 800ad80:	18a9c83a 	sub	r20,r3,r2
 800ad84:	003d1106 	br	800a1cc <__alt_data_end+0xfc00a1cc>
 800ad88:	d9402017 	ldw	r5,128(sp)
 800ad8c:	d9002117 	ldw	r4,132(sp)
 800ad90:	d9801a04 	addi	r6,sp,104
 800ad94:	d8c02a15 	stw	r3,168(sp)
 800ad98:	d9c02b15 	stw	r7,172(sp)
 800ad9c:	8009cac0 	call	8009cac <__sprint_r.part.0>
 800ada0:	d8c02a17 	ldw	r3,168(sp)
 800ada4:	d9c02b17 	ldw	r7,172(sp)
 800ada8:	103f3d1e 	bne	r2,zero,800aaa0 <__alt_data_end+0xfc00aaa0>
 800adac:	d9001b17 	ldw	r4,108(sp)
 800adb0:	d8801c17 	ldw	r2,112(sp)
 800adb4:	d811883a 	mov	r8,sp
 800adb8:	21400044 	addi	r5,r4,1
 800adbc:	003d4406 	br	800a2d0 <__alt_data_end+0xfc00a2d0>
 800adc0:	d9402017 	ldw	r5,128(sp)
 800adc4:	d9002117 	ldw	r4,132(sp)
 800adc8:	d9801a04 	addi	r6,sp,104
 800adcc:	d8c02a15 	stw	r3,168(sp)
 800add0:	8009cac0 	call	8009cac <__sprint_r.part.0>
 800add4:	d8c02a17 	ldw	r3,168(sp)
 800add8:	103f311e 	bne	r2,zero,800aaa0 <__alt_data_end+0xfc00aaa0>
 800addc:	d9001b17 	ldw	r4,108(sp)
 800ade0:	d8801c17 	ldw	r2,112(sp)
 800ade4:	d811883a 	mov	r8,sp
 800ade8:	21400044 	addi	r5,r4,1
 800adec:	003ef406 	br	800a9c0 <__alt_data_end+0xfc00a9c0>
 800adf0:	1000bd1e 	bne	r2,zero,800b0e8 <___vfiprintf_internal_r+0x1328>
 800adf4:	01400044 	movi	r5,1
 800adf8:	0009883a 	mov	r4,zero
 800adfc:	d811883a 	mov	r8,sp
 800ae00:	003ef106 	br	800a9c8 <__alt_data_end+0xfc00a9c8>
 800ae04:	d9402017 	ldw	r5,128(sp)
 800ae08:	d9002117 	ldw	r4,132(sp)
 800ae0c:	d9801a04 	addi	r6,sp,104
 800ae10:	8009cac0 	call	8009cac <__sprint_r.part.0>
 800ae14:	103f221e 	bne	r2,zero,800aaa0 <__alt_data_end+0xfc00aaa0>
 800ae18:	d9401b17 	ldw	r5,108(sp)
 800ae1c:	d8801c17 	ldw	r2,112(sp)
 800ae20:	d811883a 	mov	r8,sp
 800ae24:	29400044 	addi	r5,r5,1
 800ae28:	003d6206 	br	800a3b4 <__alt_data_end+0xfc00a3b4>
 800ae2c:	01420074 	movhi	r5,2049
 800ae30:	2948d404 	addi	r5,r5,9040
 800ae34:	d9402615 	stw	r5,152(sp)
 800ae38:	d8c02215 	stw	r3,136(sp)
 800ae3c:	1023883a 	mov	r17,r2
 800ae40:	9d04b03a 	or	r2,r19,r20
 800ae44:	103fa51e 	bne	r2,zero,800acdc <__alt_data_end+0xfc00acdc>
 800ae48:	002b883a 	mov	r21,zero
 800ae4c:	00800084 	movi	r2,2
 800ae50:	003e4a06 	br	800a77c <__alt_data_end+0xfc00a77c>
 800ae54:	01420074 	movhi	r5,2049
 800ae58:	2948d404 	addi	r5,r5,9040
 800ae5c:	002b883a 	mov	r21,zero
 800ae60:	d9402615 	stw	r5,152(sp)
 800ae64:	003f9e06 	br	800ace0 <__alt_data_end+0xfc00ace0>
 800ae68:	d9402217 	ldw	r5,136(sp)
 800ae6c:	d8001d85 	stb	zero,118(sp)
 800ae70:	0029883a 	mov	r20,zero
 800ae74:	28800104 	addi	r2,r5,4
 800ae78:	2cc00017 	ldw	r19,0(r5)
 800ae7c:	803e3a16 	blt	r16,zero,800a768 <__alt_data_end+0xfc00a768>
 800ae80:	00ffdfc4 	movi	r3,-129
 800ae84:	d8802215 	stw	r2,136(sp)
 800ae88:	88e2703a 	and	r17,r17,r3
 800ae8c:	002b883a 	mov	r21,zero
 800ae90:	983e9b26 	beq	r19,zero,800a900 <__alt_data_end+0xfc00a900>
 800ae94:	00800244 	movi	r2,9
 800ae98:	14fdc936 	bltu	r2,r19,800a5c0 <__alt_data_end+0xfc00a5c0>
 800ae9c:	003e9a06 	br	800a908 <__alt_data_end+0xfc00a908>
 800aea0:	00800c04 	movi	r2,48
 800aea4:	d8c01d45 	stb	r3,117(sp)
 800aea8:	d8801d05 	stb	r2,116(sp)
 800aeac:	d8001d85 	stb	zero,118(sp)
 800aeb0:	88c00094 	ori	r3,r17,2
 800aeb4:	80009c16 	blt	r16,zero,800b128 <___vfiprintf_internal_r+0x1368>
 800aeb8:	00bfdfc4 	movi	r2,-129
 800aebc:	88a2703a 	and	r17,r17,r2
 800aec0:	8c400094 	ori	r17,r17,2
 800aec4:	002b883a 	mov	r21,zero
 800aec8:	003f8506 	br	800ace0 <__alt_data_end+0xfc00ace0>
 800aecc:	b029883a 	mov	r20,r22
 800aed0:	003c0b06 	br	8009f00 <__alt_data_end+0xfc009f00>
 800aed4:	04e7c83a 	sub	r19,zero,r19
 800aed8:	05400b44 	movi	r21,45
 800aedc:	9804c03a 	cmpne	r2,r19,zero
 800aee0:	0529c83a 	sub	r20,zero,r20
 800aee4:	dd401d85 	stb	r21,118(sp)
 800aee8:	a0a9c83a 	sub	r20,r20,r2
 800aeec:	80009716 	blt	r16,zero,800b14c <___vfiprintf_internal_r+0x138c>
 800aef0:	00bfdfc4 	movi	r2,-129
 800aef4:	88a2703a 	and	r17,r17,r2
 800aef8:	003db006 	br	800a5bc <__alt_data_end+0xfc00a5bc>
 800aefc:	b0c00007 	ldb	r3,0(r22)
 800af00:	003c0c06 	br	8009f34 <__alt_data_end+0xfc009f34>
 800af04:	8880100c 	andi	r2,r17,64
 800af08:	d8001d85 	stb	zero,118(sp)
 800af0c:	1000461e 	bne	r2,zero,800b028 <___vfiprintf_internal_r+0x1268>
 800af10:	d9002217 	ldw	r4,136(sp)
 800af14:	0029883a 	mov	r20,zero
 800af18:	20800104 	addi	r2,r4,4
 800af1c:	24c00017 	ldw	r19,0(r4)
 800af20:	803df80e 	bge	r16,zero,800a704 <__alt_data_end+0xfc00a704>
 800af24:	9d06b03a 	or	r3,r19,r20
 800af28:	d8802215 	stw	r2,136(sp)
 800af2c:	183d5e1e 	bne	r3,zero,800a4a8 <__alt_data_end+0xfc00a4a8>
 800af30:	002b883a 	mov	r21,zero
 800af34:	0005883a 	mov	r2,zero
 800af38:	003e1006 	br	800a77c <__alt_data_end+0xfc00a77c>
 800af3c:	8880040c 	andi	r2,r17,16
 800af40:	1000321e 	bne	r2,zero,800b00c <___vfiprintf_internal_r+0x124c>
 800af44:	8c40100c 	andi	r17,r17,64
 800af48:	88008d26 	beq	r17,zero,800b180 <___vfiprintf_internal_r+0x13c0>
 800af4c:	d9402217 	ldw	r5,136(sp)
 800af50:	d8c02417 	ldw	r3,144(sp)
 800af54:	28800017 	ldw	r2,0(r5)
 800af58:	29400104 	addi	r5,r5,4
 800af5c:	d9402215 	stw	r5,136(sp)
 800af60:	10c0000d 	sth	r3,0(r2)
 800af64:	003bca06 	br	8009e90 <__alt_data_end+0xfc009e90>
 800af68:	8880100c 	andi	r2,r17,64
 800af6c:	10003a26 	beq	r2,zero,800b058 <___vfiprintf_internal_r+0x1298>
 800af70:	d8802217 	ldw	r2,136(sp)
 800af74:	14c0000f 	ldh	r19,0(r2)
 800af78:	10800104 	addi	r2,r2,4
 800af7c:	d8802215 	stw	r2,136(sp)
 800af80:	9829d7fa 	srai	r20,r19,31
 800af84:	a005883a 	mov	r2,r20
 800af88:	003d8506 	br	800a5a0 <__alt_data_end+0xfc00a5a0>
 800af8c:	8880100c 	andi	r2,r17,64
 800af90:	10002b26 	beq	r2,zero,800b040 <___vfiprintf_internal_r+0x1280>
 800af94:	d8802217 	ldw	r2,136(sp)
 800af98:	0029883a 	mov	r20,zero
 800af9c:	14c0000b 	ldhu	r19,0(r2)
 800afa0:	10800104 	addi	r2,r2,4
 800afa4:	d8802215 	stw	r2,136(sp)
 800afa8:	003d5d06 	br	800a520 <__alt_data_end+0xfc00a520>
 800afac:	d9402017 	ldw	r5,128(sp)
 800afb0:	d9002117 	ldw	r4,132(sp)
 800afb4:	d9801a04 	addi	r6,sp,104
 800afb8:	d8c02a15 	stw	r3,168(sp)
 800afbc:	d9c02b15 	stw	r7,172(sp)
 800afc0:	8009cac0 	call	8009cac <__sprint_r.part.0>
 800afc4:	d8c02a17 	ldw	r3,168(sp)
 800afc8:	d9c02b17 	ldw	r7,172(sp)
 800afcc:	103eb41e 	bne	r2,zero,800aaa0 <__alt_data_end+0xfc00aaa0>
 800afd0:	d9001b17 	ldw	r4,108(sp)
 800afd4:	d8801c17 	ldw	r2,112(sp)
 800afd8:	d811883a 	mov	r8,sp
 800afdc:	21400044 	addi	r5,r4,1
 800afe0:	003e6706 	br	800a980 <__alt_data_end+0xfc00a980>
 800afe4:	00bfffc4 	movi	r2,-1
 800afe8:	003c4a06 	br	800a114 <__alt_data_end+0xfc00a114>
 800afec:	9805883a 	mov	r2,r19
 800aff0:	003ee806 	br	800ab94 <__alt_data_end+0xfc00ab94>
 800aff4:	d8c02217 	ldw	r3,136(sp)
 800aff8:	0029883a 	mov	r20,zero
 800affc:	18800104 	addi	r2,r3,4
 800b000:	1cc0000b 	ldhu	r19,0(r3)
 800b004:	803f9e0e 	bge	r16,zero,800ae80 <__alt_data_end+0xfc00ae80>
 800b008:	003dd706 	br	800a768 <__alt_data_end+0xfc00a768>
 800b00c:	d8c02217 	ldw	r3,136(sp)
 800b010:	d9002417 	ldw	r4,144(sp)
 800b014:	18800017 	ldw	r2,0(r3)
 800b018:	18c00104 	addi	r3,r3,4
 800b01c:	d8c02215 	stw	r3,136(sp)
 800b020:	11000015 	stw	r4,0(r2)
 800b024:	003b9a06 	br	8009e90 <__alt_data_end+0xfc009e90>
 800b028:	d8c02217 	ldw	r3,136(sp)
 800b02c:	0029883a 	mov	r20,zero
 800b030:	18800104 	addi	r2,r3,4
 800b034:	1cc0000b 	ldhu	r19,0(r3)
 800b038:	803db20e 	bge	r16,zero,800a704 <__alt_data_end+0xfc00a704>
 800b03c:	003fb906 	br	800af24 <__alt_data_end+0xfc00af24>
 800b040:	d9002217 	ldw	r4,136(sp)
 800b044:	0029883a 	mov	r20,zero
 800b048:	24c00017 	ldw	r19,0(r4)
 800b04c:	21000104 	addi	r4,r4,4
 800b050:	d9002215 	stw	r4,136(sp)
 800b054:	003d3206 	br	800a520 <__alt_data_end+0xfc00a520>
 800b058:	d8c02217 	ldw	r3,136(sp)
 800b05c:	1cc00017 	ldw	r19,0(r3)
 800b060:	18c00104 	addi	r3,r3,4
 800b064:	d8c02215 	stw	r3,136(sp)
 800b068:	9829d7fa 	srai	r20,r19,31
 800b06c:	a005883a 	mov	r2,r20
 800b070:	003d4b06 	br	800a5a0 <__alt_data_end+0xfc00a5a0>
 800b074:	0009883a 	mov	r4,zero
 800b078:	01400044 	movi	r5,1
 800b07c:	d811883a 	mov	r8,sp
 800b080:	003e4f06 	br	800a9c0 <__alt_data_end+0xfc00a9c0>
 800b084:	d8c02215 	stw	r3,136(sp)
 800b088:	002b883a 	mov	r21,zero
 800b08c:	003db806 	br	800a770 <__alt_data_end+0xfc00a770>
 800b090:	d811883a 	mov	r8,sp
 800b094:	003e9606 	br	800aaf0 <__alt_data_end+0xfc00aaf0>
 800b098:	01020074 	movhi	r4,2049
 800b09c:	21093504 	addi	r4,r4,9428
 800b0a0:	d9002315 	stw	r4,140(sp)
 800b0a4:	003e6306 	br	800aa34 <__alt_data_end+0xfc00aa34>
 800b0a8:	b0c00043 	ldbu	r3,1(r22)
 800b0ac:	8c400814 	ori	r17,r17,32
 800b0b0:	b5800044 	addi	r22,r22,1
 800b0b4:	18c03fcc 	andi	r3,r3,255
 800b0b8:	18c0201c 	xori	r3,r3,128
 800b0bc:	18ffe004 	addi	r3,r3,-128
 800b0c0:	003b9c06 	br	8009f34 <__alt_data_end+0xfc009f34>
 800b0c4:	b809883a 	mov	r4,r23
 800b0c8:	da002a15 	stw	r8,168(sp)
 800b0cc:	80025300 	call	8002530 <strlen>
 800b0d0:	1029883a 	mov	r20,r2
 800b0d4:	dd401d83 	ldbu	r21,118(sp)
 800b0d8:	df002215 	stw	fp,136(sp)
 800b0dc:	0021883a 	mov	r16,zero
 800b0e0:	da002a17 	ldw	r8,168(sp)
 800b0e4:	003c3906 	br	800a1cc <__alt_data_end+0xfc00a1cc>
 800b0e8:	d9402017 	ldw	r5,128(sp)
 800b0ec:	d9002117 	ldw	r4,132(sp)
 800b0f0:	d9801a04 	addi	r6,sp,104
 800b0f4:	8009cac0 	call	8009cac <__sprint_r.part.0>
 800b0f8:	103e691e 	bne	r2,zero,800aaa0 <__alt_data_end+0xfc00aaa0>
 800b0fc:	d9001b17 	ldw	r4,108(sp)
 800b100:	d8801c17 	ldw	r2,112(sp)
 800b104:	d811883a 	mov	r8,sp
 800b108:	21400044 	addi	r5,r4,1
 800b10c:	003e2e06 	br	800a9c8 <__alt_data_end+0xfc00a9c8>
 800b110:	01020074 	movhi	r4,2049
 800b114:	21093904 	addi	r4,r4,9444
 800b118:	d9002315 	stw	r4,140(sp)
 800b11c:	d9001b17 	ldw	r4,108(sp)
 800b120:	21000044 	addi	r4,r4,1
 800b124:	003c5e06 	br	800a2a0 <__alt_data_end+0xfc00a2a0>
 800b128:	002b883a 	mov	r21,zero
 800b12c:	00800084 	movi	r2,2
 800b130:	10803fcc 	andi	r2,r2,255
 800b134:	01000044 	movi	r4,1
 800b138:	11002b26 	beq	r2,r4,800b1e8 <___vfiprintf_internal_r+0x1428>
 800b13c:	01000084 	movi	r4,2
 800b140:	11002b1e 	bne	r2,r4,800b1f0 <___vfiprintf_internal_r+0x1430>
 800b144:	1823883a 	mov	r17,r3
 800b148:	003ee506 	br	800ace0 <__alt_data_end+0xfc00ace0>
 800b14c:	8807883a 	mov	r3,r17
 800b150:	00800044 	movi	r2,1
 800b154:	003ff606 	br	800b130 <__alt_data_end+0xfc00b130>
 800b158:	00800184 	movi	r2,6
 800b15c:	1400012e 	bgeu	r2,r16,800b164 <___vfiprintf_internal_r+0x13a4>
 800b160:	1021883a 	mov	r16,r2
 800b164:	8029883a 	mov	r20,r16
 800b168:	8027883a 	mov	r19,r16
 800b16c:	80002216 	blt	r16,zero,800b1f8 <___vfiprintf_internal_r+0x1438>
 800b170:	05c20074 	movhi	r23,2049
 800b174:	df002215 	stw	fp,136(sp)
 800b178:	bdc8d904 	addi	r23,r23,9060
 800b17c:	003cfb06 	br	800a56c <__alt_data_end+0xfc00a56c>
 800b180:	d9002217 	ldw	r4,136(sp)
 800b184:	d9402417 	ldw	r5,144(sp)
 800b188:	20800017 	ldw	r2,0(r4)
 800b18c:	21000104 	addi	r4,r4,4
 800b190:	d9002215 	stw	r4,136(sp)
 800b194:	11400015 	stw	r5,0(r2)
 800b198:	003b3d06 	br	8009e90 <__alt_data_end+0xfc009e90>
 800b19c:	01420074 	movhi	r5,2049
 800b1a0:	29493904 	addi	r5,r5,9444
 800b1a4:	d9402315 	stw	r5,140(sp)
 800b1a8:	d9401b17 	ldw	r5,108(sp)
 800b1ac:	29400044 	addi	r5,r5,1
 800b1b0:	003e6d06 	br	800ab68 <__alt_data_end+0xfc00ab68>
 800b1b4:	8029883a 	mov	r20,r16
 800b1b8:	dd401d83 	ldbu	r21,118(sp)
 800b1bc:	df002215 	stw	fp,136(sp)
 800b1c0:	0021883a 	mov	r16,zero
 800b1c4:	003c0106 	br	800a1cc <__alt_data_end+0xfc00a1cc>
 800b1c8:	00c20074 	movhi	r3,2049
 800b1cc:	18c93504 	addi	r3,r3,9428
 800b1d0:	d8c02315 	stw	r3,140(sp)
 800b1d4:	280d883a 	mov	r6,r5
 800b1d8:	003c6906 	br	800a380 <__alt_data_end+0xfc00a380>
 800b1dc:	802d883a 	mov	r22,r16
 800b1e0:	0021883a 	mov	r16,zero
 800b1e4:	003b5406 	br	8009f38 <__alt_data_end+0xfc009f38>
 800b1e8:	1823883a 	mov	r17,r3
 800b1ec:	003cf306 	br	800a5bc <__alt_data_end+0xfc00a5bc>
 800b1f0:	1823883a 	mov	r17,r3
 800b1f4:	003cad06 	br	800a4ac <__alt_data_end+0xfc00a4ac>
 800b1f8:	0027883a 	mov	r19,zero
 800b1fc:	003fdc06 	br	800b170 <__alt_data_end+0xfc00b170>
 800b200:	d9402217 	ldw	r5,136(sp)
 800b204:	8005883a 	mov	r2,r16
 800b208:	b0c00043 	ldbu	r3,1(r22)
 800b20c:	2c000017 	ldw	r16,0(r5)
 800b210:	29000104 	addi	r4,r5,4
 800b214:	d9002215 	stw	r4,136(sp)
 800b218:	102d883a 	mov	r22,r2
 800b21c:	803fa50e 	bge	r16,zero,800b0b4 <__alt_data_end+0xfc00b0b4>
 800b220:	18c03fcc 	andi	r3,r3,255
 800b224:	18c0201c 	xori	r3,r3,128
 800b228:	043fffc4 	movi	r16,-1
 800b22c:	18ffe004 	addi	r3,r3,-128
 800b230:	003b4006 	br	8009f34 <__alt_data_end+0xfc009f34>
 800b234:	d9402303 	ldbu	r5,140(sp)
 800b238:	d9401d85 	stb	r5,118(sp)
 800b23c:	003cae06 	br	800a4f8 <__alt_data_end+0xfc00a4f8>
 800b240:	d8c02303 	ldbu	r3,140(sp)
 800b244:	d8c01d85 	stb	r3,118(sp)
 800b248:	003d1406 	br	800a69c <__alt_data_end+0xfc00a69c>
 800b24c:	d8c02303 	ldbu	r3,140(sp)
 800b250:	d8c01d85 	stb	r3,118(sp)
 800b254:	003cca06 	br	800a580 <__alt_data_end+0xfc00a580>
 800b258:	8880004c 	andi	r2,r17,1
 800b25c:	002b883a 	mov	r21,zero
 800b260:	10000526 	beq	r2,zero,800b278 <___vfiprintf_internal_r+0x14b8>
 800b264:	00800c04 	movi	r2,48
 800b268:	d88019c5 	stb	r2,103(sp)
 800b26c:	dd002817 	ldw	r20,160(sp)
 800b270:	ddc019c4 	addi	r23,sp,103
 800b274:	003bd506 	br	800a1cc <__alt_data_end+0xfc00a1cc>
 800b278:	0029883a 	mov	r20,zero
 800b27c:	ddc01a04 	addi	r23,sp,104
 800b280:	003bd206 	br	800a1cc <__alt_data_end+0xfc00a1cc>
 800b284:	d9002303 	ldbu	r4,140(sp)
 800b288:	d9001d85 	stb	r4,118(sp)
 800b28c:	003da606 	br	800a928 <__alt_data_end+0xfc00a928>
 800b290:	d8c02303 	ldbu	r3,140(sp)
 800b294:	d8c01d85 	stb	r3,118(sp)
 800b298:	003c7606 	br	800a474 <__alt_data_end+0xfc00a474>
 800b29c:	d8c02303 	ldbu	r3,140(sp)
 800b2a0:	d8c01d85 	stb	r3,118(sp)
 800b2a4:	003c6506 	br	800a43c <__alt_data_end+0xfc00a43c>
 800b2a8:	d9002303 	ldbu	r4,140(sp)
 800b2ac:	d9001d85 	stb	r4,118(sp)
 800b2b0:	003d3d06 	br	800a7a8 <__alt_data_end+0xfc00a7a8>
 800b2b4:	d8c02303 	ldbu	r3,140(sp)
 800b2b8:	d8c01d85 	stb	r3,118(sp)
 800b2bc:	003d1d06 	br	800a734 <__alt_data_end+0xfc00a734>
 800b2c0:	d8c02303 	ldbu	r3,140(sp)
 800b2c4:	d8c01d85 	stb	r3,118(sp)
 800b2c8:	003d0306 	br	800a6d8 <__alt_data_end+0xfc00a6d8>

0800b2cc <__vfiprintf_internal>:
 800b2cc:	00820074 	movhi	r2,2049
 800b2d0:	10903604 	addi	r2,r2,16600
 800b2d4:	300f883a 	mov	r7,r6
 800b2d8:	280d883a 	mov	r6,r5
 800b2dc:	200b883a 	mov	r5,r4
 800b2e0:	11000017 	ldw	r4,0(r2)
 800b2e4:	8009dc01 	jmpi	8009dc0 <___vfiprintf_internal_r>

0800b2e8 <__sbprintf>:
 800b2e8:	2880030b 	ldhu	r2,12(r5)
 800b2ec:	2ac01917 	ldw	r11,100(r5)
 800b2f0:	2a80038b 	ldhu	r10,14(r5)
 800b2f4:	2a400717 	ldw	r9,28(r5)
 800b2f8:	2a000917 	ldw	r8,36(r5)
 800b2fc:	defee204 	addi	sp,sp,-1144
 800b300:	00c10004 	movi	r3,1024
 800b304:	dc011a15 	stw	r16,1128(sp)
 800b308:	10bfff4c 	andi	r2,r2,65533
 800b30c:	2821883a 	mov	r16,r5
 800b310:	d8cb883a 	add	r5,sp,r3
 800b314:	dc811c15 	stw	r18,1136(sp)
 800b318:	dc411b15 	stw	r17,1132(sp)
 800b31c:	dfc11d15 	stw	ra,1140(sp)
 800b320:	2025883a 	mov	r18,r4
 800b324:	d881030d 	sth	r2,1036(sp)
 800b328:	dac11915 	stw	r11,1124(sp)
 800b32c:	da81038d 	sth	r10,1038(sp)
 800b330:	da410715 	stw	r9,1052(sp)
 800b334:	da010915 	stw	r8,1060(sp)
 800b338:	dec10015 	stw	sp,1024(sp)
 800b33c:	dec10415 	stw	sp,1040(sp)
 800b340:	d8c10215 	stw	r3,1032(sp)
 800b344:	d8c10515 	stw	r3,1044(sp)
 800b348:	d8010615 	stw	zero,1048(sp)
 800b34c:	8009dc00 	call	8009dc0 <___vfiprintf_internal_r>
 800b350:	1023883a 	mov	r17,r2
 800b354:	10000416 	blt	r2,zero,800b368 <__sbprintf+0x80>
 800b358:	d9410004 	addi	r5,sp,1024
 800b35c:	9009883a 	mov	r4,r18
 800b360:	800659c0 	call	800659c <_fflush_r>
 800b364:	10000d1e 	bne	r2,zero,800b39c <__sbprintf+0xb4>
 800b368:	d881030b 	ldhu	r2,1036(sp)
 800b36c:	1080100c 	andi	r2,r2,64
 800b370:	10000326 	beq	r2,zero,800b380 <__sbprintf+0x98>
 800b374:	8080030b 	ldhu	r2,12(r16)
 800b378:	10801014 	ori	r2,r2,64
 800b37c:	8080030d 	sth	r2,12(r16)
 800b380:	8805883a 	mov	r2,r17
 800b384:	dfc11d17 	ldw	ra,1140(sp)
 800b388:	dc811c17 	ldw	r18,1136(sp)
 800b38c:	dc411b17 	ldw	r17,1132(sp)
 800b390:	dc011a17 	ldw	r16,1128(sp)
 800b394:	dec11e04 	addi	sp,sp,1144
 800b398:	f800283a 	ret
 800b39c:	047fffc4 	movi	r17,-1
 800b3a0:	003ff106 	br	800b368 <__alt_data_end+0xfc00b368>

0800b3a4 <_write_r>:
 800b3a4:	defffd04 	addi	sp,sp,-12
 800b3a8:	2805883a 	mov	r2,r5
 800b3ac:	dc000015 	stw	r16,0(sp)
 800b3b0:	04020074 	movhi	r16,2049
 800b3b4:	dc400115 	stw	r17,4(sp)
 800b3b8:	300b883a 	mov	r5,r6
 800b3bc:	84170704 	addi	r16,r16,23580
 800b3c0:	2023883a 	mov	r17,r4
 800b3c4:	380d883a 	mov	r6,r7
 800b3c8:	1009883a 	mov	r4,r2
 800b3cc:	dfc00215 	stw	ra,8(sp)
 800b3d0:	80000015 	stw	zero,0(r16)
 800b3d4:	800fbf40 	call	800fbf4 <write>
 800b3d8:	00ffffc4 	movi	r3,-1
 800b3dc:	10c00526 	beq	r2,r3,800b3f4 <_write_r+0x50>
 800b3e0:	dfc00217 	ldw	ra,8(sp)
 800b3e4:	dc400117 	ldw	r17,4(sp)
 800b3e8:	dc000017 	ldw	r16,0(sp)
 800b3ec:	dec00304 	addi	sp,sp,12
 800b3f0:	f800283a 	ret
 800b3f4:	80c00017 	ldw	r3,0(r16)
 800b3f8:	183ff926 	beq	r3,zero,800b3e0 <__alt_data_end+0xfc00b3e0>
 800b3fc:	88c00015 	stw	r3,0(r17)
 800b400:	003ff706 	br	800b3e0 <__alt_data_end+0xfc00b3e0>

0800b404 <_close_r>:
 800b404:	defffd04 	addi	sp,sp,-12
 800b408:	dc000015 	stw	r16,0(sp)
 800b40c:	04020074 	movhi	r16,2049
 800b410:	dc400115 	stw	r17,4(sp)
 800b414:	84170704 	addi	r16,r16,23580
 800b418:	2023883a 	mov	r17,r4
 800b41c:	2809883a 	mov	r4,r5
 800b420:	dfc00215 	stw	ra,8(sp)
 800b424:	80000015 	stw	zero,0(r16)
 800b428:	800f36c0 	call	800f36c <close>
 800b42c:	00ffffc4 	movi	r3,-1
 800b430:	10c00526 	beq	r2,r3,800b448 <_close_r+0x44>
 800b434:	dfc00217 	ldw	ra,8(sp)
 800b438:	dc400117 	ldw	r17,4(sp)
 800b43c:	dc000017 	ldw	r16,0(sp)
 800b440:	dec00304 	addi	sp,sp,12
 800b444:	f800283a 	ret
 800b448:	80c00017 	ldw	r3,0(r16)
 800b44c:	183ff926 	beq	r3,zero,800b434 <__alt_data_end+0xfc00b434>
 800b450:	88c00015 	stw	r3,0(r17)
 800b454:	003ff706 	br	800b434 <__alt_data_end+0xfc00b434>

0800b458 <_calloc_r>:
 800b458:	defffe04 	addi	sp,sp,-8
 800b45c:	2805883a 	mov	r2,r5
 800b460:	dc000015 	stw	r16,0(sp)
 800b464:	300b883a 	mov	r5,r6
 800b468:	2021883a 	mov	r16,r4
 800b46c:	1009883a 	mov	r4,r2
 800b470:	dfc00115 	stw	ra,4(sp)
 800b474:	800ca640 	call	800ca64 <__mulsi3>
 800b478:	100b883a 	mov	r5,r2
 800b47c:	8009883a 	mov	r4,r16
 800b480:	80076f40 	call	80076f4 <_malloc_r>
 800b484:	10002926 	beq	r2,zero,800b52c <_calloc_r+0xd4>
 800b488:	11bfff17 	ldw	r6,-4(r2)
 800b48c:	1021883a 	mov	r16,r2
 800b490:	00bfff04 	movi	r2,-4
 800b494:	308c703a 	and	r6,r6,r2
 800b498:	00c00904 	movi	r3,36
 800b49c:	308d883a 	add	r6,r6,r2
 800b4a0:	19801636 	bltu	r3,r6,800b4fc <_calloc_r+0xa4>
 800b4a4:	008004c4 	movi	r2,19
 800b4a8:	11800b2e 	bgeu	r2,r6,800b4d8 <_calloc_r+0x80>
 800b4ac:	80000015 	stw	zero,0(r16)
 800b4b0:	80000115 	stw	zero,4(r16)
 800b4b4:	008006c4 	movi	r2,27
 800b4b8:	11801a2e 	bgeu	r2,r6,800b524 <_calloc_r+0xcc>
 800b4bc:	80000215 	stw	zero,8(r16)
 800b4c0:	80000315 	stw	zero,12(r16)
 800b4c4:	30c0151e 	bne	r6,r3,800b51c <_calloc_r+0xc4>
 800b4c8:	80000415 	stw	zero,16(r16)
 800b4cc:	80800604 	addi	r2,r16,24
 800b4d0:	80000515 	stw	zero,20(r16)
 800b4d4:	00000106 	br	800b4dc <_calloc_r+0x84>
 800b4d8:	8005883a 	mov	r2,r16
 800b4dc:	10000015 	stw	zero,0(r2)
 800b4e0:	10000115 	stw	zero,4(r2)
 800b4e4:	10000215 	stw	zero,8(r2)
 800b4e8:	8005883a 	mov	r2,r16
 800b4ec:	dfc00117 	ldw	ra,4(sp)
 800b4f0:	dc000017 	ldw	r16,0(sp)
 800b4f4:	dec00204 	addi	sp,sp,8
 800b4f8:	f800283a 	ret
 800b4fc:	000b883a 	mov	r5,zero
 800b500:	8009883a 	mov	r4,r16
 800b504:	80082880 	call	8008288 <memset>
 800b508:	8005883a 	mov	r2,r16
 800b50c:	dfc00117 	ldw	ra,4(sp)
 800b510:	dc000017 	ldw	r16,0(sp)
 800b514:	dec00204 	addi	sp,sp,8
 800b518:	f800283a 	ret
 800b51c:	80800404 	addi	r2,r16,16
 800b520:	003fee06 	br	800b4dc <__alt_data_end+0xfc00b4dc>
 800b524:	80800204 	addi	r2,r16,8
 800b528:	003fec06 	br	800b4dc <__alt_data_end+0xfc00b4dc>
 800b52c:	0005883a 	mov	r2,zero
 800b530:	003fee06 	br	800b4ec <__alt_data_end+0xfc00b4ec>

0800b534 <_fclose_r>:
 800b534:	28003926 	beq	r5,zero,800b61c <_fclose_r+0xe8>
 800b538:	defffc04 	addi	sp,sp,-16
 800b53c:	dc400115 	stw	r17,4(sp)
 800b540:	dc000015 	stw	r16,0(sp)
 800b544:	dfc00315 	stw	ra,12(sp)
 800b548:	dc800215 	stw	r18,8(sp)
 800b54c:	2023883a 	mov	r17,r4
 800b550:	2821883a 	mov	r16,r5
 800b554:	20000226 	beq	r4,zero,800b560 <_fclose_r+0x2c>
 800b558:	20800e17 	ldw	r2,56(r4)
 800b55c:	10002726 	beq	r2,zero,800b5fc <_fclose_r+0xc8>
 800b560:	8080030f 	ldh	r2,12(r16)
 800b564:	1000071e 	bne	r2,zero,800b584 <_fclose_r+0x50>
 800b568:	0005883a 	mov	r2,zero
 800b56c:	dfc00317 	ldw	ra,12(sp)
 800b570:	dc800217 	ldw	r18,8(sp)
 800b574:	dc400117 	ldw	r17,4(sp)
 800b578:	dc000017 	ldw	r16,0(sp)
 800b57c:	dec00404 	addi	sp,sp,16
 800b580:	f800283a 	ret
 800b584:	800b883a 	mov	r5,r16
 800b588:	8809883a 	mov	r4,r17
 800b58c:	80063800 	call	8006380 <__sflush_r>
 800b590:	1025883a 	mov	r18,r2
 800b594:	80800b17 	ldw	r2,44(r16)
 800b598:	10000426 	beq	r2,zero,800b5ac <_fclose_r+0x78>
 800b59c:	81400717 	ldw	r5,28(r16)
 800b5a0:	8809883a 	mov	r4,r17
 800b5a4:	103ee83a 	callr	r2
 800b5a8:	10001616 	blt	r2,zero,800b604 <_fclose_r+0xd0>
 800b5ac:	8080030b 	ldhu	r2,12(r16)
 800b5b0:	1080200c 	andi	r2,r2,128
 800b5b4:	1000151e 	bne	r2,zero,800b60c <_fclose_r+0xd8>
 800b5b8:	81400c17 	ldw	r5,48(r16)
 800b5bc:	28000526 	beq	r5,zero,800b5d4 <_fclose_r+0xa0>
 800b5c0:	80801004 	addi	r2,r16,64
 800b5c4:	28800226 	beq	r5,r2,800b5d0 <_fclose_r+0x9c>
 800b5c8:	8809883a 	mov	r4,r17
 800b5cc:	8006afc0 	call	8006afc <_free_r>
 800b5d0:	80000c15 	stw	zero,48(r16)
 800b5d4:	81401117 	ldw	r5,68(r16)
 800b5d8:	28000326 	beq	r5,zero,800b5e8 <_fclose_r+0xb4>
 800b5dc:	8809883a 	mov	r4,r17
 800b5e0:	8006afc0 	call	8006afc <_free_r>
 800b5e4:	80001115 	stw	zero,68(r16)
 800b5e8:	80069980 	call	8006998 <__sfp_lock_acquire>
 800b5ec:	8000030d 	sth	zero,12(r16)
 800b5f0:	800699c0 	call	800699c <__sfp_lock_release>
 800b5f4:	9005883a 	mov	r2,r18
 800b5f8:	003fdc06 	br	800b56c <__alt_data_end+0xfc00b56c>
 800b5fc:	80069880 	call	8006988 <__sinit>
 800b600:	003fd706 	br	800b560 <__alt_data_end+0xfc00b560>
 800b604:	04bfffc4 	movi	r18,-1
 800b608:	003fe806 	br	800b5ac <__alt_data_end+0xfc00b5ac>
 800b60c:	81400417 	ldw	r5,16(r16)
 800b610:	8809883a 	mov	r4,r17
 800b614:	8006afc0 	call	8006afc <_free_r>
 800b618:	003fe706 	br	800b5b8 <__alt_data_end+0xfc00b5b8>
 800b61c:	0005883a 	mov	r2,zero
 800b620:	f800283a 	ret

0800b624 <fclose>:
 800b624:	00820074 	movhi	r2,2049
 800b628:	10903604 	addi	r2,r2,16600
 800b62c:	200b883a 	mov	r5,r4
 800b630:	11000017 	ldw	r4,0(r2)
 800b634:	800b5341 	jmpi	800b534 <_fclose_r>

0800b638 <__fputwc>:
 800b638:	defff804 	addi	sp,sp,-32
 800b63c:	dcc00415 	stw	r19,16(sp)
 800b640:	dc800315 	stw	r18,12(sp)
 800b644:	dc000115 	stw	r16,4(sp)
 800b648:	dfc00715 	stw	ra,28(sp)
 800b64c:	dd400615 	stw	r21,24(sp)
 800b650:	dd000515 	stw	r20,20(sp)
 800b654:	dc400215 	stw	r17,8(sp)
 800b658:	2027883a 	mov	r19,r4
 800b65c:	2825883a 	mov	r18,r5
 800b660:	3021883a 	mov	r16,r6
 800b664:	80074e40 	call	80074e4 <__locale_mb_cur_max>
 800b668:	00c00044 	movi	r3,1
 800b66c:	10c03e26 	beq	r2,r3,800b768 <__fputwc+0x130>
 800b670:	81c01704 	addi	r7,r16,92
 800b674:	900d883a 	mov	r6,r18
 800b678:	d80b883a 	mov	r5,sp
 800b67c:	9809883a 	mov	r4,r19
 800b680:	800bb080 	call	800bb08 <_wcrtomb_r>
 800b684:	1029883a 	mov	r20,r2
 800b688:	00bfffc4 	movi	r2,-1
 800b68c:	a0802026 	beq	r20,r2,800b710 <__fputwc+0xd8>
 800b690:	d9400003 	ldbu	r5,0(sp)
 800b694:	a0001c26 	beq	r20,zero,800b708 <__fputwc+0xd0>
 800b698:	0023883a 	mov	r17,zero
 800b69c:	05400284 	movi	r21,10
 800b6a0:	00000906 	br	800b6c8 <__fputwc+0x90>
 800b6a4:	80800017 	ldw	r2,0(r16)
 800b6a8:	11400005 	stb	r5,0(r2)
 800b6ac:	80c00017 	ldw	r3,0(r16)
 800b6b0:	18c00044 	addi	r3,r3,1
 800b6b4:	80c00015 	stw	r3,0(r16)
 800b6b8:	8c400044 	addi	r17,r17,1
 800b6bc:	dc45883a 	add	r2,sp,r17
 800b6c0:	8d00112e 	bgeu	r17,r20,800b708 <__fputwc+0xd0>
 800b6c4:	11400003 	ldbu	r5,0(r2)
 800b6c8:	80c00217 	ldw	r3,8(r16)
 800b6cc:	18ffffc4 	addi	r3,r3,-1
 800b6d0:	80c00215 	stw	r3,8(r16)
 800b6d4:	183ff30e 	bge	r3,zero,800b6a4 <__alt_data_end+0xfc00b6a4>
 800b6d8:	80800617 	ldw	r2,24(r16)
 800b6dc:	18801916 	blt	r3,r2,800b744 <__fputwc+0x10c>
 800b6e0:	80800017 	ldw	r2,0(r16)
 800b6e4:	11400005 	stb	r5,0(r2)
 800b6e8:	80800017 	ldw	r2,0(r16)
 800b6ec:	10c00003 	ldbu	r3,0(r2)
 800b6f0:	10800044 	addi	r2,r2,1
 800b6f4:	1d402326 	beq	r3,r21,800b784 <__fputwc+0x14c>
 800b6f8:	80800015 	stw	r2,0(r16)
 800b6fc:	8c400044 	addi	r17,r17,1
 800b700:	dc45883a 	add	r2,sp,r17
 800b704:	8d3fef36 	bltu	r17,r20,800b6c4 <__alt_data_end+0xfc00b6c4>
 800b708:	9005883a 	mov	r2,r18
 800b70c:	00000406 	br	800b720 <__fputwc+0xe8>
 800b710:	80c0030b 	ldhu	r3,12(r16)
 800b714:	a005883a 	mov	r2,r20
 800b718:	18c01014 	ori	r3,r3,64
 800b71c:	80c0030d 	sth	r3,12(r16)
 800b720:	dfc00717 	ldw	ra,28(sp)
 800b724:	dd400617 	ldw	r21,24(sp)
 800b728:	dd000517 	ldw	r20,20(sp)
 800b72c:	dcc00417 	ldw	r19,16(sp)
 800b730:	dc800317 	ldw	r18,12(sp)
 800b734:	dc400217 	ldw	r17,8(sp)
 800b738:	dc000117 	ldw	r16,4(sp)
 800b73c:	dec00804 	addi	sp,sp,32
 800b740:	f800283a 	ret
 800b744:	800d883a 	mov	r6,r16
 800b748:	29403fcc 	andi	r5,r5,255
 800b74c:	9809883a 	mov	r4,r19
 800b750:	800b9b00 	call	800b9b0 <__swbuf_r>
 800b754:	10bfffe0 	cmpeqi	r2,r2,-1
 800b758:	10803fcc 	andi	r2,r2,255
 800b75c:	103fd626 	beq	r2,zero,800b6b8 <__alt_data_end+0xfc00b6b8>
 800b760:	00bfffc4 	movi	r2,-1
 800b764:	003fee06 	br	800b720 <__alt_data_end+0xfc00b720>
 800b768:	90ffffc4 	addi	r3,r18,-1
 800b76c:	01003f84 	movi	r4,254
 800b770:	20ffbf36 	bltu	r4,r3,800b670 <__alt_data_end+0xfc00b670>
 800b774:	900b883a 	mov	r5,r18
 800b778:	dc800005 	stb	r18,0(sp)
 800b77c:	1029883a 	mov	r20,r2
 800b780:	003fc506 	br	800b698 <__alt_data_end+0xfc00b698>
 800b784:	800d883a 	mov	r6,r16
 800b788:	a80b883a 	mov	r5,r21
 800b78c:	9809883a 	mov	r4,r19
 800b790:	800b9b00 	call	800b9b0 <__swbuf_r>
 800b794:	10bfffe0 	cmpeqi	r2,r2,-1
 800b798:	003fef06 	br	800b758 <__alt_data_end+0xfc00b758>

0800b79c <_fputwc_r>:
 800b79c:	3080030b 	ldhu	r2,12(r6)
 800b7a0:	10c8000c 	andi	r3,r2,8192
 800b7a4:	1800051e 	bne	r3,zero,800b7bc <_fputwc_r+0x20>
 800b7a8:	30c01917 	ldw	r3,100(r6)
 800b7ac:	10880014 	ori	r2,r2,8192
 800b7b0:	3080030d 	sth	r2,12(r6)
 800b7b4:	18880014 	ori	r2,r3,8192
 800b7b8:	30801915 	stw	r2,100(r6)
 800b7bc:	800b6381 	jmpi	800b638 <__fputwc>

0800b7c0 <fputwc>:
 800b7c0:	00820074 	movhi	r2,2049
 800b7c4:	defffc04 	addi	sp,sp,-16
 800b7c8:	10903604 	addi	r2,r2,16600
 800b7cc:	dc000115 	stw	r16,4(sp)
 800b7d0:	14000017 	ldw	r16,0(r2)
 800b7d4:	dc400215 	stw	r17,8(sp)
 800b7d8:	dfc00315 	stw	ra,12(sp)
 800b7dc:	2023883a 	mov	r17,r4
 800b7e0:	80000226 	beq	r16,zero,800b7ec <fputwc+0x2c>
 800b7e4:	80800e17 	ldw	r2,56(r16)
 800b7e8:	10001026 	beq	r2,zero,800b82c <fputwc+0x6c>
 800b7ec:	2880030b 	ldhu	r2,12(r5)
 800b7f0:	10c8000c 	andi	r3,r2,8192
 800b7f4:	1800051e 	bne	r3,zero,800b80c <fputwc+0x4c>
 800b7f8:	28c01917 	ldw	r3,100(r5)
 800b7fc:	10880014 	ori	r2,r2,8192
 800b800:	2880030d 	sth	r2,12(r5)
 800b804:	18880014 	ori	r2,r3,8192
 800b808:	28801915 	stw	r2,100(r5)
 800b80c:	280d883a 	mov	r6,r5
 800b810:	8009883a 	mov	r4,r16
 800b814:	880b883a 	mov	r5,r17
 800b818:	dfc00317 	ldw	ra,12(sp)
 800b81c:	dc400217 	ldw	r17,8(sp)
 800b820:	dc000117 	ldw	r16,4(sp)
 800b824:	dec00404 	addi	sp,sp,16
 800b828:	800b6381 	jmpi	800b638 <__fputwc>
 800b82c:	8009883a 	mov	r4,r16
 800b830:	d9400015 	stw	r5,0(sp)
 800b834:	80069880 	call	8006988 <__sinit>
 800b838:	d9400017 	ldw	r5,0(sp)
 800b83c:	003feb06 	br	800b7ec <__alt_data_end+0xfc00b7ec>

0800b840 <_fstat_r>:
 800b840:	defffd04 	addi	sp,sp,-12
 800b844:	2805883a 	mov	r2,r5
 800b848:	dc000015 	stw	r16,0(sp)
 800b84c:	04020074 	movhi	r16,2049
 800b850:	dc400115 	stw	r17,4(sp)
 800b854:	84170704 	addi	r16,r16,23580
 800b858:	2023883a 	mov	r17,r4
 800b85c:	300b883a 	mov	r5,r6
 800b860:	1009883a 	mov	r4,r2
 800b864:	dfc00215 	stw	ra,8(sp)
 800b868:	80000015 	stw	zero,0(r16)
 800b86c:	800f4ac0 	call	800f4ac <fstat>
 800b870:	00ffffc4 	movi	r3,-1
 800b874:	10c00526 	beq	r2,r3,800b88c <_fstat_r+0x4c>
 800b878:	dfc00217 	ldw	ra,8(sp)
 800b87c:	dc400117 	ldw	r17,4(sp)
 800b880:	dc000017 	ldw	r16,0(sp)
 800b884:	dec00304 	addi	sp,sp,12
 800b888:	f800283a 	ret
 800b88c:	80c00017 	ldw	r3,0(r16)
 800b890:	183ff926 	beq	r3,zero,800b878 <__alt_data_end+0xfc00b878>
 800b894:	88c00015 	stw	r3,0(r17)
 800b898:	003ff706 	br	800b878 <__alt_data_end+0xfc00b878>

0800b89c <_isatty_r>:
 800b89c:	defffd04 	addi	sp,sp,-12
 800b8a0:	dc000015 	stw	r16,0(sp)
 800b8a4:	04020074 	movhi	r16,2049
 800b8a8:	dc400115 	stw	r17,4(sp)
 800b8ac:	84170704 	addi	r16,r16,23580
 800b8b0:	2023883a 	mov	r17,r4
 800b8b4:	2809883a 	mov	r4,r5
 800b8b8:	dfc00215 	stw	ra,8(sp)
 800b8bc:	80000015 	stw	zero,0(r16)
 800b8c0:	800f5a00 	call	800f5a0 <isatty>
 800b8c4:	00ffffc4 	movi	r3,-1
 800b8c8:	10c00526 	beq	r2,r3,800b8e0 <_isatty_r+0x44>
 800b8cc:	dfc00217 	ldw	ra,8(sp)
 800b8d0:	dc400117 	ldw	r17,4(sp)
 800b8d4:	dc000017 	ldw	r16,0(sp)
 800b8d8:	dec00304 	addi	sp,sp,12
 800b8dc:	f800283a 	ret
 800b8e0:	80c00017 	ldw	r3,0(r16)
 800b8e4:	183ff926 	beq	r3,zero,800b8cc <__alt_data_end+0xfc00b8cc>
 800b8e8:	88c00015 	stw	r3,0(r17)
 800b8ec:	003ff706 	br	800b8cc <__alt_data_end+0xfc00b8cc>

0800b8f0 <_lseek_r>:
 800b8f0:	defffd04 	addi	sp,sp,-12
 800b8f4:	2805883a 	mov	r2,r5
 800b8f8:	dc000015 	stw	r16,0(sp)
 800b8fc:	04020074 	movhi	r16,2049
 800b900:	dc400115 	stw	r17,4(sp)
 800b904:	300b883a 	mov	r5,r6
 800b908:	84170704 	addi	r16,r16,23580
 800b90c:	2023883a 	mov	r17,r4
 800b910:	380d883a 	mov	r6,r7
 800b914:	1009883a 	mov	r4,r2
 800b918:	dfc00215 	stw	ra,8(sp)
 800b91c:	80000015 	stw	zero,0(r16)
 800b920:	800f7740 	call	800f774 <lseek>
 800b924:	00ffffc4 	movi	r3,-1
 800b928:	10c00526 	beq	r2,r3,800b940 <_lseek_r+0x50>
 800b92c:	dfc00217 	ldw	ra,8(sp)
 800b930:	dc400117 	ldw	r17,4(sp)
 800b934:	dc000017 	ldw	r16,0(sp)
 800b938:	dec00304 	addi	sp,sp,12
 800b93c:	f800283a 	ret
 800b940:	80c00017 	ldw	r3,0(r16)
 800b944:	183ff926 	beq	r3,zero,800b92c <__alt_data_end+0xfc00b92c>
 800b948:	88c00015 	stw	r3,0(r17)
 800b94c:	003ff706 	br	800b92c <__alt_data_end+0xfc00b92c>

0800b950 <_read_r>:
 800b950:	defffd04 	addi	sp,sp,-12
 800b954:	2805883a 	mov	r2,r5
 800b958:	dc000015 	stw	r16,0(sp)
 800b95c:	04020074 	movhi	r16,2049
 800b960:	dc400115 	stw	r17,4(sp)
 800b964:	300b883a 	mov	r5,r6
 800b968:	84170704 	addi	r16,r16,23580
 800b96c:	2023883a 	mov	r17,r4
 800b970:	380d883a 	mov	r6,r7
 800b974:	1009883a 	mov	r4,r2
 800b978:	dfc00215 	stw	ra,8(sp)
 800b97c:	80000015 	stw	zero,0(r16)
 800b980:	800f9500 	call	800f950 <read>
 800b984:	00ffffc4 	movi	r3,-1
 800b988:	10c00526 	beq	r2,r3,800b9a0 <_read_r+0x50>
 800b98c:	dfc00217 	ldw	ra,8(sp)
 800b990:	dc400117 	ldw	r17,4(sp)
 800b994:	dc000017 	ldw	r16,0(sp)
 800b998:	dec00304 	addi	sp,sp,12
 800b99c:	f800283a 	ret
 800b9a0:	80c00017 	ldw	r3,0(r16)
 800b9a4:	183ff926 	beq	r3,zero,800b98c <__alt_data_end+0xfc00b98c>
 800b9a8:	88c00015 	stw	r3,0(r17)
 800b9ac:	003ff706 	br	800b98c <__alt_data_end+0xfc00b98c>

0800b9b0 <__swbuf_r>:
 800b9b0:	defffb04 	addi	sp,sp,-20
 800b9b4:	dcc00315 	stw	r19,12(sp)
 800b9b8:	dc800215 	stw	r18,8(sp)
 800b9bc:	dc000015 	stw	r16,0(sp)
 800b9c0:	dfc00415 	stw	ra,16(sp)
 800b9c4:	dc400115 	stw	r17,4(sp)
 800b9c8:	2025883a 	mov	r18,r4
 800b9cc:	2827883a 	mov	r19,r5
 800b9d0:	3021883a 	mov	r16,r6
 800b9d4:	20000226 	beq	r4,zero,800b9e0 <__swbuf_r+0x30>
 800b9d8:	20800e17 	ldw	r2,56(r4)
 800b9dc:	10004226 	beq	r2,zero,800bae8 <__swbuf_r+0x138>
 800b9e0:	80800617 	ldw	r2,24(r16)
 800b9e4:	8100030b 	ldhu	r4,12(r16)
 800b9e8:	80800215 	stw	r2,8(r16)
 800b9ec:	2080020c 	andi	r2,r4,8
 800b9f0:	10003626 	beq	r2,zero,800bacc <__swbuf_r+0x11c>
 800b9f4:	80c00417 	ldw	r3,16(r16)
 800b9f8:	18003426 	beq	r3,zero,800bacc <__swbuf_r+0x11c>
 800b9fc:	2088000c 	andi	r2,r4,8192
 800ba00:	9c403fcc 	andi	r17,r19,255
 800ba04:	10001a26 	beq	r2,zero,800ba70 <__swbuf_r+0xc0>
 800ba08:	80800017 	ldw	r2,0(r16)
 800ba0c:	81000517 	ldw	r4,20(r16)
 800ba10:	10c7c83a 	sub	r3,r2,r3
 800ba14:	1900200e 	bge	r3,r4,800ba98 <__swbuf_r+0xe8>
 800ba18:	18c00044 	addi	r3,r3,1
 800ba1c:	81000217 	ldw	r4,8(r16)
 800ba20:	11400044 	addi	r5,r2,1
 800ba24:	81400015 	stw	r5,0(r16)
 800ba28:	213fffc4 	addi	r4,r4,-1
 800ba2c:	81000215 	stw	r4,8(r16)
 800ba30:	14c00005 	stb	r19,0(r2)
 800ba34:	80800517 	ldw	r2,20(r16)
 800ba38:	10c01e26 	beq	r2,r3,800bab4 <__swbuf_r+0x104>
 800ba3c:	8080030b 	ldhu	r2,12(r16)
 800ba40:	1080004c 	andi	r2,r2,1
 800ba44:	10000226 	beq	r2,zero,800ba50 <__swbuf_r+0xa0>
 800ba48:	00800284 	movi	r2,10
 800ba4c:	88801926 	beq	r17,r2,800bab4 <__swbuf_r+0x104>
 800ba50:	8805883a 	mov	r2,r17
 800ba54:	dfc00417 	ldw	ra,16(sp)
 800ba58:	dcc00317 	ldw	r19,12(sp)
 800ba5c:	dc800217 	ldw	r18,8(sp)
 800ba60:	dc400117 	ldw	r17,4(sp)
 800ba64:	dc000017 	ldw	r16,0(sp)
 800ba68:	dec00504 	addi	sp,sp,20
 800ba6c:	f800283a 	ret
 800ba70:	81401917 	ldw	r5,100(r16)
 800ba74:	00b7ffc4 	movi	r2,-8193
 800ba78:	21080014 	ori	r4,r4,8192
 800ba7c:	2884703a 	and	r2,r5,r2
 800ba80:	80801915 	stw	r2,100(r16)
 800ba84:	80800017 	ldw	r2,0(r16)
 800ba88:	8100030d 	sth	r4,12(r16)
 800ba8c:	81000517 	ldw	r4,20(r16)
 800ba90:	10c7c83a 	sub	r3,r2,r3
 800ba94:	193fe016 	blt	r3,r4,800ba18 <__alt_data_end+0xfc00ba18>
 800ba98:	800b883a 	mov	r5,r16
 800ba9c:	9009883a 	mov	r4,r18
 800baa0:	800659c0 	call	800659c <_fflush_r>
 800baa4:	1000071e 	bne	r2,zero,800bac4 <__swbuf_r+0x114>
 800baa8:	80800017 	ldw	r2,0(r16)
 800baac:	00c00044 	movi	r3,1
 800bab0:	003fda06 	br	800ba1c <__alt_data_end+0xfc00ba1c>
 800bab4:	800b883a 	mov	r5,r16
 800bab8:	9009883a 	mov	r4,r18
 800babc:	800659c0 	call	800659c <_fflush_r>
 800bac0:	103fe326 	beq	r2,zero,800ba50 <__alt_data_end+0xfc00ba50>
 800bac4:	00bfffc4 	movi	r2,-1
 800bac8:	003fe206 	br	800ba54 <__alt_data_end+0xfc00ba54>
 800bacc:	800b883a 	mov	r5,r16
 800bad0:	9009883a 	mov	r4,r18
 800bad4:	800497c0 	call	800497c <__swsetup_r>
 800bad8:	103ffa1e 	bne	r2,zero,800bac4 <__alt_data_end+0xfc00bac4>
 800badc:	8100030b 	ldhu	r4,12(r16)
 800bae0:	80c00417 	ldw	r3,16(r16)
 800bae4:	003fc506 	br	800b9fc <__alt_data_end+0xfc00b9fc>
 800bae8:	80069880 	call	8006988 <__sinit>
 800baec:	003fbc06 	br	800b9e0 <__alt_data_end+0xfc00b9e0>

0800baf0 <__swbuf>:
 800baf0:	00820074 	movhi	r2,2049
 800baf4:	10903604 	addi	r2,r2,16600
 800baf8:	280d883a 	mov	r6,r5
 800bafc:	200b883a 	mov	r5,r4
 800bb00:	11000017 	ldw	r4,0(r2)
 800bb04:	800b9b01 	jmpi	800b9b0 <__swbuf_r>

0800bb08 <_wcrtomb_r>:
 800bb08:	defff604 	addi	sp,sp,-40
 800bb0c:	00820074 	movhi	r2,2049
 800bb10:	dc800815 	stw	r18,32(sp)
 800bb14:	dc400715 	stw	r17,28(sp)
 800bb18:	dc000615 	stw	r16,24(sp)
 800bb1c:	10903a04 	addi	r2,r2,16616
 800bb20:	dfc00915 	stw	ra,36(sp)
 800bb24:	2021883a 	mov	r16,r4
 800bb28:	3823883a 	mov	r17,r7
 800bb2c:	14800017 	ldw	r18,0(r2)
 800bb30:	28001426 	beq	r5,zero,800bb84 <_wcrtomb_r+0x7c>
 800bb34:	d9400415 	stw	r5,16(sp)
 800bb38:	d9800515 	stw	r6,20(sp)
 800bb3c:	80074d80 	call	80074d8 <__locale_charset>
 800bb40:	d9800517 	ldw	r6,20(sp)
 800bb44:	d9400417 	ldw	r5,16(sp)
 800bb48:	100f883a 	mov	r7,r2
 800bb4c:	dc400015 	stw	r17,0(sp)
 800bb50:	8009883a 	mov	r4,r16
 800bb54:	903ee83a 	callr	r18
 800bb58:	00ffffc4 	movi	r3,-1
 800bb5c:	10c0031e 	bne	r2,r3,800bb6c <_wcrtomb_r+0x64>
 800bb60:	88000015 	stw	zero,0(r17)
 800bb64:	00c02284 	movi	r3,138
 800bb68:	80c00015 	stw	r3,0(r16)
 800bb6c:	dfc00917 	ldw	ra,36(sp)
 800bb70:	dc800817 	ldw	r18,32(sp)
 800bb74:	dc400717 	ldw	r17,28(sp)
 800bb78:	dc000617 	ldw	r16,24(sp)
 800bb7c:	dec00a04 	addi	sp,sp,40
 800bb80:	f800283a 	ret
 800bb84:	80074d80 	call	80074d8 <__locale_charset>
 800bb88:	100f883a 	mov	r7,r2
 800bb8c:	dc400015 	stw	r17,0(sp)
 800bb90:	000d883a 	mov	r6,zero
 800bb94:	d9400104 	addi	r5,sp,4
 800bb98:	8009883a 	mov	r4,r16
 800bb9c:	903ee83a 	callr	r18
 800bba0:	003fed06 	br	800bb58 <__alt_data_end+0xfc00bb58>

0800bba4 <wcrtomb>:
 800bba4:	defff604 	addi	sp,sp,-40
 800bba8:	00820074 	movhi	r2,2049
 800bbac:	dc800615 	stw	r18,24(sp)
 800bbb0:	dc400515 	stw	r17,20(sp)
 800bbb4:	10903604 	addi	r2,r2,16600
 800bbb8:	dfc00915 	stw	ra,36(sp)
 800bbbc:	dd000815 	stw	r20,32(sp)
 800bbc0:	dcc00715 	stw	r19,28(sp)
 800bbc4:	dc000415 	stw	r16,16(sp)
 800bbc8:	3025883a 	mov	r18,r6
 800bbcc:	14400017 	ldw	r17,0(r2)
 800bbd0:	20001926 	beq	r4,zero,800bc38 <wcrtomb+0x94>
 800bbd4:	00820074 	movhi	r2,2049
 800bbd8:	10903a04 	addi	r2,r2,16616
 800bbdc:	15000017 	ldw	r20,0(r2)
 800bbe0:	2021883a 	mov	r16,r4
 800bbe4:	2827883a 	mov	r19,r5
 800bbe8:	80074d80 	call	80074d8 <__locale_charset>
 800bbec:	100f883a 	mov	r7,r2
 800bbf0:	dc800015 	stw	r18,0(sp)
 800bbf4:	980d883a 	mov	r6,r19
 800bbf8:	800b883a 	mov	r5,r16
 800bbfc:	8809883a 	mov	r4,r17
 800bc00:	a03ee83a 	callr	r20
 800bc04:	00ffffc4 	movi	r3,-1
 800bc08:	10c0031e 	bne	r2,r3,800bc18 <wcrtomb+0x74>
 800bc0c:	90000015 	stw	zero,0(r18)
 800bc10:	00c02284 	movi	r3,138
 800bc14:	88c00015 	stw	r3,0(r17)
 800bc18:	dfc00917 	ldw	ra,36(sp)
 800bc1c:	dd000817 	ldw	r20,32(sp)
 800bc20:	dcc00717 	ldw	r19,28(sp)
 800bc24:	dc800617 	ldw	r18,24(sp)
 800bc28:	dc400517 	ldw	r17,20(sp)
 800bc2c:	dc000417 	ldw	r16,16(sp)
 800bc30:	dec00a04 	addi	sp,sp,40
 800bc34:	f800283a 	ret
 800bc38:	00820074 	movhi	r2,2049
 800bc3c:	10903a04 	addi	r2,r2,16616
 800bc40:	14000017 	ldw	r16,0(r2)
 800bc44:	80074d80 	call	80074d8 <__locale_charset>
 800bc48:	100f883a 	mov	r7,r2
 800bc4c:	dc800015 	stw	r18,0(sp)
 800bc50:	000d883a 	mov	r6,zero
 800bc54:	d9400104 	addi	r5,sp,4
 800bc58:	8809883a 	mov	r4,r17
 800bc5c:	803ee83a 	callr	r16
 800bc60:	003fe806 	br	800bc04 <__alt_data_end+0xfc00bc04>

0800bc64 <__ascii_wctomb>:
 800bc64:	28000526 	beq	r5,zero,800bc7c <__ascii_wctomb+0x18>
 800bc68:	00803fc4 	movi	r2,255
 800bc6c:	11800536 	bltu	r2,r6,800bc84 <__ascii_wctomb+0x20>
 800bc70:	29800005 	stb	r6,0(r5)
 800bc74:	00800044 	movi	r2,1
 800bc78:	f800283a 	ret
 800bc7c:	0005883a 	mov	r2,zero
 800bc80:	f800283a 	ret
 800bc84:	00802284 	movi	r2,138
 800bc88:	20800015 	stw	r2,0(r4)
 800bc8c:	00bfffc4 	movi	r2,-1
 800bc90:	f800283a 	ret

0800bc94 <_wctomb_r>:
 800bc94:	00820074 	movhi	r2,2049
 800bc98:	defff904 	addi	sp,sp,-28
 800bc9c:	10903a04 	addi	r2,r2,16616
 800bca0:	dfc00615 	stw	ra,24(sp)
 800bca4:	dc400515 	stw	r17,20(sp)
 800bca8:	dc000415 	stw	r16,16(sp)
 800bcac:	3823883a 	mov	r17,r7
 800bcb0:	14000017 	ldw	r16,0(r2)
 800bcb4:	d9000115 	stw	r4,4(sp)
 800bcb8:	d9400215 	stw	r5,8(sp)
 800bcbc:	d9800315 	stw	r6,12(sp)
 800bcc0:	80074d80 	call	80074d8 <__locale_charset>
 800bcc4:	d9800317 	ldw	r6,12(sp)
 800bcc8:	d9400217 	ldw	r5,8(sp)
 800bccc:	d9000117 	ldw	r4,4(sp)
 800bcd0:	100f883a 	mov	r7,r2
 800bcd4:	dc400015 	stw	r17,0(sp)
 800bcd8:	803ee83a 	callr	r16
 800bcdc:	dfc00617 	ldw	ra,24(sp)
 800bce0:	dc400517 	ldw	r17,20(sp)
 800bce4:	dc000417 	ldw	r16,16(sp)
 800bce8:	dec00704 	addi	sp,sp,28
 800bcec:	f800283a 	ret

0800bcf0 <__udivdi3>:
 800bcf0:	defff404 	addi	sp,sp,-48
 800bcf4:	dcc00515 	stw	r19,20(sp)
 800bcf8:	dc000215 	stw	r16,8(sp)
 800bcfc:	dfc00b15 	stw	ra,44(sp)
 800bd00:	df000a15 	stw	fp,40(sp)
 800bd04:	ddc00915 	stw	r23,36(sp)
 800bd08:	dd800815 	stw	r22,32(sp)
 800bd0c:	dd400715 	stw	r21,28(sp)
 800bd10:	dd000615 	stw	r20,24(sp)
 800bd14:	dc800415 	stw	r18,16(sp)
 800bd18:	dc400315 	stw	r17,12(sp)
 800bd1c:	2027883a 	mov	r19,r4
 800bd20:	2821883a 	mov	r16,r5
 800bd24:	3800461e 	bne	r7,zero,800be40 <__udivdi3+0x150>
 800bd28:	3023883a 	mov	r17,r6
 800bd2c:	2025883a 	mov	r18,r4
 800bd30:	2980572e 	bgeu	r5,r6,800be90 <__udivdi3+0x1a0>
 800bd34:	00bfffd4 	movui	r2,65535
 800bd38:	282d883a 	mov	r22,r5
 800bd3c:	1180b236 	bltu	r2,r6,800c008 <__udivdi3+0x318>
 800bd40:	00803fc4 	movi	r2,255
 800bd44:	1185803a 	cmpltu	r2,r2,r6
 800bd48:	100490fa 	slli	r2,r2,3
 800bd4c:	3086d83a 	srl	r3,r6,r2
 800bd50:	01020074 	movhi	r4,2049
 800bd54:	21093d04 	addi	r4,r4,9460
 800bd58:	20c7883a 	add	r3,r4,r3
 800bd5c:	18c00003 	ldbu	r3,0(r3)
 800bd60:	1885883a 	add	r2,r3,r2
 800bd64:	00c00804 	movi	r3,32
 800bd68:	1887c83a 	sub	r3,r3,r2
 800bd6c:	18000526 	beq	r3,zero,800bd84 <__udivdi3+0x94>
 800bd70:	80e0983a 	sll	r16,r16,r3
 800bd74:	9884d83a 	srl	r2,r19,r2
 800bd78:	30e2983a 	sll	r17,r6,r3
 800bd7c:	98e4983a 	sll	r18,r19,r3
 800bd80:	142cb03a 	or	r22,r2,r16
 800bd84:	882ad43a 	srli	r21,r17,16
 800bd88:	b009883a 	mov	r4,r22
 800bd8c:	8d3fffcc 	andi	r20,r17,65535
 800bd90:	a80b883a 	mov	r5,r21
 800bd94:	800ca0c0 	call	800ca0c <__umodsi3>
 800bd98:	b009883a 	mov	r4,r22
 800bd9c:	a80b883a 	mov	r5,r21
 800bda0:	1027883a 	mov	r19,r2
 800bda4:	800c9a80 	call	800c9a8 <__udivsi3>
 800bda8:	100b883a 	mov	r5,r2
 800bdac:	a009883a 	mov	r4,r20
 800bdb0:	102d883a 	mov	r22,r2
 800bdb4:	800ca640 	call	800ca64 <__mulsi3>
 800bdb8:	9826943a 	slli	r19,r19,16
 800bdbc:	9006d43a 	srli	r3,r18,16
 800bdc0:	1cc6b03a 	or	r3,r3,r19
 800bdc4:	1880052e 	bgeu	r3,r2,800bddc <__udivdi3+0xec>
 800bdc8:	1c47883a 	add	r3,r3,r17
 800bdcc:	b13fffc4 	addi	r4,r22,-1
 800bdd0:	1c400136 	bltu	r3,r17,800bdd8 <__udivdi3+0xe8>
 800bdd4:	18814236 	bltu	r3,r2,800c2e0 <__udivdi3+0x5f0>
 800bdd8:	202d883a 	mov	r22,r4
 800bddc:	18a1c83a 	sub	r16,r3,r2
 800bde0:	8009883a 	mov	r4,r16
 800bde4:	a80b883a 	mov	r5,r21
 800bde8:	800ca0c0 	call	800ca0c <__umodsi3>
 800bdec:	1027883a 	mov	r19,r2
 800bdf0:	8009883a 	mov	r4,r16
 800bdf4:	a80b883a 	mov	r5,r21
 800bdf8:	9826943a 	slli	r19,r19,16
 800bdfc:	800c9a80 	call	800c9a8 <__udivsi3>
 800be00:	100b883a 	mov	r5,r2
 800be04:	a009883a 	mov	r4,r20
 800be08:	94bfffcc 	andi	r18,r18,65535
 800be0c:	1021883a 	mov	r16,r2
 800be10:	94e4b03a 	or	r18,r18,r19
 800be14:	800ca640 	call	800ca64 <__mulsi3>
 800be18:	9080052e 	bgeu	r18,r2,800be30 <__udivdi3+0x140>
 800be1c:	8ca5883a 	add	r18,r17,r18
 800be20:	80ffffc4 	addi	r3,r16,-1
 800be24:	94410c36 	bltu	r18,r17,800c258 <__udivdi3+0x568>
 800be28:	90810b2e 	bgeu	r18,r2,800c258 <__udivdi3+0x568>
 800be2c:	843fff84 	addi	r16,r16,-2
 800be30:	b004943a 	slli	r2,r22,16
 800be34:	0007883a 	mov	r3,zero
 800be38:	1404b03a 	or	r2,r2,r16
 800be3c:	00005e06 	br	800bfb8 <__udivdi3+0x2c8>
 800be40:	29c05b36 	bltu	r5,r7,800bfb0 <__udivdi3+0x2c0>
 800be44:	00bfffd4 	movui	r2,65535
 800be48:	11c0672e 	bgeu	r2,r7,800bfe8 <__udivdi3+0x2f8>
 800be4c:	00804034 	movhi	r2,256
 800be50:	10bfffc4 	addi	r2,r2,-1
 800be54:	11c10a36 	bltu	r2,r7,800c280 <__udivdi3+0x590>
 800be58:	00800404 	movi	r2,16
 800be5c:	3886d83a 	srl	r3,r7,r2
 800be60:	01020074 	movhi	r4,2049
 800be64:	21093d04 	addi	r4,r4,9460
 800be68:	20c7883a 	add	r3,r4,r3
 800be6c:	18c00003 	ldbu	r3,0(r3)
 800be70:	05c00804 	movi	r23,32
 800be74:	1885883a 	add	r2,r3,r2
 800be78:	b8afc83a 	sub	r23,r23,r2
 800be7c:	b800671e 	bne	r23,zero,800c01c <__udivdi3+0x32c>
 800be80:	3c010536 	bltu	r7,r16,800c298 <__udivdi3+0x5a8>
 800be84:	9985403a 	cmpgeu	r2,r19,r6
 800be88:	0007883a 	mov	r3,zero
 800be8c:	00004a06 	br	800bfb8 <__udivdi3+0x2c8>
 800be90:	3000041e 	bne	r6,zero,800bea4 <__udivdi3+0x1b4>
 800be94:	000b883a 	mov	r5,zero
 800be98:	01000044 	movi	r4,1
 800be9c:	800c9a80 	call	800c9a8 <__udivsi3>
 800bea0:	1023883a 	mov	r17,r2
 800bea4:	00bfffd4 	movui	r2,65535
 800bea8:	1440532e 	bgeu	r2,r17,800bff8 <__udivdi3+0x308>
 800beac:	00804034 	movhi	r2,256
 800beb0:	10bfffc4 	addi	r2,r2,-1
 800beb4:	1440f436 	bltu	r2,r17,800c288 <__udivdi3+0x598>
 800beb8:	00800404 	movi	r2,16
 800bebc:	8886d83a 	srl	r3,r17,r2
 800bec0:	01020074 	movhi	r4,2049
 800bec4:	21093d04 	addi	r4,r4,9460
 800bec8:	20c7883a 	add	r3,r4,r3
 800becc:	18c00003 	ldbu	r3,0(r3)
 800bed0:	1885883a 	add	r2,r3,r2
 800bed4:	00c00804 	movi	r3,32
 800bed8:	1887c83a 	sub	r3,r3,r2
 800bedc:	1800a51e 	bne	r3,zero,800c174 <__udivdi3+0x484>
 800bee0:	882ad43a 	srli	r21,r17,16
 800bee4:	8461c83a 	sub	r16,r16,r17
 800bee8:	8d3fffcc 	andi	r20,r17,65535
 800beec:	00c00044 	movi	r3,1
 800bef0:	a80b883a 	mov	r5,r21
 800bef4:	8009883a 	mov	r4,r16
 800bef8:	d8c00115 	stw	r3,4(sp)
 800befc:	800ca0c0 	call	800ca0c <__umodsi3>
 800bf00:	a80b883a 	mov	r5,r21
 800bf04:	8009883a 	mov	r4,r16
 800bf08:	1027883a 	mov	r19,r2
 800bf0c:	800c9a80 	call	800c9a8 <__udivsi3>
 800bf10:	a00b883a 	mov	r5,r20
 800bf14:	1009883a 	mov	r4,r2
 800bf18:	102d883a 	mov	r22,r2
 800bf1c:	800ca640 	call	800ca64 <__mulsi3>
 800bf20:	9826943a 	slli	r19,r19,16
 800bf24:	900ed43a 	srli	r7,r18,16
 800bf28:	d8c00117 	ldw	r3,4(sp)
 800bf2c:	3cceb03a 	or	r7,r7,r19
 800bf30:	3880052e 	bgeu	r7,r2,800bf48 <__udivdi3+0x258>
 800bf34:	3c4f883a 	add	r7,r7,r17
 800bf38:	b13fffc4 	addi	r4,r22,-1
 800bf3c:	3c400136 	bltu	r7,r17,800bf44 <__udivdi3+0x254>
 800bf40:	3880e436 	bltu	r7,r2,800c2d4 <__udivdi3+0x5e4>
 800bf44:	202d883a 	mov	r22,r4
 800bf48:	38a1c83a 	sub	r16,r7,r2
 800bf4c:	8009883a 	mov	r4,r16
 800bf50:	a80b883a 	mov	r5,r21
 800bf54:	d8c00115 	stw	r3,4(sp)
 800bf58:	800ca0c0 	call	800ca0c <__umodsi3>
 800bf5c:	1027883a 	mov	r19,r2
 800bf60:	8009883a 	mov	r4,r16
 800bf64:	a80b883a 	mov	r5,r21
 800bf68:	9826943a 	slli	r19,r19,16
 800bf6c:	800c9a80 	call	800c9a8 <__udivsi3>
 800bf70:	a00b883a 	mov	r5,r20
 800bf74:	1009883a 	mov	r4,r2
 800bf78:	94bfffcc 	andi	r18,r18,65535
 800bf7c:	1021883a 	mov	r16,r2
 800bf80:	94e4b03a 	or	r18,r18,r19
 800bf84:	800ca640 	call	800ca64 <__mulsi3>
 800bf88:	d8c00117 	ldw	r3,4(sp)
 800bf8c:	9080052e 	bgeu	r18,r2,800bfa4 <__udivdi3+0x2b4>
 800bf90:	8ca5883a 	add	r18,r17,r18
 800bf94:	813fffc4 	addi	r4,r16,-1
 800bf98:	9440ad36 	bltu	r18,r17,800c250 <__udivdi3+0x560>
 800bf9c:	9080ac2e 	bgeu	r18,r2,800c250 <__udivdi3+0x560>
 800bfa0:	843fff84 	addi	r16,r16,-2
 800bfa4:	b004943a 	slli	r2,r22,16
 800bfa8:	1404b03a 	or	r2,r2,r16
 800bfac:	00000206 	br	800bfb8 <__udivdi3+0x2c8>
 800bfb0:	0007883a 	mov	r3,zero
 800bfb4:	0005883a 	mov	r2,zero
 800bfb8:	dfc00b17 	ldw	ra,44(sp)
 800bfbc:	df000a17 	ldw	fp,40(sp)
 800bfc0:	ddc00917 	ldw	r23,36(sp)
 800bfc4:	dd800817 	ldw	r22,32(sp)
 800bfc8:	dd400717 	ldw	r21,28(sp)
 800bfcc:	dd000617 	ldw	r20,24(sp)
 800bfd0:	dcc00517 	ldw	r19,20(sp)
 800bfd4:	dc800417 	ldw	r18,16(sp)
 800bfd8:	dc400317 	ldw	r17,12(sp)
 800bfdc:	dc000217 	ldw	r16,8(sp)
 800bfe0:	dec00c04 	addi	sp,sp,48
 800bfe4:	f800283a 	ret
 800bfe8:	00803fc4 	movi	r2,255
 800bfec:	11c5803a 	cmpltu	r2,r2,r7
 800bff0:	100490fa 	slli	r2,r2,3
 800bff4:	003f9906 	br	800be5c <__alt_data_end+0xfc00be5c>
 800bff8:	00803fc4 	movi	r2,255
 800bffc:	1445803a 	cmpltu	r2,r2,r17
 800c000:	100490fa 	slli	r2,r2,3
 800c004:	003fad06 	br	800bebc <__alt_data_end+0xfc00bebc>
 800c008:	00804034 	movhi	r2,256
 800c00c:	10bfffc4 	addi	r2,r2,-1
 800c010:	11809f36 	bltu	r2,r6,800c290 <__udivdi3+0x5a0>
 800c014:	00800404 	movi	r2,16
 800c018:	003f4c06 	br	800bd4c <__alt_data_end+0xfc00bd4c>
 800c01c:	3dce983a 	sll	r7,r7,r23
 800c020:	30b8d83a 	srl	fp,r6,r2
 800c024:	80a2d83a 	srl	r17,r16,r2
 800c028:	35cc983a 	sll	r6,r6,r23
 800c02c:	3f38b03a 	or	fp,r7,fp
 800c030:	e024d43a 	srli	r18,fp,16
 800c034:	9884d83a 	srl	r2,r19,r2
 800c038:	85e0983a 	sll	r16,r16,r23
 800c03c:	8809883a 	mov	r4,r17
 800c040:	900b883a 	mov	r5,r18
 800c044:	d9800015 	stw	r6,0(sp)
 800c048:	1420b03a 	or	r16,r2,r16
 800c04c:	800ca0c0 	call	800ca0c <__umodsi3>
 800c050:	900b883a 	mov	r5,r18
 800c054:	8809883a 	mov	r4,r17
 800c058:	1029883a 	mov	r20,r2
 800c05c:	e5bfffcc 	andi	r22,fp,65535
 800c060:	800c9a80 	call	800c9a8 <__udivsi3>
 800c064:	100b883a 	mov	r5,r2
 800c068:	b009883a 	mov	r4,r22
 800c06c:	102b883a 	mov	r21,r2
 800c070:	800ca640 	call	800ca64 <__mulsi3>
 800c074:	a028943a 	slli	r20,r20,16
 800c078:	8006d43a 	srli	r3,r16,16
 800c07c:	1d06b03a 	or	r3,r3,r20
 800c080:	1880042e 	bgeu	r3,r2,800c094 <__udivdi3+0x3a4>
 800c084:	1f07883a 	add	r3,r3,fp
 800c088:	a93fffc4 	addi	r4,r21,-1
 800c08c:	1f00892e 	bgeu	r3,fp,800c2b4 <__udivdi3+0x5c4>
 800c090:	202b883a 	mov	r21,r4
 800c094:	18a3c83a 	sub	r17,r3,r2
 800c098:	8809883a 	mov	r4,r17
 800c09c:	900b883a 	mov	r5,r18
 800c0a0:	800ca0c0 	call	800ca0c <__umodsi3>
 800c0a4:	1029883a 	mov	r20,r2
 800c0a8:	8809883a 	mov	r4,r17
 800c0ac:	900b883a 	mov	r5,r18
 800c0b0:	a028943a 	slli	r20,r20,16
 800c0b4:	800c9a80 	call	800c9a8 <__udivsi3>
 800c0b8:	100b883a 	mov	r5,r2
 800c0bc:	b009883a 	mov	r4,r22
 800c0c0:	843fffcc 	andi	r16,r16,65535
 800c0c4:	1023883a 	mov	r17,r2
 800c0c8:	8520b03a 	or	r16,r16,r20
 800c0cc:	800ca640 	call	800ca64 <__mulsi3>
 800c0d0:	8080042e 	bgeu	r16,r2,800c0e4 <__udivdi3+0x3f4>
 800c0d4:	8721883a 	add	r16,r16,fp
 800c0d8:	88ffffc4 	addi	r3,r17,-1
 800c0dc:	8700712e 	bgeu	r16,fp,800c2a4 <__udivdi3+0x5b4>
 800c0e0:	1823883a 	mov	r17,r3
 800c0e4:	a80e943a 	slli	r7,r21,16
 800c0e8:	d8c00017 	ldw	r3,0(sp)
 800c0ec:	80a1c83a 	sub	r16,r16,r2
 800c0f0:	3c64b03a 	or	r18,r7,r17
 800c0f4:	1d3fffcc 	andi	r20,r3,65535
 800c0f8:	9022d43a 	srli	r17,r18,16
 800c0fc:	95bfffcc 	andi	r22,r18,65535
 800c100:	a00b883a 	mov	r5,r20
 800c104:	b009883a 	mov	r4,r22
 800c108:	182ad43a 	srli	r21,r3,16
 800c10c:	800ca640 	call	800ca64 <__mulsi3>
 800c110:	a00b883a 	mov	r5,r20
 800c114:	8809883a 	mov	r4,r17
 800c118:	1039883a 	mov	fp,r2
 800c11c:	800ca640 	call	800ca64 <__mulsi3>
 800c120:	8809883a 	mov	r4,r17
 800c124:	a80b883a 	mov	r5,r21
 800c128:	1029883a 	mov	r20,r2
 800c12c:	800ca640 	call	800ca64 <__mulsi3>
 800c130:	a80b883a 	mov	r5,r21
 800c134:	b009883a 	mov	r4,r22
 800c138:	1023883a 	mov	r17,r2
 800c13c:	800ca640 	call	800ca64 <__mulsi3>
 800c140:	e006d43a 	srli	r3,fp,16
 800c144:	1505883a 	add	r2,r2,r20
 800c148:	1887883a 	add	r3,r3,r2
 800c14c:	1d00022e 	bgeu	r3,r20,800c158 <__udivdi3+0x468>
 800c150:	00800074 	movhi	r2,1
 800c154:	88a3883a 	add	r17,r17,r2
 800c158:	1804d43a 	srli	r2,r3,16
 800c15c:	1463883a 	add	r17,r2,r17
 800c160:	84404436 	bltu	r16,r17,800c274 <__udivdi3+0x584>
 800c164:	84403e26 	beq	r16,r17,800c260 <__udivdi3+0x570>
 800c168:	9005883a 	mov	r2,r18
 800c16c:	0007883a 	mov	r3,zero
 800c170:	003f9106 	br	800bfb8 <__alt_data_end+0xfc00bfb8>
 800c174:	88e2983a 	sll	r17,r17,r3
 800c178:	80aed83a 	srl	r23,r16,r2
 800c17c:	80e0983a 	sll	r16,r16,r3
 800c180:	882ad43a 	srli	r21,r17,16
 800c184:	9884d83a 	srl	r2,r19,r2
 800c188:	b809883a 	mov	r4,r23
 800c18c:	a80b883a 	mov	r5,r21
 800c190:	98e4983a 	sll	r18,r19,r3
 800c194:	142cb03a 	or	r22,r2,r16
 800c198:	800ca0c0 	call	800ca0c <__umodsi3>
 800c19c:	b809883a 	mov	r4,r23
 800c1a0:	a80b883a 	mov	r5,r21
 800c1a4:	1027883a 	mov	r19,r2
 800c1a8:	8d3fffcc 	andi	r20,r17,65535
 800c1ac:	800c9a80 	call	800c9a8 <__udivsi3>
 800c1b0:	a009883a 	mov	r4,r20
 800c1b4:	100b883a 	mov	r5,r2
 800c1b8:	102f883a 	mov	r23,r2
 800c1bc:	800ca640 	call	800ca64 <__mulsi3>
 800c1c0:	9826943a 	slli	r19,r19,16
 800c1c4:	b008d43a 	srli	r4,r22,16
 800c1c8:	24c8b03a 	or	r4,r4,r19
 800c1cc:	2080062e 	bgeu	r4,r2,800c1e8 <__udivdi3+0x4f8>
 800c1d0:	2449883a 	add	r4,r4,r17
 800c1d4:	b8ffffc4 	addi	r3,r23,-1
 800c1d8:	24403c36 	bltu	r4,r17,800c2cc <__udivdi3+0x5dc>
 800c1dc:	20803b2e 	bgeu	r4,r2,800c2cc <__udivdi3+0x5dc>
 800c1e0:	bdffff84 	addi	r23,r23,-2
 800c1e4:	2449883a 	add	r4,r4,r17
 800c1e8:	20a1c83a 	sub	r16,r4,r2
 800c1ec:	a80b883a 	mov	r5,r21
 800c1f0:	8009883a 	mov	r4,r16
 800c1f4:	800ca0c0 	call	800ca0c <__umodsi3>
 800c1f8:	a80b883a 	mov	r5,r21
 800c1fc:	8009883a 	mov	r4,r16
 800c200:	1027883a 	mov	r19,r2
 800c204:	800c9a80 	call	800c9a8 <__udivsi3>
 800c208:	a009883a 	mov	r4,r20
 800c20c:	100b883a 	mov	r5,r2
 800c210:	9826943a 	slli	r19,r19,16
 800c214:	1039883a 	mov	fp,r2
 800c218:	800ca640 	call	800ca64 <__mulsi3>
 800c21c:	b13fffcc 	andi	r4,r22,65535
 800c220:	24c8b03a 	or	r4,r4,r19
 800c224:	2080062e 	bgeu	r4,r2,800c240 <__udivdi3+0x550>
 800c228:	2449883a 	add	r4,r4,r17
 800c22c:	e0ffffc4 	addi	r3,fp,-1
 800c230:	24402436 	bltu	r4,r17,800c2c4 <__udivdi3+0x5d4>
 800c234:	2080232e 	bgeu	r4,r2,800c2c4 <__udivdi3+0x5d4>
 800c238:	e73fff84 	addi	fp,fp,-2
 800c23c:	2449883a 	add	r4,r4,r17
 800c240:	b82e943a 	slli	r23,r23,16
 800c244:	20a1c83a 	sub	r16,r4,r2
 800c248:	bf06b03a 	or	r3,r23,fp
 800c24c:	003f2806 	br	800bef0 <__alt_data_end+0xfc00bef0>
 800c250:	2021883a 	mov	r16,r4
 800c254:	003f5306 	br	800bfa4 <__alt_data_end+0xfc00bfa4>
 800c258:	1821883a 	mov	r16,r3
 800c25c:	003ef406 	br	800be30 <__alt_data_end+0xfc00be30>
 800c260:	1806943a 	slli	r3,r3,16
 800c264:	9de6983a 	sll	r19,r19,r23
 800c268:	e73fffcc 	andi	fp,fp,65535
 800c26c:	1f07883a 	add	r3,r3,fp
 800c270:	98ffbd2e 	bgeu	r19,r3,800c168 <__alt_data_end+0xfc00c168>
 800c274:	90bfffc4 	addi	r2,r18,-1
 800c278:	0007883a 	mov	r3,zero
 800c27c:	003f4e06 	br	800bfb8 <__alt_data_end+0xfc00bfb8>
 800c280:	00800604 	movi	r2,24
 800c284:	003ef506 	br	800be5c <__alt_data_end+0xfc00be5c>
 800c288:	00800604 	movi	r2,24
 800c28c:	003f0b06 	br	800bebc <__alt_data_end+0xfc00bebc>
 800c290:	00800604 	movi	r2,24
 800c294:	003ead06 	br	800bd4c <__alt_data_end+0xfc00bd4c>
 800c298:	0007883a 	mov	r3,zero
 800c29c:	00800044 	movi	r2,1
 800c2a0:	003f4506 	br	800bfb8 <__alt_data_end+0xfc00bfb8>
 800c2a4:	80bf8e2e 	bgeu	r16,r2,800c0e0 <__alt_data_end+0xfc00c0e0>
 800c2a8:	8c7fff84 	addi	r17,r17,-2
 800c2ac:	8721883a 	add	r16,r16,fp
 800c2b0:	003f8c06 	br	800c0e4 <__alt_data_end+0xfc00c0e4>
 800c2b4:	18bf762e 	bgeu	r3,r2,800c090 <__alt_data_end+0xfc00c090>
 800c2b8:	ad7fff84 	addi	r21,r21,-2
 800c2bc:	1f07883a 	add	r3,r3,fp
 800c2c0:	003f7406 	br	800c094 <__alt_data_end+0xfc00c094>
 800c2c4:	1839883a 	mov	fp,r3
 800c2c8:	003fdd06 	br	800c240 <__alt_data_end+0xfc00c240>
 800c2cc:	182f883a 	mov	r23,r3
 800c2d0:	003fc506 	br	800c1e8 <__alt_data_end+0xfc00c1e8>
 800c2d4:	b5bfff84 	addi	r22,r22,-2
 800c2d8:	3c4f883a 	add	r7,r7,r17
 800c2dc:	003f1a06 	br	800bf48 <__alt_data_end+0xfc00bf48>
 800c2e0:	b5bfff84 	addi	r22,r22,-2
 800c2e4:	1c47883a 	add	r3,r3,r17
 800c2e8:	003ebc06 	br	800bddc <__alt_data_end+0xfc00bddc>

0800c2ec <__umoddi3>:
 800c2ec:	defff304 	addi	sp,sp,-52
 800c2f0:	df000b15 	stw	fp,44(sp)
 800c2f4:	dc400415 	stw	r17,16(sp)
 800c2f8:	dc000315 	stw	r16,12(sp)
 800c2fc:	dfc00c15 	stw	ra,48(sp)
 800c300:	ddc00a15 	stw	r23,40(sp)
 800c304:	dd800915 	stw	r22,36(sp)
 800c308:	dd400815 	stw	r21,32(sp)
 800c30c:	dd000715 	stw	r20,28(sp)
 800c310:	dcc00615 	stw	r19,24(sp)
 800c314:	dc800515 	stw	r18,20(sp)
 800c318:	2021883a 	mov	r16,r4
 800c31c:	2823883a 	mov	r17,r5
 800c320:	2839883a 	mov	fp,r5
 800c324:	3800401e 	bne	r7,zero,800c428 <__umoddi3+0x13c>
 800c328:	3027883a 	mov	r19,r6
 800c32c:	2029883a 	mov	r20,r4
 800c330:	2980552e 	bgeu	r5,r6,800c488 <__umoddi3+0x19c>
 800c334:	00bfffd4 	movui	r2,65535
 800c338:	1180a236 	bltu	r2,r6,800c5c4 <__umoddi3+0x2d8>
 800c33c:	01003fc4 	movi	r4,255
 800c340:	2189803a 	cmpltu	r4,r4,r6
 800c344:	200890fa 	slli	r4,r4,3
 800c348:	3104d83a 	srl	r2,r6,r4
 800c34c:	00c20074 	movhi	r3,2049
 800c350:	18c93d04 	addi	r3,r3,9460
 800c354:	1885883a 	add	r2,r3,r2
 800c358:	10c00003 	ldbu	r3,0(r2)
 800c35c:	00800804 	movi	r2,32
 800c360:	1909883a 	add	r4,r3,r4
 800c364:	1125c83a 	sub	r18,r2,r4
 800c368:	90000526 	beq	r18,zero,800c380 <__umoddi3+0x94>
 800c36c:	8ca2983a 	sll	r17,r17,r18
 800c370:	8108d83a 	srl	r4,r16,r4
 800c374:	34a6983a 	sll	r19,r6,r18
 800c378:	84a8983a 	sll	r20,r16,r18
 800c37c:	2478b03a 	or	fp,r4,r17
 800c380:	982cd43a 	srli	r22,r19,16
 800c384:	e009883a 	mov	r4,fp
 800c388:	9dffffcc 	andi	r23,r19,65535
 800c38c:	b00b883a 	mov	r5,r22
 800c390:	800ca0c0 	call	800ca0c <__umodsi3>
 800c394:	b00b883a 	mov	r5,r22
 800c398:	e009883a 	mov	r4,fp
 800c39c:	102b883a 	mov	r21,r2
 800c3a0:	800c9a80 	call	800c9a8 <__udivsi3>
 800c3a4:	100b883a 	mov	r5,r2
 800c3a8:	b809883a 	mov	r4,r23
 800c3ac:	800ca640 	call	800ca64 <__mulsi3>
 800c3b0:	a82a943a 	slli	r21,r21,16
 800c3b4:	a006d43a 	srli	r3,r20,16
 800c3b8:	1d46b03a 	or	r3,r3,r21
 800c3bc:	1880032e 	bgeu	r3,r2,800c3cc <__umoddi3+0xe0>
 800c3c0:	1cc7883a 	add	r3,r3,r19
 800c3c4:	1cc00136 	bltu	r3,r19,800c3cc <__umoddi3+0xe0>
 800c3c8:	18813136 	bltu	r3,r2,800c890 <__umoddi3+0x5a4>
 800c3cc:	18a1c83a 	sub	r16,r3,r2
 800c3d0:	b00b883a 	mov	r5,r22
 800c3d4:	8009883a 	mov	r4,r16
 800c3d8:	800ca0c0 	call	800ca0c <__umodsi3>
 800c3dc:	b00b883a 	mov	r5,r22
 800c3e0:	8009883a 	mov	r4,r16
 800c3e4:	1023883a 	mov	r17,r2
 800c3e8:	800c9a80 	call	800c9a8 <__udivsi3>
 800c3ec:	100b883a 	mov	r5,r2
 800c3f0:	b809883a 	mov	r4,r23
 800c3f4:	8822943a 	slli	r17,r17,16
 800c3f8:	800ca640 	call	800ca64 <__mulsi3>
 800c3fc:	a0ffffcc 	andi	r3,r20,65535
 800c400:	1c46b03a 	or	r3,r3,r17
 800c404:	1880042e 	bgeu	r3,r2,800c418 <__umoddi3+0x12c>
 800c408:	1cc7883a 	add	r3,r3,r19
 800c40c:	1cc00236 	bltu	r3,r19,800c418 <__umoddi3+0x12c>
 800c410:	1880012e 	bgeu	r3,r2,800c418 <__umoddi3+0x12c>
 800c414:	1cc7883a 	add	r3,r3,r19
 800c418:	1885c83a 	sub	r2,r3,r2
 800c41c:	1484d83a 	srl	r2,r2,r18
 800c420:	0007883a 	mov	r3,zero
 800c424:	00005306 	br	800c574 <__umoddi3+0x288>
 800c428:	29c05036 	bltu	r5,r7,800c56c <__umoddi3+0x280>
 800c42c:	00bfffd4 	movui	r2,65535
 800c430:	11c05c2e 	bgeu	r2,r7,800c5a4 <__umoddi3+0x2b8>
 800c434:	00804034 	movhi	r2,256
 800c438:	10bfffc4 	addi	r2,r2,-1
 800c43c:	11c10636 	bltu	r2,r7,800c858 <__umoddi3+0x56c>
 800c440:	01000404 	movi	r4,16
 800c444:	3904d83a 	srl	r2,r7,r4
 800c448:	00c20074 	movhi	r3,2049
 800c44c:	18c93d04 	addi	r3,r3,9460
 800c450:	1885883a 	add	r2,r3,r2
 800c454:	14c00003 	ldbu	r19,0(r2)
 800c458:	00c00804 	movi	r3,32
 800c45c:	9927883a 	add	r19,r19,r4
 800c460:	1ce9c83a 	sub	r20,r3,r19
 800c464:	a0005c1e 	bne	r20,zero,800c5d8 <__umoddi3+0x2ec>
 800c468:	3c400136 	bltu	r7,r17,800c470 <__umoddi3+0x184>
 800c46c:	81810a36 	bltu	r16,r6,800c898 <__umoddi3+0x5ac>
 800c470:	8185c83a 	sub	r2,r16,r6
 800c474:	89e3c83a 	sub	r17,r17,r7
 800c478:	8089803a 	cmpltu	r4,r16,r2
 800c47c:	8939c83a 	sub	fp,r17,r4
 800c480:	e007883a 	mov	r3,fp
 800c484:	00003b06 	br	800c574 <__umoddi3+0x288>
 800c488:	3000041e 	bne	r6,zero,800c49c <__umoddi3+0x1b0>
 800c48c:	000b883a 	mov	r5,zero
 800c490:	01000044 	movi	r4,1
 800c494:	800c9a80 	call	800c9a8 <__udivsi3>
 800c498:	1027883a 	mov	r19,r2
 800c49c:	00bfffd4 	movui	r2,65535
 800c4a0:	14c0442e 	bgeu	r2,r19,800c5b4 <__umoddi3+0x2c8>
 800c4a4:	00804034 	movhi	r2,256
 800c4a8:	10bfffc4 	addi	r2,r2,-1
 800c4ac:	14c0ec36 	bltu	r2,r19,800c860 <__umoddi3+0x574>
 800c4b0:	00800404 	movi	r2,16
 800c4b4:	9886d83a 	srl	r3,r19,r2
 800c4b8:	01020074 	movhi	r4,2049
 800c4bc:	21093d04 	addi	r4,r4,9460
 800c4c0:	20c7883a 	add	r3,r4,r3
 800c4c4:	18c00003 	ldbu	r3,0(r3)
 800c4c8:	1887883a 	add	r3,r3,r2
 800c4cc:	00800804 	movi	r2,32
 800c4d0:	10e5c83a 	sub	r18,r2,r3
 800c4d4:	9000ab1e 	bne	r18,zero,800c784 <__umoddi3+0x498>
 800c4d8:	982cd43a 	srli	r22,r19,16
 800c4dc:	8ce3c83a 	sub	r17,r17,r19
 800c4e0:	9dffffcc 	andi	r23,r19,65535
 800c4e4:	b00b883a 	mov	r5,r22
 800c4e8:	8809883a 	mov	r4,r17
 800c4ec:	800ca0c0 	call	800ca0c <__umodsi3>
 800c4f0:	b00b883a 	mov	r5,r22
 800c4f4:	8809883a 	mov	r4,r17
 800c4f8:	102b883a 	mov	r21,r2
 800c4fc:	800c9a80 	call	800c9a8 <__udivsi3>
 800c500:	b80b883a 	mov	r5,r23
 800c504:	1009883a 	mov	r4,r2
 800c508:	800ca640 	call	800ca64 <__mulsi3>
 800c50c:	a82a943a 	slli	r21,r21,16
 800c510:	a006d43a 	srli	r3,r20,16
 800c514:	1d46b03a 	or	r3,r3,r21
 800c518:	1880042e 	bgeu	r3,r2,800c52c <__umoddi3+0x240>
 800c51c:	1cc7883a 	add	r3,r3,r19
 800c520:	1cc00236 	bltu	r3,r19,800c52c <__umoddi3+0x240>
 800c524:	1880012e 	bgeu	r3,r2,800c52c <__umoddi3+0x240>
 800c528:	1cc7883a 	add	r3,r3,r19
 800c52c:	18a1c83a 	sub	r16,r3,r2
 800c530:	b00b883a 	mov	r5,r22
 800c534:	8009883a 	mov	r4,r16
 800c538:	800ca0c0 	call	800ca0c <__umodsi3>
 800c53c:	1023883a 	mov	r17,r2
 800c540:	b00b883a 	mov	r5,r22
 800c544:	8009883a 	mov	r4,r16
 800c548:	800c9a80 	call	800c9a8 <__udivsi3>
 800c54c:	8822943a 	slli	r17,r17,16
 800c550:	b80b883a 	mov	r5,r23
 800c554:	1009883a 	mov	r4,r2
 800c558:	800ca640 	call	800ca64 <__mulsi3>
 800c55c:	a53fffcc 	andi	r20,r20,65535
 800c560:	a446b03a 	or	r3,r20,r17
 800c564:	18bfac2e 	bgeu	r3,r2,800c418 <__alt_data_end+0xfc00c418>
 800c568:	003fa706 	br	800c408 <__alt_data_end+0xfc00c408>
 800c56c:	2005883a 	mov	r2,r4
 800c570:	2807883a 	mov	r3,r5
 800c574:	dfc00c17 	ldw	ra,48(sp)
 800c578:	df000b17 	ldw	fp,44(sp)
 800c57c:	ddc00a17 	ldw	r23,40(sp)
 800c580:	dd800917 	ldw	r22,36(sp)
 800c584:	dd400817 	ldw	r21,32(sp)
 800c588:	dd000717 	ldw	r20,28(sp)
 800c58c:	dcc00617 	ldw	r19,24(sp)
 800c590:	dc800517 	ldw	r18,20(sp)
 800c594:	dc400417 	ldw	r17,16(sp)
 800c598:	dc000317 	ldw	r16,12(sp)
 800c59c:	dec00d04 	addi	sp,sp,52
 800c5a0:	f800283a 	ret
 800c5a4:	04c03fc4 	movi	r19,255
 800c5a8:	99c9803a 	cmpltu	r4,r19,r7
 800c5ac:	200890fa 	slli	r4,r4,3
 800c5b0:	003fa406 	br	800c444 <__alt_data_end+0xfc00c444>
 800c5b4:	00803fc4 	movi	r2,255
 800c5b8:	14c5803a 	cmpltu	r2,r2,r19
 800c5bc:	100490fa 	slli	r2,r2,3
 800c5c0:	003fbc06 	br	800c4b4 <__alt_data_end+0xfc00c4b4>
 800c5c4:	00804034 	movhi	r2,256
 800c5c8:	10bfffc4 	addi	r2,r2,-1
 800c5cc:	1180a636 	bltu	r2,r6,800c868 <__umoddi3+0x57c>
 800c5d0:	01000404 	movi	r4,16
 800c5d4:	003f5c06 	br	800c348 <__alt_data_end+0xfc00c348>
 800c5d8:	3d0e983a 	sll	r7,r7,r20
 800c5dc:	34ead83a 	srl	r21,r6,r19
 800c5e0:	8cc6d83a 	srl	r3,r17,r19
 800c5e4:	8d10983a 	sll	r8,r17,r20
 800c5e8:	3d6ab03a 	or	r21,r7,r21
 800c5ec:	a82cd43a 	srli	r22,r21,16
 800c5f0:	84e2d83a 	srl	r17,r16,r19
 800c5f4:	1809883a 	mov	r4,r3
 800c5f8:	b00b883a 	mov	r5,r22
 800c5fc:	8a22b03a 	or	r17,r17,r8
 800c600:	3524983a 	sll	r18,r6,r20
 800c604:	dc400015 	stw	r17,0(sp)
 800c608:	d8c00115 	stw	r3,4(sp)
 800c60c:	800ca0c0 	call	800ca0c <__umodsi3>
 800c610:	d8c00117 	ldw	r3,4(sp)
 800c614:	b00b883a 	mov	r5,r22
 800c618:	1039883a 	mov	fp,r2
 800c61c:	1809883a 	mov	r4,r3
 800c620:	800c9a80 	call	800c9a8 <__udivsi3>
 800c624:	adffffcc 	andi	r23,r21,65535
 800c628:	100b883a 	mov	r5,r2
 800c62c:	b809883a 	mov	r4,r23
 800c630:	1023883a 	mov	r17,r2
 800c634:	800ca640 	call	800ca64 <__mulsi3>
 800c638:	d9400017 	ldw	r5,0(sp)
 800c63c:	e008943a 	slli	r4,fp,16
 800c640:	8520983a 	sll	r16,r16,r20
 800c644:	2806d43a 	srli	r3,r5,16
 800c648:	1906b03a 	or	r3,r3,r4
 800c64c:	1880042e 	bgeu	r3,r2,800c660 <__umoddi3+0x374>
 800c650:	1d47883a 	add	r3,r3,r21
 800c654:	893fffc4 	addi	r4,r17,-1
 800c658:	1d40892e 	bgeu	r3,r21,800c880 <__umoddi3+0x594>
 800c65c:	2023883a 	mov	r17,r4
 800c660:	18b9c83a 	sub	fp,r3,r2
 800c664:	b00b883a 	mov	r5,r22
 800c668:	e009883a 	mov	r4,fp
 800c66c:	800ca0c0 	call	800ca0c <__umodsi3>
 800c670:	b00b883a 	mov	r5,r22
 800c674:	e009883a 	mov	r4,fp
 800c678:	d8800215 	stw	r2,8(sp)
 800c67c:	800c9a80 	call	800c9a8 <__udivsi3>
 800c680:	100b883a 	mov	r5,r2
 800c684:	b809883a 	mov	r4,r23
 800c688:	102d883a 	mov	r22,r2
 800c68c:	800ca640 	call	800ca64 <__mulsi3>
 800c690:	d9800217 	ldw	r6,8(sp)
 800c694:	d8c00017 	ldw	r3,0(sp)
 800c698:	300c943a 	slli	r6,r6,16
 800c69c:	1a3fffcc 	andi	r8,r3,65535
 800c6a0:	4190b03a 	or	r8,r8,r6
 800c6a4:	4080042e 	bgeu	r8,r2,800c6b8 <__umoddi3+0x3cc>
 800c6a8:	4551883a 	add	r8,r8,r21
 800c6ac:	b0ffffc4 	addi	r3,r22,-1
 800c6b0:	45406f2e 	bgeu	r8,r21,800c870 <__umoddi3+0x584>
 800c6b4:	182d883a 	mov	r22,r3
 800c6b8:	880e943a 	slli	r7,r17,16
 800c6bc:	9006d43a 	srli	r3,r18,16
 800c6c0:	91bfffcc 	andi	r6,r18,65535
 800c6c4:	3dacb03a 	or	r22,r7,r22
 800c6c8:	b02ed43a 	srli	r23,r22,16
 800c6cc:	b5bfffcc 	andi	r22,r22,65535
 800c6d0:	300b883a 	mov	r5,r6
 800c6d4:	b009883a 	mov	r4,r22
 800c6d8:	40a3c83a 	sub	r17,r8,r2
 800c6dc:	d8c00115 	stw	r3,4(sp)
 800c6e0:	d9800215 	stw	r6,8(sp)
 800c6e4:	800ca640 	call	800ca64 <__mulsi3>
 800c6e8:	d9800217 	ldw	r6,8(sp)
 800c6ec:	b809883a 	mov	r4,r23
 800c6f0:	1039883a 	mov	fp,r2
 800c6f4:	300b883a 	mov	r5,r6
 800c6f8:	800ca640 	call	800ca64 <__mulsi3>
 800c6fc:	d8c00117 	ldw	r3,4(sp)
 800c700:	b809883a 	mov	r4,r23
 800c704:	d8800215 	stw	r2,8(sp)
 800c708:	180b883a 	mov	r5,r3
 800c70c:	800ca640 	call	800ca64 <__mulsi3>
 800c710:	d8c00117 	ldw	r3,4(sp)
 800c714:	b009883a 	mov	r4,r22
 800c718:	102f883a 	mov	r23,r2
 800c71c:	180b883a 	mov	r5,r3
 800c720:	800ca640 	call	800ca64 <__mulsi3>
 800c724:	d9800217 	ldw	r6,8(sp)
 800c728:	e006d43a 	srli	r3,fp,16
 800c72c:	1185883a 	add	r2,r2,r6
 800c730:	1885883a 	add	r2,r3,r2
 800c734:	1180022e 	bgeu	r2,r6,800c740 <__umoddi3+0x454>
 800c738:	00c00074 	movhi	r3,1
 800c73c:	b8ef883a 	add	r23,r23,r3
 800c740:	1006d43a 	srli	r3,r2,16
 800c744:	1004943a 	slli	r2,r2,16
 800c748:	e73fffcc 	andi	fp,fp,65535
 800c74c:	1dc7883a 	add	r3,r3,r23
 800c750:	1739883a 	add	fp,r2,fp
 800c754:	88c03a36 	bltu	r17,r3,800c840 <__umoddi3+0x554>
 800c758:	88c05126 	beq	r17,r3,800c8a0 <__umoddi3+0x5b4>
 800c75c:	88c9c83a 	sub	r4,r17,r3
 800c760:	e00f883a 	mov	r7,fp
 800c764:	81cfc83a 	sub	r7,r16,r7
 800c768:	81c7803a 	cmpltu	r3,r16,r7
 800c76c:	20c7c83a 	sub	r3,r4,r3
 800c770:	1cc4983a 	sll	r2,r3,r19
 800c774:	3d0ed83a 	srl	r7,r7,r20
 800c778:	1d06d83a 	srl	r3,r3,r20
 800c77c:	11c4b03a 	or	r2,r2,r7
 800c780:	003f7c06 	br	800c574 <__alt_data_end+0xfc00c574>
 800c784:	9ca6983a 	sll	r19,r19,r18
 800c788:	88f8d83a 	srl	fp,r17,r3
 800c78c:	80c4d83a 	srl	r2,r16,r3
 800c790:	982cd43a 	srli	r22,r19,16
 800c794:	8ca2983a 	sll	r17,r17,r18
 800c798:	e009883a 	mov	r4,fp
 800c79c:	b00b883a 	mov	r5,r22
 800c7a0:	146ab03a 	or	r21,r2,r17
 800c7a4:	800ca0c0 	call	800ca0c <__umodsi3>
 800c7a8:	b00b883a 	mov	r5,r22
 800c7ac:	e009883a 	mov	r4,fp
 800c7b0:	1029883a 	mov	r20,r2
 800c7b4:	9dffffcc 	andi	r23,r19,65535
 800c7b8:	800c9a80 	call	800c9a8 <__udivsi3>
 800c7bc:	b809883a 	mov	r4,r23
 800c7c0:	100b883a 	mov	r5,r2
 800c7c4:	800ca640 	call	800ca64 <__mulsi3>
 800c7c8:	a008943a 	slli	r4,r20,16
 800c7cc:	a806d43a 	srli	r3,r21,16
 800c7d0:	84a8983a 	sll	r20,r16,r18
 800c7d4:	1906b03a 	or	r3,r3,r4
 800c7d8:	1880042e 	bgeu	r3,r2,800c7ec <__umoddi3+0x500>
 800c7dc:	1cc7883a 	add	r3,r3,r19
 800c7e0:	1cc00236 	bltu	r3,r19,800c7ec <__umoddi3+0x500>
 800c7e4:	1880012e 	bgeu	r3,r2,800c7ec <__umoddi3+0x500>
 800c7e8:	1cc7883a 	add	r3,r3,r19
 800c7ec:	18a3c83a 	sub	r17,r3,r2
 800c7f0:	b00b883a 	mov	r5,r22
 800c7f4:	8809883a 	mov	r4,r17
 800c7f8:	800ca0c0 	call	800ca0c <__umodsi3>
 800c7fc:	b00b883a 	mov	r5,r22
 800c800:	8809883a 	mov	r4,r17
 800c804:	1021883a 	mov	r16,r2
 800c808:	800c9a80 	call	800c9a8 <__udivsi3>
 800c80c:	100b883a 	mov	r5,r2
 800c810:	b809883a 	mov	r4,r23
 800c814:	8020943a 	slli	r16,r16,16
 800c818:	800ca640 	call	800ca64 <__mulsi3>
 800c81c:	a8ffffcc 	andi	r3,r21,65535
 800c820:	1c06b03a 	or	r3,r3,r16
 800c824:	1880042e 	bgeu	r3,r2,800c838 <__umoddi3+0x54c>
 800c828:	1cc7883a 	add	r3,r3,r19
 800c82c:	1cc00236 	bltu	r3,r19,800c838 <__umoddi3+0x54c>
 800c830:	1880012e 	bgeu	r3,r2,800c838 <__umoddi3+0x54c>
 800c834:	1cc7883a 	add	r3,r3,r19
 800c838:	18a3c83a 	sub	r17,r3,r2
 800c83c:	003f2906 	br	800c4e4 <__alt_data_end+0xfc00c4e4>
 800c840:	e48fc83a 	sub	r7,fp,r18
 800c844:	1d49c83a 	sub	r4,r3,r21
 800c848:	e1f9803a 	cmpltu	fp,fp,r7
 800c84c:	2739c83a 	sub	fp,r4,fp
 800c850:	8f09c83a 	sub	r4,r17,fp
 800c854:	003fc306 	br	800c764 <__alt_data_end+0xfc00c764>
 800c858:	01000604 	movi	r4,24
 800c85c:	003ef906 	br	800c444 <__alt_data_end+0xfc00c444>
 800c860:	00800604 	movi	r2,24
 800c864:	003f1306 	br	800c4b4 <__alt_data_end+0xfc00c4b4>
 800c868:	01000604 	movi	r4,24
 800c86c:	003eb606 	br	800c348 <__alt_data_end+0xfc00c348>
 800c870:	40bf902e 	bgeu	r8,r2,800c6b4 <__alt_data_end+0xfc00c6b4>
 800c874:	b5bfff84 	addi	r22,r22,-2
 800c878:	4551883a 	add	r8,r8,r21
 800c87c:	003f8e06 	br	800c6b8 <__alt_data_end+0xfc00c6b8>
 800c880:	18bf762e 	bgeu	r3,r2,800c65c <__alt_data_end+0xfc00c65c>
 800c884:	8c7fff84 	addi	r17,r17,-2
 800c888:	1d47883a 	add	r3,r3,r21
 800c88c:	003f7406 	br	800c660 <__alt_data_end+0xfc00c660>
 800c890:	1cc7883a 	add	r3,r3,r19
 800c894:	003ecd06 	br	800c3cc <__alt_data_end+0xfc00c3cc>
 800c898:	8005883a 	mov	r2,r16
 800c89c:	003ef806 	br	800c480 <__alt_data_end+0xfc00c480>
 800c8a0:	873fe736 	bltu	r16,fp,800c840 <__alt_data_end+0xfc00c840>
 800c8a4:	e00f883a 	mov	r7,fp
 800c8a8:	0009883a 	mov	r4,zero
 800c8ac:	003fad06 	br	800c764 <__alt_data_end+0xfc00c764>

0800c8b0 <__divsi3>:
 800c8b0:	20001b16 	blt	r4,zero,800c920 <__divsi3+0x70>
 800c8b4:	000f883a 	mov	r7,zero
 800c8b8:	28001616 	blt	r5,zero,800c914 <__divsi3+0x64>
 800c8bc:	200d883a 	mov	r6,r4
 800c8c0:	29001a2e 	bgeu	r5,r4,800c92c <__divsi3+0x7c>
 800c8c4:	00800804 	movi	r2,32
 800c8c8:	00c00044 	movi	r3,1
 800c8cc:	00000106 	br	800c8d4 <__divsi3+0x24>
 800c8d0:	10000d26 	beq	r2,zero,800c908 <__divsi3+0x58>
 800c8d4:	294b883a 	add	r5,r5,r5
 800c8d8:	10bfffc4 	addi	r2,r2,-1
 800c8dc:	18c7883a 	add	r3,r3,r3
 800c8e0:	293ffb36 	bltu	r5,r4,800c8d0 <__alt_data_end+0xfc00c8d0>
 800c8e4:	0005883a 	mov	r2,zero
 800c8e8:	18000726 	beq	r3,zero,800c908 <__divsi3+0x58>
 800c8ec:	0005883a 	mov	r2,zero
 800c8f0:	31400236 	bltu	r6,r5,800c8fc <__divsi3+0x4c>
 800c8f4:	314dc83a 	sub	r6,r6,r5
 800c8f8:	10c4b03a 	or	r2,r2,r3
 800c8fc:	1806d07a 	srli	r3,r3,1
 800c900:	280ad07a 	srli	r5,r5,1
 800c904:	183ffa1e 	bne	r3,zero,800c8f0 <__alt_data_end+0xfc00c8f0>
 800c908:	38000126 	beq	r7,zero,800c910 <__divsi3+0x60>
 800c90c:	0085c83a 	sub	r2,zero,r2
 800c910:	f800283a 	ret
 800c914:	014bc83a 	sub	r5,zero,r5
 800c918:	39c0005c 	xori	r7,r7,1
 800c91c:	003fe706 	br	800c8bc <__alt_data_end+0xfc00c8bc>
 800c920:	0109c83a 	sub	r4,zero,r4
 800c924:	01c00044 	movi	r7,1
 800c928:	003fe306 	br	800c8b8 <__alt_data_end+0xfc00c8b8>
 800c92c:	00c00044 	movi	r3,1
 800c930:	003fee06 	br	800c8ec <__alt_data_end+0xfc00c8ec>

0800c934 <__modsi3>:
 800c934:	20001716 	blt	r4,zero,800c994 <__modsi3+0x60>
 800c938:	000f883a 	mov	r7,zero
 800c93c:	2005883a 	mov	r2,r4
 800c940:	28001216 	blt	r5,zero,800c98c <__modsi3+0x58>
 800c944:	2900162e 	bgeu	r5,r4,800c9a0 <__modsi3+0x6c>
 800c948:	01800804 	movi	r6,32
 800c94c:	00c00044 	movi	r3,1
 800c950:	00000106 	br	800c958 <__modsi3+0x24>
 800c954:	30000a26 	beq	r6,zero,800c980 <__modsi3+0x4c>
 800c958:	294b883a 	add	r5,r5,r5
 800c95c:	31bfffc4 	addi	r6,r6,-1
 800c960:	18c7883a 	add	r3,r3,r3
 800c964:	293ffb36 	bltu	r5,r4,800c954 <__alt_data_end+0xfc00c954>
 800c968:	18000526 	beq	r3,zero,800c980 <__modsi3+0x4c>
 800c96c:	1806d07a 	srli	r3,r3,1
 800c970:	11400136 	bltu	r2,r5,800c978 <__modsi3+0x44>
 800c974:	1145c83a 	sub	r2,r2,r5
 800c978:	280ad07a 	srli	r5,r5,1
 800c97c:	183ffb1e 	bne	r3,zero,800c96c <__alt_data_end+0xfc00c96c>
 800c980:	38000126 	beq	r7,zero,800c988 <__modsi3+0x54>
 800c984:	0085c83a 	sub	r2,zero,r2
 800c988:	f800283a 	ret
 800c98c:	014bc83a 	sub	r5,zero,r5
 800c990:	003fec06 	br	800c944 <__alt_data_end+0xfc00c944>
 800c994:	0109c83a 	sub	r4,zero,r4
 800c998:	01c00044 	movi	r7,1
 800c99c:	003fe706 	br	800c93c <__alt_data_end+0xfc00c93c>
 800c9a0:	00c00044 	movi	r3,1
 800c9a4:	003ff106 	br	800c96c <__alt_data_end+0xfc00c96c>

0800c9a8 <__udivsi3>:
 800c9a8:	200d883a 	mov	r6,r4
 800c9ac:	2900152e 	bgeu	r5,r4,800ca04 <__udivsi3+0x5c>
 800c9b0:	28001416 	blt	r5,zero,800ca04 <__udivsi3+0x5c>
 800c9b4:	00800804 	movi	r2,32
 800c9b8:	00c00044 	movi	r3,1
 800c9bc:	00000206 	br	800c9c8 <__udivsi3+0x20>
 800c9c0:	10000e26 	beq	r2,zero,800c9fc <__udivsi3+0x54>
 800c9c4:	28000516 	blt	r5,zero,800c9dc <__udivsi3+0x34>
 800c9c8:	294b883a 	add	r5,r5,r5
 800c9cc:	10bfffc4 	addi	r2,r2,-1
 800c9d0:	18c7883a 	add	r3,r3,r3
 800c9d4:	293ffa36 	bltu	r5,r4,800c9c0 <__alt_data_end+0xfc00c9c0>
 800c9d8:	18000826 	beq	r3,zero,800c9fc <__udivsi3+0x54>
 800c9dc:	0005883a 	mov	r2,zero
 800c9e0:	31400236 	bltu	r6,r5,800c9ec <__udivsi3+0x44>
 800c9e4:	314dc83a 	sub	r6,r6,r5
 800c9e8:	10c4b03a 	or	r2,r2,r3
 800c9ec:	1806d07a 	srli	r3,r3,1
 800c9f0:	280ad07a 	srli	r5,r5,1
 800c9f4:	183ffa1e 	bne	r3,zero,800c9e0 <__alt_data_end+0xfc00c9e0>
 800c9f8:	f800283a 	ret
 800c9fc:	0005883a 	mov	r2,zero
 800ca00:	f800283a 	ret
 800ca04:	00c00044 	movi	r3,1
 800ca08:	003ff406 	br	800c9dc <__alt_data_end+0xfc00c9dc>

0800ca0c <__umodsi3>:
 800ca0c:	2005883a 	mov	r2,r4
 800ca10:	2900122e 	bgeu	r5,r4,800ca5c <__umodsi3+0x50>
 800ca14:	28001116 	blt	r5,zero,800ca5c <__umodsi3+0x50>
 800ca18:	01800804 	movi	r6,32
 800ca1c:	00c00044 	movi	r3,1
 800ca20:	00000206 	br	800ca2c <__umodsi3+0x20>
 800ca24:	30000c26 	beq	r6,zero,800ca58 <__umodsi3+0x4c>
 800ca28:	28000516 	blt	r5,zero,800ca40 <__umodsi3+0x34>
 800ca2c:	294b883a 	add	r5,r5,r5
 800ca30:	31bfffc4 	addi	r6,r6,-1
 800ca34:	18c7883a 	add	r3,r3,r3
 800ca38:	293ffa36 	bltu	r5,r4,800ca24 <__alt_data_end+0xfc00ca24>
 800ca3c:	18000626 	beq	r3,zero,800ca58 <__umodsi3+0x4c>
 800ca40:	1806d07a 	srli	r3,r3,1
 800ca44:	11400136 	bltu	r2,r5,800ca4c <__umodsi3+0x40>
 800ca48:	1145c83a 	sub	r2,r2,r5
 800ca4c:	280ad07a 	srli	r5,r5,1
 800ca50:	183ffb1e 	bne	r3,zero,800ca40 <__alt_data_end+0xfc00ca40>
 800ca54:	f800283a 	ret
 800ca58:	f800283a 	ret
 800ca5c:	00c00044 	movi	r3,1
 800ca60:	003ff706 	br	800ca40 <__alt_data_end+0xfc00ca40>

0800ca64 <__mulsi3>:
 800ca64:	0005883a 	mov	r2,zero
 800ca68:	20000726 	beq	r4,zero,800ca88 <__mulsi3+0x24>
 800ca6c:	20c0004c 	andi	r3,r4,1
 800ca70:	2008d07a 	srli	r4,r4,1
 800ca74:	18000126 	beq	r3,zero,800ca7c <__mulsi3+0x18>
 800ca78:	1145883a 	add	r2,r2,r5
 800ca7c:	294b883a 	add	r5,r5,r5
 800ca80:	203ffa1e 	bne	r4,zero,800ca6c <__alt_data_end+0xfc00ca6c>
 800ca84:	f800283a 	ret
 800ca88:	f800283a 	ret

0800ca8c <__adddf3>:
 800ca8c:	02c00434 	movhi	r11,16
 800ca90:	5affffc4 	addi	r11,r11,-1
 800ca94:	2806d7fa 	srli	r3,r5,31
 800ca98:	2ad4703a 	and	r10,r5,r11
 800ca9c:	3ad2703a 	and	r9,r7,r11
 800caa0:	3804d53a 	srli	r2,r7,20
 800caa4:	3018d77a 	srli	r12,r6,29
 800caa8:	280ad53a 	srli	r5,r5,20
 800caac:	501490fa 	slli	r10,r10,3
 800cab0:	2010d77a 	srli	r8,r4,29
 800cab4:	481290fa 	slli	r9,r9,3
 800cab8:	380ed7fa 	srli	r7,r7,31
 800cabc:	defffb04 	addi	sp,sp,-20
 800cac0:	dc800215 	stw	r18,8(sp)
 800cac4:	dc400115 	stw	r17,4(sp)
 800cac8:	dc000015 	stw	r16,0(sp)
 800cacc:	dfc00415 	stw	ra,16(sp)
 800cad0:	dcc00315 	stw	r19,12(sp)
 800cad4:	1c803fcc 	andi	r18,r3,255
 800cad8:	2c01ffcc 	andi	r16,r5,2047
 800cadc:	5210b03a 	or	r8,r10,r8
 800cae0:	202290fa 	slli	r17,r4,3
 800cae4:	1081ffcc 	andi	r2,r2,2047
 800cae8:	4b12b03a 	or	r9,r9,r12
 800caec:	300c90fa 	slli	r6,r6,3
 800caf0:	91c07526 	beq	r18,r7,800ccc8 <__adddf3+0x23c>
 800caf4:	8087c83a 	sub	r3,r16,r2
 800caf8:	00c0ab0e 	bge	zero,r3,800cda8 <__adddf3+0x31c>
 800cafc:	10002a1e 	bne	r2,zero,800cba8 <__adddf3+0x11c>
 800cb00:	4984b03a 	or	r2,r9,r6
 800cb04:	1000961e 	bne	r2,zero,800cd60 <__adddf3+0x2d4>
 800cb08:	888001cc 	andi	r2,r17,7
 800cb0c:	10000726 	beq	r2,zero,800cb2c <__adddf3+0xa0>
 800cb10:	888003cc 	andi	r2,r17,15
 800cb14:	00c00104 	movi	r3,4
 800cb18:	10c00426 	beq	r2,r3,800cb2c <__adddf3+0xa0>
 800cb1c:	88c7883a 	add	r3,r17,r3
 800cb20:	1c63803a 	cmpltu	r17,r3,r17
 800cb24:	4451883a 	add	r8,r8,r17
 800cb28:	1823883a 	mov	r17,r3
 800cb2c:	4080202c 	andhi	r2,r8,128
 800cb30:	10005926 	beq	r2,zero,800cc98 <__adddf3+0x20c>
 800cb34:	84000044 	addi	r16,r16,1
 800cb38:	0081ffc4 	movi	r2,2047
 800cb3c:	8080ba26 	beq	r16,r2,800ce28 <__adddf3+0x39c>
 800cb40:	00bfe034 	movhi	r2,65408
 800cb44:	10bfffc4 	addi	r2,r2,-1
 800cb48:	4090703a 	and	r8,r8,r2
 800cb4c:	4004977a 	slli	r2,r8,29
 800cb50:	4010927a 	slli	r8,r8,9
 800cb54:	8822d0fa 	srli	r17,r17,3
 800cb58:	8401ffcc 	andi	r16,r16,2047
 800cb5c:	4010d33a 	srli	r8,r8,12
 800cb60:	9007883a 	mov	r3,r18
 800cb64:	1444b03a 	or	r2,r2,r17
 800cb68:	8401ffcc 	andi	r16,r16,2047
 800cb6c:	8020953a 	slli	r16,r16,20
 800cb70:	18c03fcc 	andi	r3,r3,255
 800cb74:	01000434 	movhi	r4,16
 800cb78:	213fffc4 	addi	r4,r4,-1
 800cb7c:	180697fa 	slli	r3,r3,31
 800cb80:	4110703a 	and	r8,r8,r4
 800cb84:	4410b03a 	or	r8,r8,r16
 800cb88:	40c6b03a 	or	r3,r8,r3
 800cb8c:	dfc00417 	ldw	ra,16(sp)
 800cb90:	dcc00317 	ldw	r19,12(sp)
 800cb94:	dc800217 	ldw	r18,8(sp)
 800cb98:	dc400117 	ldw	r17,4(sp)
 800cb9c:	dc000017 	ldw	r16,0(sp)
 800cba0:	dec00504 	addi	sp,sp,20
 800cba4:	f800283a 	ret
 800cba8:	0081ffc4 	movi	r2,2047
 800cbac:	80bfd626 	beq	r16,r2,800cb08 <__alt_data_end+0xfc00cb08>
 800cbb0:	4a402034 	orhi	r9,r9,128
 800cbb4:	00800e04 	movi	r2,56
 800cbb8:	10c09f16 	blt	r2,r3,800ce38 <__adddf3+0x3ac>
 800cbbc:	008007c4 	movi	r2,31
 800cbc0:	10c0c216 	blt	r2,r3,800cecc <__adddf3+0x440>
 800cbc4:	00800804 	movi	r2,32
 800cbc8:	10c5c83a 	sub	r2,r2,r3
 800cbcc:	488a983a 	sll	r5,r9,r2
 800cbd0:	30c8d83a 	srl	r4,r6,r3
 800cbd4:	3084983a 	sll	r2,r6,r2
 800cbd8:	48c6d83a 	srl	r3,r9,r3
 800cbdc:	290cb03a 	or	r6,r5,r4
 800cbe0:	1004c03a 	cmpne	r2,r2,zero
 800cbe4:	308cb03a 	or	r6,r6,r2
 800cbe8:	898dc83a 	sub	r6,r17,r6
 800cbec:	89a3803a 	cmpltu	r17,r17,r6
 800cbf0:	40d1c83a 	sub	r8,r8,r3
 800cbf4:	4451c83a 	sub	r8,r8,r17
 800cbf8:	3023883a 	mov	r17,r6
 800cbfc:	4080202c 	andhi	r2,r8,128
 800cc00:	10002326 	beq	r2,zero,800cc90 <__adddf3+0x204>
 800cc04:	04c02034 	movhi	r19,128
 800cc08:	9cffffc4 	addi	r19,r19,-1
 800cc0c:	44e6703a 	and	r19,r8,r19
 800cc10:	98007626 	beq	r19,zero,800cdec <__adddf3+0x360>
 800cc14:	9809883a 	mov	r4,r19
 800cc18:	800f2cc0 	call	800f2cc <__clzsi2>
 800cc1c:	10fffe04 	addi	r3,r2,-8
 800cc20:	010007c4 	movi	r4,31
 800cc24:	20c07716 	blt	r4,r3,800ce04 <__adddf3+0x378>
 800cc28:	00800804 	movi	r2,32
 800cc2c:	10c5c83a 	sub	r2,r2,r3
 800cc30:	8884d83a 	srl	r2,r17,r2
 800cc34:	98d0983a 	sll	r8,r19,r3
 800cc38:	88e2983a 	sll	r17,r17,r3
 800cc3c:	1204b03a 	or	r2,r2,r8
 800cc40:	1c007416 	blt	r3,r16,800ce14 <__adddf3+0x388>
 800cc44:	1c21c83a 	sub	r16,r3,r16
 800cc48:	82000044 	addi	r8,r16,1
 800cc4c:	00c007c4 	movi	r3,31
 800cc50:	1a009116 	blt	r3,r8,800ce98 <__adddf3+0x40c>
 800cc54:	00c00804 	movi	r3,32
 800cc58:	1a07c83a 	sub	r3,r3,r8
 800cc5c:	8a08d83a 	srl	r4,r17,r8
 800cc60:	88e2983a 	sll	r17,r17,r3
 800cc64:	10c6983a 	sll	r3,r2,r3
 800cc68:	1210d83a 	srl	r8,r2,r8
 800cc6c:	8804c03a 	cmpne	r2,r17,zero
 800cc70:	1906b03a 	or	r3,r3,r4
 800cc74:	18a2b03a 	or	r17,r3,r2
 800cc78:	0021883a 	mov	r16,zero
 800cc7c:	003fa206 	br	800cb08 <__alt_data_end+0xfc00cb08>
 800cc80:	1890b03a 	or	r8,r3,r2
 800cc84:	40017d26 	beq	r8,zero,800d27c <__adddf3+0x7f0>
 800cc88:	1011883a 	mov	r8,r2
 800cc8c:	1823883a 	mov	r17,r3
 800cc90:	888001cc 	andi	r2,r17,7
 800cc94:	103f9e1e 	bne	r2,zero,800cb10 <__alt_data_end+0xfc00cb10>
 800cc98:	4004977a 	slli	r2,r8,29
 800cc9c:	8822d0fa 	srli	r17,r17,3
 800cca0:	4010d0fa 	srli	r8,r8,3
 800cca4:	9007883a 	mov	r3,r18
 800cca8:	1444b03a 	or	r2,r2,r17
 800ccac:	0101ffc4 	movi	r4,2047
 800ccb0:	81002426 	beq	r16,r4,800cd44 <__adddf3+0x2b8>
 800ccb4:	8120703a 	and	r16,r16,r4
 800ccb8:	01000434 	movhi	r4,16
 800ccbc:	213fffc4 	addi	r4,r4,-1
 800ccc0:	4110703a 	and	r8,r8,r4
 800ccc4:	003fa806 	br	800cb68 <__alt_data_end+0xfc00cb68>
 800ccc8:	8089c83a 	sub	r4,r16,r2
 800cccc:	01005e0e 	bge	zero,r4,800ce48 <__adddf3+0x3bc>
 800ccd0:	10002b26 	beq	r2,zero,800cd80 <__adddf3+0x2f4>
 800ccd4:	0081ffc4 	movi	r2,2047
 800ccd8:	80bf8b26 	beq	r16,r2,800cb08 <__alt_data_end+0xfc00cb08>
 800ccdc:	4a402034 	orhi	r9,r9,128
 800cce0:	00800e04 	movi	r2,56
 800cce4:	1100a40e 	bge	r2,r4,800cf78 <__adddf3+0x4ec>
 800cce8:	498cb03a 	or	r6,r9,r6
 800ccec:	300ac03a 	cmpne	r5,r6,zero
 800ccf0:	0013883a 	mov	r9,zero
 800ccf4:	2c4b883a 	add	r5,r5,r17
 800ccf8:	2c63803a 	cmpltu	r17,r5,r17
 800ccfc:	4a11883a 	add	r8,r9,r8
 800cd00:	8a11883a 	add	r8,r17,r8
 800cd04:	2823883a 	mov	r17,r5
 800cd08:	4080202c 	andhi	r2,r8,128
 800cd0c:	103fe026 	beq	r2,zero,800cc90 <__alt_data_end+0xfc00cc90>
 800cd10:	84000044 	addi	r16,r16,1
 800cd14:	0081ffc4 	movi	r2,2047
 800cd18:	8080d226 	beq	r16,r2,800d064 <__adddf3+0x5d8>
 800cd1c:	00bfe034 	movhi	r2,65408
 800cd20:	10bfffc4 	addi	r2,r2,-1
 800cd24:	4090703a 	and	r8,r8,r2
 800cd28:	880ad07a 	srli	r5,r17,1
 800cd2c:	400897fa 	slli	r4,r8,31
 800cd30:	88c0004c 	andi	r3,r17,1
 800cd34:	28e2b03a 	or	r17,r5,r3
 800cd38:	4010d07a 	srli	r8,r8,1
 800cd3c:	2462b03a 	or	r17,r4,r17
 800cd40:	003f7106 	br	800cb08 <__alt_data_end+0xfc00cb08>
 800cd44:	4088b03a 	or	r4,r8,r2
 800cd48:	20014526 	beq	r4,zero,800d260 <__adddf3+0x7d4>
 800cd4c:	01000434 	movhi	r4,16
 800cd50:	42000234 	orhi	r8,r8,8
 800cd54:	213fffc4 	addi	r4,r4,-1
 800cd58:	4110703a 	and	r8,r8,r4
 800cd5c:	003f8206 	br	800cb68 <__alt_data_end+0xfc00cb68>
 800cd60:	18ffffc4 	addi	r3,r3,-1
 800cd64:	1800491e 	bne	r3,zero,800ce8c <__adddf3+0x400>
 800cd68:	898bc83a 	sub	r5,r17,r6
 800cd6c:	8963803a 	cmpltu	r17,r17,r5
 800cd70:	4251c83a 	sub	r8,r8,r9
 800cd74:	4451c83a 	sub	r8,r8,r17
 800cd78:	2823883a 	mov	r17,r5
 800cd7c:	003f9f06 	br	800cbfc <__alt_data_end+0xfc00cbfc>
 800cd80:	4984b03a 	or	r2,r9,r6
 800cd84:	103f6026 	beq	r2,zero,800cb08 <__alt_data_end+0xfc00cb08>
 800cd88:	213fffc4 	addi	r4,r4,-1
 800cd8c:	2000931e 	bne	r4,zero,800cfdc <__adddf3+0x550>
 800cd90:	898d883a 	add	r6,r17,r6
 800cd94:	3463803a 	cmpltu	r17,r6,r17
 800cd98:	4251883a 	add	r8,r8,r9
 800cd9c:	8a11883a 	add	r8,r17,r8
 800cda0:	3023883a 	mov	r17,r6
 800cda4:	003fd806 	br	800cd08 <__alt_data_end+0xfc00cd08>
 800cda8:	1800541e 	bne	r3,zero,800cefc <__adddf3+0x470>
 800cdac:	80800044 	addi	r2,r16,1
 800cdb0:	1081ffcc 	andi	r2,r2,2047
 800cdb4:	00c00044 	movi	r3,1
 800cdb8:	1880a00e 	bge	r3,r2,800d03c <__adddf3+0x5b0>
 800cdbc:	8989c83a 	sub	r4,r17,r6
 800cdc0:	8905803a 	cmpltu	r2,r17,r4
 800cdc4:	4267c83a 	sub	r19,r8,r9
 800cdc8:	98a7c83a 	sub	r19,r19,r2
 800cdcc:	9880202c 	andhi	r2,r19,128
 800cdd0:	10006326 	beq	r2,zero,800cf60 <__adddf3+0x4d4>
 800cdd4:	3463c83a 	sub	r17,r6,r17
 800cdd8:	4a07c83a 	sub	r3,r9,r8
 800cddc:	344d803a 	cmpltu	r6,r6,r17
 800cde0:	19a7c83a 	sub	r19,r3,r6
 800cde4:	3825883a 	mov	r18,r7
 800cde8:	983f8a1e 	bne	r19,zero,800cc14 <__alt_data_end+0xfc00cc14>
 800cdec:	8809883a 	mov	r4,r17
 800cdf0:	800f2cc0 	call	800f2cc <__clzsi2>
 800cdf4:	10800804 	addi	r2,r2,32
 800cdf8:	10fffe04 	addi	r3,r2,-8
 800cdfc:	010007c4 	movi	r4,31
 800ce00:	20ff890e 	bge	r4,r3,800cc28 <__alt_data_end+0xfc00cc28>
 800ce04:	10bff604 	addi	r2,r2,-40
 800ce08:	8884983a 	sll	r2,r17,r2
 800ce0c:	0023883a 	mov	r17,zero
 800ce10:	1c3f8c0e 	bge	r3,r16,800cc44 <__alt_data_end+0xfc00cc44>
 800ce14:	023fe034 	movhi	r8,65408
 800ce18:	423fffc4 	addi	r8,r8,-1
 800ce1c:	80e1c83a 	sub	r16,r16,r3
 800ce20:	1210703a 	and	r8,r2,r8
 800ce24:	003f3806 	br	800cb08 <__alt_data_end+0xfc00cb08>
 800ce28:	9007883a 	mov	r3,r18
 800ce2c:	0011883a 	mov	r8,zero
 800ce30:	0005883a 	mov	r2,zero
 800ce34:	003f4c06 	br	800cb68 <__alt_data_end+0xfc00cb68>
 800ce38:	498cb03a 	or	r6,r9,r6
 800ce3c:	300cc03a 	cmpne	r6,r6,zero
 800ce40:	0007883a 	mov	r3,zero
 800ce44:	003f6806 	br	800cbe8 <__alt_data_end+0xfc00cbe8>
 800ce48:	20009c1e 	bne	r4,zero,800d0bc <__adddf3+0x630>
 800ce4c:	80800044 	addi	r2,r16,1
 800ce50:	1141ffcc 	andi	r5,r2,2047
 800ce54:	01000044 	movi	r4,1
 800ce58:	2140670e 	bge	r4,r5,800cff8 <__adddf3+0x56c>
 800ce5c:	0101ffc4 	movi	r4,2047
 800ce60:	11007f26 	beq	r2,r4,800d060 <__adddf3+0x5d4>
 800ce64:	898d883a 	add	r6,r17,r6
 800ce68:	4247883a 	add	r3,r8,r9
 800ce6c:	3451803a 	cmpltu	r8,r6,r17
 800ce70:	40d1883a 	add	r8,r8,r3
 800ce74:	402297fa 	slli	r17,r8,31
 800ce78:	300cd07a 	srli	r6,r6,1
 800ce7c:	4010d07a 	srli	r8,r8,1
 800ce80:	1021883a 	mov	r16,r2
 800ce84:	89a2b03a 	or	r17,r17,r6
 800ce88:	003f1f06 	br	800cb08 <__alt_data_end+0xfc00cb08>
 800ce8c:	0081ffc4 	movi	r2,2047
 800ce90:	80bf481e 	bne	r16,r2,800cbb4 <__alt_data_end+0xfc00cbb4>
 800ce94:	003f1c06 	br	800cb08 <__alt_data_end+0xfc00cb08>
 800ce98:	843ff844 	addi	r16,r16,-31
 800ce9c:	01000804 	movi	r4,32
 800cea0:	1406d83a 	srl	r3,r2,r16
 800cea4:	41005026 	beq	r8,r4,800cfe8 <__adddf3+0x55c>
 800cea8:	01001004 	movi	r4,64
 800ceac:	2211c83a 	sub	r8,r4,r8
 800ceb0:	1204983a 	sll	r2,r2,r8
 800ceb4:	88a2b03a 	or	r17,r17,r2
 800ceb8:	8822c03a 	cmpne	r17,r17,zero
 800cebc:	1c62b03a 	or	r17,r3,r17
 800cec0:	0011883a 	mov	r8,zero
 800cec4:	0021883a 	mov	r16,zero
 800cec8:	003f7106 	br	800cc90 <__alt_data_end+0xfc00cc90>
 800cecc:	193ff804 	addi	r4,r3,-32
 800ced0:	00800804 	movi	r2,32
 800ced4:	4908d83a 	srl	r4,r9,r4
 800ced8:	18804526 	beq	r3,r2,800cff0 <__adddf3+0x564>
 800cedc:	00801004 	movi	r2,64
 800cee0:	10c5c83a 	sub	r2,r2,r3
 800cee4:	4886983a 	sll	r3,r9,r2
 800cee8:	198cb03a 	or	r6,r3,r6
 800ceec:	300cc03a 	cmpne	r6,r6,zero
 800cef0:	218cb03a 	or	r6,r4,r6
 800cef4:	0007883a 	mov	r3,zero
 800cef8:	003f3b06 	br	800cbe8 <__alt_data_end+0xfc00cbe8>
 800cefc:	80002a26 	beq	r16,zero,800cfa8 <__adddf3+0x51c>
 800cf00:	0101ffc4 	movi	r4,2047
 800cf04:	11006826 	beq	r2,r4,800d0a8 <__adddf3+0x61c>
 800cf08:	00c7c83a 	sub	r3,zero,r3
 800cf0c:	42002034 	orhi	r8,r8,128
 800cf10:	01000e04 	movi	r4,56
 800cf14:	20c07c16 	blt	r4,r3,800d108 <__adddf3+0x67c>
 800cf18:	010007c4 	movi	r4,31
 800cf1c:	20c0da16 	blt	r4,r3,800d288 <__adddf3+0x7fc>
 800cf20:	01000804 	movi	r4,32
 800cf24:	20c9c83a 	sub	r4,r4,r3
 800cf28:	4114983a 	sll	r10,r8,r4
 800cf2c:	88cad83a 	srl	r5,r17,r3
 800cf30:	8908983a 	sll	r4,r17,r4
 800cf34:	40c6d83a 	srl	r3,r8,r3
 800cf38:	5162b03a 	or	r17,r10,r5
 800cf3c:	2008c03a 	cmpne	r4,r4,zero
 800cf40:	8922b03a 	or	r17,r17,r4
 800cf44:	3463c83a 	sub	r17,r6,r17
 800cf48:	48c7c83a 	sub	r3,r9,r3
 800cf4c:	344d803a 	cmpltu	r6,r6,r17
 800cf50:	1991c83a 	sub	r8,r3,r6
 800cf54:	1021883a 	mov	r16,r2
 800cf58:	3825883a 	mov	r18,r7
 800cf5c:	003f2706 	br	800cbfc <__alt_data_end+0xfc00cbfc>
 800cf60:	24d0b03a 	or	r8,r4,r19
 800cf64:	40001b1e 	bne	r8,zero,800cfd4 <__adddf3+0x548>
 800cf68:	0005883a 	mov	r2,zero
 800cf6c:	0007883a 	mov	r3,zero
 800cf70:	0021883a 	mov	r16,zero
 800cf74:	003f4d06 	br	800ccac <__alt_data_end+0xfc00ccac>
 800cf78:	008007c4 	movi	r2,31
 800cf7c:	11003c16 	blt	r2,r4,800d070 <__adddf3+0x5e4>
 800cf80:	00800804 	movi	r2,32
 800cf84:	1105c83a 	sub	r2,r2,r4
 800cf88:	488e983a 	sll	r7,r9,r2
 800cf8c:	310ad83a 	srl	r5,r6,r4
 800cf90:	3084983a 	sll	r2,r6,r2
 800cf94:	4912d83a 	srl	r9,r9,r4
 800cf98:	394ab03a 	or	r5,r7,r5
 800cf9c:	1004c03a 	cmpne	r2,r2,zero
 800cfa0:	288ab03a 	or	r5,r5,r2
 800cfa4:	003f5306 	br	800ccf4 <__alt_data_end+0xfc00ccf4>
 800cfa8:	4448b03a 	or	r4,r8,r17
 800cfac:	20003e26 	beq	r4,zero,800d0a8 <__adddf3+0x61c>
 800cfb0:	00c6303a 	nor	r3,zero,r3
 800cfb4:	18003a1e 	bne	r3,zero,800d0a0 <__adddf3+0x614>
 800cfb8:	3463c83a 	sub	r17,r6,r17
 800cfbc:	4a07c83a 	sub	r3,r9,r8
 800cfc0:	344d803a 	cmpltu	r6,r6,r17
 800cfc4:	1991c83a 	sub	r8,r3,r6
 800cfc8:	1021883a 	mov	r16,r2
 800cfcc:	3825883a 	mov	r18,r7
 800cfd0:	003f0a06 	br	800cbfc <__alt_data_end+0xfc00cbfc>
 800cfd4:	2023883a 	mov	r17,r4
 800cfd8:	003f0d06 	br	800cc10 <__alt_data_end+0xfc00cc10>
 800cfdc:	0081ffc4 	movi	r2,2047
 800cfe0:	80bf3f1e 	bne	r16,r2,800cce0 <__alt_data_end+0xfc00cce0>
 800cfe4:	003ec806 	br	800cb08 <__alt_data_end+0xfc00cb08>
 800cfe8:	0005883a 	mov	r2,zero
 800cfec:	003fb106 	br	800ceb4 <__alt_data_end+0xfc00ceb4>
 800cff0:	0007883a 	mov	r3,zero
 800cff4:	003fbc06 	br	800cee8 <__alt_data_end+0xfc00cee8>
 800cff8:	4444b03a 	or	r2,r8,r17
 800cffc:	8000871e 	bne	r16,zero,800d21c <__adddf3+0x790>
 800d000:	1000ba26 	beq	r2,zero,800d2ec <__adddf3+0x860>
 800d004:	4984b03a 	or	r2,r9,r6
 800d008:	103ebf26 	beq	r2,zero,800cb08 <__alt_data_end+0xfc00cb08>
 800d00c:	8985883a 	add	r2,r17,r6
 800d010:	4247883a 	add	r3,r8,r9
 800d014:	1451803a 	cmpltu	r8,r2,r17
 800d018:	40d1883a 	add	r8,r8,r3
 800d01c:	40c0202c 	andhi	r3,r8,128
 800d020:	1023883a 	mov	r17,r2
 800d024:	183f1a26 	beq	r3,zero,800cc90 <__alt_data_end+0xfc00cc90>
 800d028:	00bfe034 	movhi	r2,65408
 800d02c:	10bfffc4 	addi	r2,r2,-1
 800d030:	2021883a 	mov	r16,r4
 800d034:	4090703a 	and	r8,r8,r2
 800d038:	003eb306 	br	800cb08 <__alt_data_end+0xfc00cb08>
 800d03c:	4444b03a 	or	r2,r8,r17
 800d040:	8000291e 	bne	r16,zero,800d0e8 <__adddf3+0x65c>
 800d044:	10004b1e 	bne	r2,zero,800d174 <__adddf3+0x6e8>
 800d048:	4990b03a 	or	r8,r9,r6
 800d04c:	40008b26 	beq	r8,zero,800d27c <__adddf3+0x7f0>
 800d050:	4811883a 	mov	r8,r9
 800d054:	3023883a 	mov	r17,r6
 800d058:	3825883a 	mov	r18,r7
 800d05c:	003eaa06 	br	800cb08 <__alt_data_end+0xfc00cb08>
 800d060:	1021883a 	mov	r16,r2
 800d064:	0011883a 	mov	r8,zero
 800d068:	0005883a 	mov	r2,zero
 800d06c:	003f0f06 	br	800ccac <__alt_data_end+0xfc00ccac>
 800d070:	217ff804 	addi	r5,r4,-32
 800d074:	00800804 	movi	r2,32
 800d078:	494ad83a 	srl	r5,r9,r5
 800d07c:	20807d26 	beq	r4,r2,800d274 <__adddf3+0x7e8>
 800d080:	00801004 	movi	r2,64
 800d084:	1109c83a 	sub	r4,r2,r4
 800d088:	4912983a 	sll	r9,r9,r4
 800d08c:	498cb03a 	or	r6,r9,r6
 800d090:	300cc03a 	cmpne	r6,r6,zero
 800d094:	298ab03a 	or	r5,r5,r6
 800d098:	0013883a 	mov	r9,zero
 800d09c:	003f1506 	br	800ccf4 <__alt_data_end+0xfc00ccf4>
 800d0a0:	0101ffc4 	movi	r4,2047
 800d0a4:	113f9a1e 	bne	r2,r4,800cf10 <__alt_data_end+0xfc00cf10>
 800d0a8:	4811883a 	mov	r8,r9
 800d0ac:	3023883a 	mov	r17,r6
 800d0b0:	1021883a 	mov	r16,r2
 800d0b4:	3825883a 	mov	r18,r7
 800d0b8:	003e9306 	br	800cb08 <__alt_data_end+0xfc00cb08>
 800d0bc:	8000161e 	bne	r16,zero,800d118 <__adddf3+0x68c>
 800d0c0:	444ab03a 	or	r5,r8,r17
 800d0c4:	28005126 	beq	r5,zero,800d20c <__adddf3+0x780>
 800d0c8:	0108303a 	nor	r4,zero,r4
 800d0cc:	20004d1e 	bne	r4,zero,800d204 <__adddf3+0x778>
 800d0d0:	89a3883a 	add	r17,r17,r6
 800d0d4:	4253883a 	add	r9,r8,r9
 800d0d8:	898d803a 	cmpltu	r6,r17,r6
 800d0dc:	3251883a 	add	r8,r6,r9
 800d0e0:	1021883a 	mov	r16,r2
 800d0e4:	003f0806 	br	800cd08 <__alt_data_end+0xfc00cd08>
 800d0e8:	1000301e 	bne	r2,zero,800d1ac <__adddf3+0x720>
 800d0ec:	4984b03a 	or	r2,r9,r6
 800d0f0:	10007126 	beq	r2,zero,800d2b8 <__adddf3+0x82c>
 800d0f4:	4811883a 	mov	r8,r9
 800d0f8:	3023883a 	mov	r17,r6
 800d0fc:	3825883a 	mov	r18,r7
 800d100:	0401ffc4 	movi	r16,2047
 800d104:	003e8006 	br	800cb08 <__alt_data_end+0xfc00cb08>
 800d108:	4462b03a 	or	r17,r8,r17
 800d10c:	8822c03a 	cmpne	r17,r17,zero
 800d110:	0007883a 	mov	r3,zero
 800d114:	003f8b06 	br	800cf44 <__alt_data_end+0xfc00cf44>
 800d118:	0141ffc4 	movi	r5,2047
 800d11c:	11403b26 	beq	r2,r5,800d20c <__adddf3+0x780>
 800d120:	0109c83a 	sub	r4,zero,r4
 800d124:	42002034 	orhi	r8,r8,128
 800d128:	01400e04 	movi	r5,56
 800d12c:	29006716 	blt	r5,r4,800d2cc <__adddf3+0x840>
 800d130:	014007c4 	movi	r5,31
 800d134:	29007016 	blt	r5,r4,800d2f8 <__adddf3+0x86c>
 800d138:	01400804 	movi	r5,32
 800d13c:	290bc83a 	sub	r5,r5,r4
 800d140:	4154983a 	sll	r10,r8,r5
 800d144:	890ed83a 	srl	r7,r17,r4
 800d148:	894a983a 	sll	r5,r17,r5
 800d14c:	4108d83a 	srl	r4,r8,r4
 800d150:	51e2b03a 	or	r17,r10,r7
 800d154:	280ac03a 	cmpne	r5,r5,zero
 800d158:	8962b03a 	or	r17,r17,r5
 800d15c:	89a3883a 	add	r17,r17,r6
 800d160:	2253883a 	add	r9,r4,r9
 800d164:	898d803a 	cmpltu	r6,r17,r6
 800d168:	3251883a 	add	r8,r6,r9
 800d16c:	1021883a 	mov	r16,r2
 800d170:	003ee506 	br	800cd08 <__alt_data_end+0xfc00cd08>
 800d174:	4984b03a 	or	r2,r9,r6
 800d178:	103e6326 	beq	r2,zero,800cb08 <__alt_data_end+0xfc00cb08>
 800d17c:	8987c83a 	sub	r3,r17,r6
 800d180:	88c9803a 	cmpltu	r4,r17,r3
 800d184:	4245c83a 	sub	r2,r8,r9
 800d188:	1105c83a 	sub	r2,r2,r4
 800d18c:	1100202c 	andhi	r4,r2,128
 800d190:	203ebb26 	beq	r4,zero,800cc80 <__alt_data_end+0xfc00cc80>
 800d194:	3463c83a 	sub	r17,r6,r17
 800d198:	4a07c83a 	sub	r3,r9,r8
 800d19c:	344d803a 	cmpltu	r6,r6,r17
 800d1a0:	1991c83a 	sub	r8,r3,r6
 800d1a4:	3825883a 	mov	r18,r7
 800d1a8:	003e5706 	br	800cb08 <__alt_data_end+0xfc00cb08>
 800d1ac:	4984b03a 	or	r2,r9,r6
 800d1b0:	10002e26 	beq	r2,zero,800d26c <__adddf3+0x7e0>
 800d1b4:	4004d0fa 	srli	r2,r8,3
 800d1b8:	8822d0fa 	srli	r17,r17,3
 800d1bc:	4010977a 	slli	r8,r8,29
 800d1c0:	10c0022c 	andhi	r3,r2,8
 800d1c4:	4462b03a 	or	r17,r8,r17
 800d1c8:	18000826 	beq	r3,zero,800d1ec <__adddf3+0x760>
 800d1cc:	4808d0fa 	srli	r4,r9,3
 800d1d0:	20c0022c 	andhi	r3,r4,8
 800d1d4:	1800051e 	bne	r3,zero,800d1ec <__adddf3+0x760>
 800d1d8:	300cd0fa 	srli	r6,r6,3
 800d1dc:	4806977a 	slli	r3,r9,29
 800d1e0:	2005883a 	mov	r2,r4
 800d1e4:	3825883a 	mov	r18,r7
 800d1e8:	19a2b03a 	or	r17,r3,r6
 800d1ec:	8810d77a 	srli	r8,r17,29
 800d1f0:	100490fa 	slli	r2,r2,3
 800d1f4:	882290fa 	slli	r17,r17,3
 800d1f8:	0401ffc4 	movi	r16,2047
 800d1fc:	4090b03a 	or	r8,r8,r2
 800d200:	003e4106 	br	800cb08 <__alt_data_end+0xfc00cb08>
 800d204:	0141ffc4 	movi	r5,2047
 800d208:	117fc71e 	bne	r2,r5,800d128 <__alt_data_end+0xfc00d128>
 800d20c:	4811883a 	mov	r8,r9
 800d210:	3023883a 	mov	r17,r6
 800d214:	1021883a 	mov	r16,r2
 800d218:	003e3b06 	br	800cb08 <__alt_data_end+0xfc00cb08>
 800d21c:	10002f26 	beq	r2,zero,800d2dc <__adddf3+0x850>
 800d220:	4984b03a 	or	r2,r9,r6
 800d224:	10001126 	beq	r2,zero,800d26c <__adddf3+0x7e0>
 800d228:	4004d0fa 	srli	r2,r8,3
 800d22c:	8822d0fa 	srli	r17,r17,3
 800d230:	4010977a 	slli	r8,r8,29
 800d234:	10c0022c 	andhi	r3,r2,8
 800d238:	4462b03a 	or	r17,r8,r17
 800d23c:	183feb26 	beq	r3,zero,800d1ec <__alt_data_end+0xfc00d1ec>
 800d240:	4808d0fa 	srli	r4,r9,3
 800d244:	20c0022c 	andhi	r3,r4,8
 800d248:	183fe81e 	bne	r3,zero,800d1ec <__alt_data_end+0xfc00d1ec>
 800d24c:	300cd0fa 	srli	r6,r6,3
 800d250:	4806977a 	slli	r3,r9,29
 800d254:	2005883a 	mov	r2,r4
 800d258:	19a2b03a 	or	r17,r3,r6
 800d25c:	003fe306 	br	800d1ec <__alt_data_end+0xfc00d1ec>
 800d260:	0011883a 	mov	r8,zero
 800d264:	0005883a 	mov	r2,zero
 800d268:	003e3f06 	br	800cb68 <__alt_data_end+0xfc00cb68>
 800d26c:	0401ffc4 	movi	r16,2047
 800d270:	003e2506 	br	800cb08 <__alt_data_end+0xfc00cb08>
 800d274:	0013883a 	mov	r9,zero
 800d278:	003f8406 	br	800d08c <__alt_data_end+0xfc00d08c>
 800d27c:	0005883a 	mov	r2,zero
 800d280:	0007883a 	mov	r3,zero
 800d284:	003e8906 	br	800ccac <__alt_data_end+0xfc00ccac>
 800d288:	197ff804 	addi	r5,r3,-32
 800d28c:	01000804 	movi	r4,32
 800d290:	414ad83a 	srl	r5,r8,r5
 800d294:	19002426 	beq	r3,r4,800d328 <__adddf3+0x89c>
 800d298:	01001004 	movi	r4,64
 800d29c:	20c7c83a 	sub	r3,r4,r3
 800d2a0:	40c6983a 	sll	r3,r8,r3
 800d2a4:	1c46b03a 	or	r3,r3,r17
 800d2a8:	1806c03a 	cmpne	r3,r3,zero
 800d2ac:	28e2b03a 	or	r17,r5,r3
 800d2b0:	0007883a 	mov	r3,zero
 800d2b4:	003f2306 	br	800cf44 <__alt_data_end+0xfc00cf44>
 800d2b8:	0007883a 	mov	r3,zero
 800d2bc:	5811883a 	mov	r8,r11
 800d2c0:	00bfffc4 	movi	r2,-1
 800d2c4:	0401ffc4 	movi	r16,2047
 800d2c8:	003e7806 	br	800ccac <__alt_data_end+0xfc00ccac>
 800d2cc:	4462b03a 	or	r17,r8,r17
 800d2d0:	8822c03a 	cmpne	r17,r17,zero
 800d2d4:	0009883a 	mov	r4,zero
 800d2d8:	003fa006 	br	800d15c <__alt_data_end+0xfc00d15c>
 800d2dc:	4811883a 	mov	r8,r9
 800d2e0:	3023883a 	mov	r17,r6
 800d2e4:	0401ffc4 	movi	r16,2047
 800d2e8:	003e0706 	br	800cb08 <__alt_data_end+0xfc00cb08>
 800d2ec:	4811883a 	mov	r8,r9
 800d2f0:	3023883a 	mov	r17,r6
 800d2f4:	003e0406 	br	800cb08 <__alt_data_end+0xfc00cb08>
 800d2f8:	21fff804 	addi	r7,r4,-32
 800d2fc:	01400804 	movi	r5,32
 800d300:	41ced83a 	srl	r7,r8,r7
 800d304:	21400a26 	beq	r4,r5,800d330 <__adddf3+0x8a4>
 800d308:	01401004 	movi	r5,64
 800d30c:	2909c83a 	sub	r4,r5,r4
 800d310:	4108983a 	sll	r4,r8,r4
 800d314:	2448b03a 	or	r4,r4,r17
 800d318:	2008c03a 	cmpne	r4,r4,zero
 800d31c:	3922b03a 	or	r17,r7,r4
 800d320:	0009883a 	mov	r4,zero
 800d324:	003f8d06 	br	800d15c <__alt_data_end+0xfc00d15c>
 800d328:	0007883a 	mov	r3,zero
 800d32c:	003fdd06 	br	800d2a4 <__alt_data_end+0xfc00d2a4>
 800d330:	0009883a 	mov	r4,zero
 800d334:	003ff706 	br	800d314 <__alt_data_end+0xfc00d314>

0800d338 <__divdf3>:
 800d338:	defff004 	addi	sp,sp,-64
 800d33c:	dc800815 	stw	r18,32(sp)
 800d340:	2824d53a 	srli	r18,r5,20
 800d344:	dd800c15 	stw	r22,48(sp)
 800d348:	282cd7fa 	srli	r22,r5,31
 800d34c:	dc000615 	stw	r16,24(sp)
 800d350:	04000434 	movhi	r16,16
 800d354:	843fffc4 	addi	r16,r16,-1
 800d358:	dfc00f15 	stw	ra,60(sp)
 800d35c:	df000e15 	stw	fp,56(sp)
 800d360:	ddc00d15 	stw	r23,52(sp)
 800d364:	dd400b15 	stw	r21,44(sp)
 800d368:	dd000a15 	stw	r20,40(sp)
 800d36c:	dcc00915 	stw	r19,36(sp)
 800d370:	dc400715 	stw	r17,28(sp)
 800d374:	9481ffcc 	andi	r18,r18,2047
 800d378:	2c20703a 	and	r16,r5,r16
 800d37c:	b2003fcc 	andi	r8,r22,255
 800d380:	90006126 	beq	r18,zero,800d508 <__divdf3+0x1d0>
 800d384:	0081ffc4 	movi	r2,2047
 800d388:	202b883a 	mov	r21,r4
 800d38c:	90803726 	beq	r18,r2,800d46c <__divdf3+0x134>
 800d390:	80800434 	orhi	r2,r16,16
 800d394:	100490fa 	slli	r2,r2,3
 800d398:	2020d77a 	srli	r16,r4,29
 800d39c:	202a90fa 	slli	r21,r4,3
 800d3a0:	94bf0044 	addi	r18,r18,-1023
 800d3a4:	80a0b03a 	or	r16,r16,r2
 800d3a8:	0013883a 	mov	r9,zero
 800d3ac:	000b883a 	mov	r5,zero
 800d3b0:	3806d53a 	srli	r3,r7,20
 800d3b4:	382ed7fa 	srli	r23,r7,31
 800d3b8:	04400434 	movhi	r17,16
 800d3bc:	8c7fffc4 	addi	r17,r17,-1
 800d3c0:	18c1ffcc 	andi	r3,r3,2047
 800d3c4:	3029883a 	mov	r20,r6
 800d3c8:	3c62703a 	and	r17,r7,r17
 800d3cc:	bf003fcc 	andi	fp,r23,255
 800d3d0:	18006e26 	beq	r3,zero,800d58c <__divdf3+0x254>
 800d3d4:	0081ffc4 	movi	r2,2047
 800d3d8:	18806626 	beq	r3,r2,800d574 <__divdf3+0x23c>
 800d3dc:	88800434 	orhi	r2,r17,16
 800d3e0:	100490fa 	slli	r2,r2,3
 800d3e4:	3022d77a 	srli	r17,r6,29
 800d3e8:	302890fa 	slli	r20,r6,3
 800d3ec:	18ff0044 	addi	r3,r3,-1023
 800d3f0:	88a2b03a 	or	r17,r17,r2
 800d3f4:	000f883a 	mov	r7,zero
 800d3f8:	b5e6f03a 	xor	r19,r22,r23
 800d3fc:	3a4cb03a 	or	r6,r7,r9
 800d400:	008003c4 	movi	r2,15
 800d404:	9809883a 	mov	r4,r19
 800d408:	90c7c83a 	sub	r3,r18,r3
 800d40c:	9cc03fcc 	andi	r19,r19,255
 800d410:	11809636 	bltu	r2,r6,800d66c <__divdf3+0x334>
 800d414:	300c90ba 	slli	r6,r6,2
 800d418:	00820074 	movhi	r2,2049
 800d41c:	10b50b04 	addi	r2,r2,-11220
 800d420:	308d883a 	add	r6,r6,r2
 800d424:	30800017 	ldw	r2,0(r6)
 800d428:	1000683a 	jmp	r2
 800d42c:	0800d66c 	andhi	zero,at,857
 800d430:	0800d4a4 	muli	zero,at,850
 800d434:	0800d65c 	xori	zero,at,857
 800d438:	0800d498 	cmpnei	zero,at,850
 800d43c:	0800d65c 	xori	zero,at,857
 800d440:	0800d630 	cmpltui	zero,at,856
 800d444:	0800d65c 	xori	zero,at,857
 800d448:	0800d498 	cmpnei	zero,at,850
 800d44c:	0800d4a4 	muli	zero,at,850
 800d450:	0800d4a4 	muli	zero,at,850
 800d454:	0800d630 	cmpltui	zero,at,856
 800d458:	0800d498 	cmpnei	zero,at,850
 800d45c:	0800d488 	cmpgei	zero,at,850
 800d460:	0800d488 	cmpgei	zero,at,850
 800d464:	0800d488 	cmpgei	zero,at,850
 800d468:	0800d9f4 	orhi	zero,at,871
 800d46c:	2404b03a 	or	r2,r4,r16
 800d470:	10006c1e 	bne	r2,zero,800d624 <__divdf3+0x2ec>
 800d474:	02400204 	movi	r9,8
 800d478:	0021883a 	mov	r16,zero
 800d47c:	002b883a 	mov	r21,zero
 800d480:	01400084 	movi	r5,2
 800d484:	003fca06 	br	800d3b0 <__alt_data_end+0xfc00d3b0>
 800d488:	8023883a 	mov	r17,r16
 800d48c:	a829883a 	mov	r20,r21
 800d490:	4039883a 	mov	fp,r8
 800d494:	280f883a 	mov	r7,r5
 800d498:	00800084 	movi	r2,2
 800d49c:	3881601e 	bne	r7,r2,800da20 <__divdf3+0x6e8>
 800d4a0:	e027883a 	mov	r19,fp
 800d4a4:	9900004c 	andi	r4,r19,1
 800d4a8:	0081ffc4 	movi	r2,2047
 800d4ac:	0021883a 	mov	r16,zero
 800d4b0:	002b883a 	mov	r21,zero
 800d4b4:	1004953a 	slli	r2,r2,20
 800d4b8:	20c03fcc 	andi	r3,r4,255
 800d4bc:	01400434 	movhi	r5,16
 800d4c0:	297fffc4 	addi	r5,r5,-1
 800d4c4:	180697fa 	slli	r3,r3,31
 800d4c8:	8160703a 	and	r16,r16,r5
 800d4cc:	80a0b03a 	or	r16,r16,r2
 800d4d0:	80c6b03a 	or	r3,r16,r3
 800d4d4:	a805883a 	mov	r2,r21
 800d4d8:	dfc00f17 	ldw	ra,60(sp)
 800d4dc:	df000e17 	ldw	fp,56(sp)
 800d4e0:	ddc00d17 	ldw	r23,52(sp)
 800d4e4:	dd800c17 	ldw	r22,48(sp)
 800d4e8:	dd400b17 	ldw	r21,44(sp)
 800d4ec:	dd000a17 	ldw	r20,40(sp)
 800d4f0:	dcc00917 	ldw	r19,36(sp)
 800d4f4:	dc800817 	ldw	r18,32(sp)
 800d4f8:	dc400717 	ldw	r17,28(sp)
 800d4fc:	dc000617 	ldw	r16,24(sp)
 800d500:	dec01004 	addi	sp,sp,64
 800d504:	f800283a 	ret
 800d508:	2404b03a 	or	r2,r4,r16
 800d50c:	2023883a 	mov	r17,r4
 800d510:	10003f26 	beq	r2,zero,800d610 <__divdf3+0x2d8>
 800d514:	80015e26 	beq	r16,zero,800da90 <__divdf3+0x758>
 800d518:	8009883a 	mov	r4,r16
 800d51c:	d9800215 	stw	r6,8(sp)
 800d520:	d9c00515 	stw	r7,20(sp)
 800d524:	da000415 	stw	r8,16(sp)
 800d528:	800f2cc0 	call	800f2cc <__clzsi2>
 800d52c:	d9800217 	ldw	r6,8(sp)
 800d530:	d9c00517 	ldw	r7,20(sp)
 800d534:	da000417 	ldw	r8,16(sp)
 800d538:	113ffd44 	addi	r4,r2,-11
 800d53c:	00c00704 	movi	r3,28
 800d540:	19014f16 	blt	r3,r4,800da80 <__divdf3+0x748>
 800d544:	00c00744 	movi	r3,29
 800d548:	157ffe04 	addi	r21,r2,-8
 800d54c:	1907c83a 	sub	r3,r3,r4
 800d550:	8560983a 	sll	r16,r16,r21
 800d554:	88c6d83a 	srl	r3,r17,r3
 800d558:	8d6a983a 	sll	r21,r17,r21
 800d55c:	1c20b03a 	or	r16,r3,r16
 800d560:	1080fcc4 	addi	r2,r2,1011
 800d564:	00a5c83a 	sub	r18,zero,r2
 800d568:	0013883a 	mov	r9,zero
 800d56c:	000b883a 	mov	r5,zero
 800d570:	003f8f06 	br	800d3b0 <__alt_data_end+0xfc00d3b0>
 800d574:	3444b03a 	or	r2,r6,r17
 800d578:	1000231e 	bne	r2,zero,800d608 <__divdf3+0x2d0>
 800d57c:	0023883a 	mov	r17,zero
 800d580:	0029883a 	mov	r20,zero
 800d584:	01c00084 	movi	r7,2
 800d588:	003f9b06 	br	800d3f8 <__alt_data_end+0xfc00d3f8>
 800d58c:	3444b03a 	or	r2,r6,r17
 800d590:	10001926 	beq	r2,zero,800d5f8 <__divdf3+0x2c0>
 800d594:	88014b26 	beq	r17,zero,800dac4 <__divdf3+0x78c>
 800d598:	8809883a 	mov	r4,r17
 800d59c:	d9400115 	stw	r5,4(sp)
 800d5a0:	d9800215 	stw	r6,8(sp)
 800d5a4:	da000415 	stw	r8,16(sp)
 800d5a8:	da400315 	stw	r9,12(sp)
 800d5ac:	800f2cc0 	call	800f2cc <__clzsi2>
 800d5b0:	d9400117 	ldw	r5,4(sp)
 800d5b4:	d9800217 	ldw	r6,8(sp)
 800d5b8:	da000417 	ldw	r8,16(sp)
 800d5bc:	da400317 	ldw	r9,12(sp)
 800d5c0:	113ffd44 	addi	r4,r2,-11
 800d5c4:	00c00704 	movi	r3,28
 800d5c8:	19013a16 	blt	r3,r4,800dab4 <__divdf3+0x77c>
 800d5cc:	00c00744 	movi	r3,29
 800d5d0:	153ffe04 	addi	r20,r2,-8
 800d5d4:	1907c83a 	sub	r3,r3,r4
 800d5d8:	8d22983a 	sll	r17,r17,r20
 800d5dc:	30c6d83a 	srl	r3,r6,r3
 800d5e0:	3528983a 	sll	r20,r6,r20
 800d5e4:	1c62b03a 	or	r17,r3,r17
 800d5e8:	1080fcc4 	addi	r2,r2,1011
 800d5ec:	0087c83a 	sub	r3,zero,r2
 800d5f0:	000f883a 	mov	r7,zero
 800d5f4:	003f8006 	br	800d3f8 <__alt_data_end+0xfc00d3f8>
 800d5f8:	0023883a 	mov	r17,zero
 800d5fc:	0029883a 	mov	r20,zero
 800d600:	01c00044 	movi	r7,1
 800d604:	003f7c06 	br	800d3f8 <__alt_data_end+0xfc00d3f8>
 800d608:	01c000c4 	movi	r7,3
 800d60c:	003f7a06 	br	800d3f8 <__alt_data_end+0xfc00d3f8>
 800d610:	02400104 	movi	r9,4
 800d614:	0021883a 	mov	r16,zero
 800d618:	002b883a 	mov	r21,zero
 800d61c:	01400044 	movi	r5,1
 800d620:	003f6306 	br	800d3b0 <__alt_data_end+0xfc00d3b0>
 800d624:	02400304 	movi	r9,12
 800d628:	014000c4 	movi	r5,3
 800d62c:	003f6006 	br	800d3b0 <__alt_data_end+0xfc00d3b0>
 800d630:	04000434 	movhi	r16,16
 800d634:	0009883a 	mov	r4,zero
 800d638:	843fffc4 	addi	r16,r16,-1
 800d63c:	057fffc4 	movi	r21,-1
 800d640:	0081ffc4 	movi	r2,2047
 800d644:	003f9b06 	br	800d4b4 <__alt_data_end+0xfc00d4b4>
 800d648:	00c00044 	movi	r3,1
 800d64c:	1887c83a 	sub	r3,r3,r2
 800d650:	01000e04 	movi	r4,56
 800d654:	20c1530e 	bge	r4,r3,800dba4 <__divdf3+0x86c>
 800d658:	9900004c 	andi	r4,r19,1
 800d65c:	0005883a 	mov	r2,zero
 800d660:	0021883a 	mov	r16,zero
 800d664:	002b883a 	mov	r21,zero
 800d668:	003f9206 	br	800d4b4 <__alt_data_end+0xfc00d4b4>
 800d66c:	8c012e36 	bltu	r17,r16,800db28 <__divdf3+0x7f0>
 800d670:	84412c26 	beq	r16,r17,800db24 <__divdf3+0x7ec>
 800d674:	a82f883a 	mov	r23,r21
 800d678:	18ffffc4 	addi	r3,r3,-1
 800d67c:	002b883a 	mov	r21,zero
 800d680:	a004d63a 	srli	r2,r20,24
 800d684:	8822923a 	slli	r17,r17,8
 800d688:	a028923a 	slli	r20,r20,8
 800d68c:	8009883a 	mov	r4,r16
 800d690:	88acb03a 	or	r22,r17,r2
 800d694:	dd000015 	stw	r20,0(sp)
 800d698:	b028d43a 	srli	r20,r22,16
 800d69c:	d8c00215 	stw	r3,8(sp)
 800d6a0:	b4bfffcc 	andi	r18,r22,65535
 800d6a4:	a00b883a 	mov	r5,r20
 800d6a8:	800c9a80 	call	800c9a8 <__udivsi3>
 800d6ac:	100b883a 	mov	r5,r2
 800d6b0:	9009883a 	mov	r4,r18
 800d6b4:	1023883a 	mov	r17,r2
 800d6b8:	800ca640 	call	800ca64 <__mulsi3>
 800d6bc:	8009883a 	mov	r4,r16
 800d6c0:	a00b883a 	mov	r5,r20
 800d6c4:	1039883a 	mov	fp,r2
 800d6c8:	800ca0c0 	call	800ca0c <__umodsi3>
 800d6cc:	1004943a 	slli	r2,r2,16
 800d6d0:	b808d43a 	srli	r4,r23,16
 800d6d4:	d8c00217 	ldw	r3,8(sp)
 800d6d8:	2084b03a 	or	r2,r4,r2
 800d6dc:	1700062e 	bgeu	r2,fp,800d6f8 <__divdf3+0x3c0>
 800d6e0:	1585883a 	add	r2,r2,r22
 800d6e4:	893fffc4 	addi	r4,r17,-1
 800d6e8:	15811d36 	bltu	r2,r22,800db60 <__divdf3+0x828>
 800d6ec:	17011c2e 	bgeu	r2,fp,800db60 <__divdf3+0x828>
 800d6f0:	8c7fff84 	addi	r17,r17,-2
 800d6f4:	1585883a 	add	r2,r2,r22
 800d6f8:	1739c83a 	sub	fp,r2,fp
 800d6fc:	a00b883a 	mov	r5,r20
 800d700:	e009883a 	mov	r4,fp
 800d704:	d8c00215 	stw	r3,8(sp)
 800d708:	800c9a80 	call	800c9a8 <__udivsi3>
 800d70c:	100b883a 	mov	r5,r2
 800d710:	9009883a 	mov	r4,r18
 800d714:	1021883a 	mov	r16,r2
 800d718:	800ca640 	call	800ca64 <__mulsi3>
 800d71c:	a00b883a 	mov	r5,r20
 800d720:	e009883a 	mov	r4,fp
 800d724:	d8800415 	stw	r2,16(sp)
 800d728:	800ca0c0 	call	800ca0c <__umodsi3>
 800d72c:	1004943a 	slli	r2,r2,16
 800d730:	da000417 	ldw	r8,16(sp)
 800d734:	bdffffcc 	andi	r23,r23,65535
 800d738:	b884b03a 	or	r2,r23,r2
 800d73c:	d8c00217 	ldw	r3,8(sp)
 800d740:	1200062e 	bgeu	r2,r8,800d75c <__divdf3+0x424>
 800d744:	1585883a 	add	r2,r2,r22
 800d748:	813fffc4 	addi	r4,r16,-1
 800d74c:	15810236 	bltu	r2,r22,800db58 <__divdf3+0x820>
 800d750:	1201012e 	bgeu	r2,r8,800db58 <__divdf3+0x820>
 800d754:	843fff84 	addi	r16,r16,-2
 800d758:	1585883a 	add	r2,r2,r22
 800d75c:	8822943a 	slli	r17,r17,16
 800d760:	d9800017 	ldw	r6,0(sp)
 800d764:	1211c83a 	sub	r8,r2,r8
 800d768:	8c22b03a 	or	r17,r17,r16
 800d76c:	373fffcc 	andi	fp,r6,65535
 800d770:	8abfffcc 	andi	r10,r17,65535
 800d774:	8820d43a 	srli	r16,r17,16
 800d778:	5009883a 	mov	r4,r10
 800d77c:	e00b883a 	mov	r5,fp
 800d780:	302ed43a 	srli	r23,r6,16
 800d784:	d8c00215 	stw	r3,8(sp)
 800d788:	da000415 	stw	r8,16(sp)
 800d78c:	da800115 	stw	r10,4(sp)
 800d790:	800ca640 	call	800ca64 <__mulsi3>
 800d794:	800b883a 	mov	r5,r16
 800d798:	e009883a 	mov	r4,fp
 800d79c:	d8800515 	stw	r2,20(sp)
 800d7a0:	800ca640 	call	800ca64 <__mulsi3>
 800d7a4:	8009883a 	mov	r4,r16
 800d7a8:	b80b883a 	mov	r5,r23
 800d7ac:	d8800315 	stw	r2,12(sp)
 800d7b0:	800ca640 	call	800ca64 <__mulsi3>
 800d7b4:	da800117 	ldw	r10,4(sp)
 800d7b8:	b80b883a 	mov	r5,r23
 800d7bc:	1021883a 	mov	r16,r2
 800d7c0:	5009883a 	mov	r4,r10
 800d7c4:	800ca640 	call	800ca64 <__mulsi3>
 800d7c8:	d9c00517 	ldw	r7,20(sp)
 800d7cc:	da400317 	ldw	r9,12(sp)
 800d7d0:	d8c00217 	ldw	r3,8(sp)
 800d7d4:	3808d43a 	srli	r4,r7,16
 800d7d8:	1245883a 	add	r2,r2,r9
 800d7dc:	da000417 	ldw	r8,16(sp)
 800d7e0:	2085883a 	add	r2,r4,r2
 800d7e4:	1240022e 	bgeu	r2,r9,800d7f0 <__divdf3+0x4b8>
 800d7e8:	01000074 	movhi	r4,1
 800d7ec:	8121883a 	add	r16,r16,r4
 800d7f0:	1008d43a 	srli	r4,r2,16
 800d7f4:	1004943a 	slli	r2,r2,16
 800d7f8:	39ffffcc 	andi	r7,r7,65535
 800d7fc:	2409883a 	add	r4,r4,r16
 800d800:	11c5883a 	add	r2,r2,r7
 800d804:	4100bb36 	bltu	r8,r4,800daf4 <__divdf3+0x7bc>
 800d808:	4100d726 	beq	r8,r4,800db68 <__divdf3+0x830>
 800d80c:	4109c83a 	sub	r4,r8,r4
 800d810:	a8a1c83a 	sub	r16,r21,r2
 800d814:	ac2b803a 	cmpltu	r21,r21,r16
 800d818:	256bc83a 	sub	r21,r4,r21
 800d81c:	b540d926 	beq	r22,r21,800db84 <__divdf3+0x84c>
 800d820:	a00b883a 	mov	r5,r20
 800d824:	a809883a 	mov	r4,r21
 800d828:	d8c00215 	stw	r3,8(sp)
 800d82c:	800c9a80 	call	800c9a8 <__udivsi3>
 800d830:	100b883a 	mov	r5,r2
 800d834:	9009883a 	mov	r4,r18
 800d838:	d8800515 	stw	r2,20(sp)
 800d83c:	800ca640 	call	800ca64 <__mulsi3>
 800d840:	a809883a 	mov	r4,r21
 800d844:	a00b883a 	mov	r5,r20
 800d848:	d8800415 	stw	r2,16(sp)
 800d84c:	800ca0c0 	call	800ca0c <__umodsi3>
 800d850:	1004943a 	slli	r2,r2,16
 800d854:	8008d43a 	srli	r4,r16,16
 800d858:	da000417 	ldw	r8,16(sp)
 800d85c:	d8c00217 	ldw	r3,8(sp)
 800d860:	2084b03a 	or	r2,r4,r2
 800d864:	d9c00517 	ldw	r7,20(sp)
 800d868:	1200062e 	bgeu	r2,r8,800d884 <__divdf3+0x54c>
 800d86c:	1585883a 	add	r2,r2,r22
 800d870:	393fffc4 	addi	r4,r7,-1
 800d874:	1580c536 	bltu	r2,r22,800db8c <__divdf3+0x854>
 800d878:	1200c42e 	bgeu	r2,r8,800db8c <__divdf3+0x854>
 800d87c:	39ffff84 	addi	r7,r7,-2
 800d880:	1585883a 	add	r2,r2,r22
 800d884:	122bc83a 	sub	r21,r2,r8
 800d888:	a00b883a 	mov	r5,r20
 800d88c:	a809883a 	mov	r4,r21
 800d890:	d8c00215 	stw	r3,8(sp)
 800d894:	d9c00515 	stw	r7,20(sp)
 800d898:	800c9a80 	call	800c9a8 <__udivsi3>
 800d89c:	9009883a 	mov	r4,r18
 800d8a0:	100b883a 	mov	r5,r2
 800d8a4:	d8800415 	stw	r2,16(sp)
 800d8a8:	800ca640 	call	800ca64 <__mulsi3>
 800d8ac:	a809883a 	mov	r4,r21
 800d8b0:	a00b883a 	mov	r5,r20
 800d8b4:	1025883a 	mov	r18,r2
 800d8b8:	800ca0c0 	call	800ca0c <__umodsi3>
 800d8bc:	1004943a 	slli	r2,r2,16
 800d8c0:	813fffcc 	andi	r4,r16,65535
 800d8c4:	d8c00217 	ldw	r3,8(sp)
 800d8c8:	20a0b03a 	or	r16,r4,r2
 800d8cc:	d9c00517 	ldw	r7,20(sp)
 800d8d0:	da000417 	ldw	r8,16(sp)
 800d8d4:	8480062e 	bgeu	r16,r18,800d8f0 <__divdf3+0x5b8>
 800d8d8:	85a1883a 	add	r16,r16,r22
 800d8dc:	40bfffc4 	addi	r2,r8,-1
 800d8e0:	8580ac36 	bltu	r16,r22,800db94 <__divdf3+0x85c>
 800d8e4:	8480ab2e 	bgeu	r16,r18,800db94 <__divdf3+0x85c>
 800d8e8:	423fff84 	addi	r8,r8,-2
 800d8ec:	85a1883a 	add	r16,r16,r22
 800d8f0:	3804943a 	slli	r2,r7,16
 800d8f4:	84a1c83a 	sub	r16,r16,r18
 800d8f8:	e009883a 	mov	r4,fp
 800d8fc:	1228b03a 	or	r20,r2,r8
 800d900:	a1ffffcc 	andi	r7,r20,65535
 800d904:	a024d43a 	srli	r18,r20,16
 800d908:	380b883a 	mov	r5,r7
 800d90c:	d8c00215 	stw	r3,8(sp)
 800d910:	d9c00515 	stw	r7,20(sp)
 800d914:	800ca640 	call	800ca64 <__mulsi3>
 800d918:	900b883a 	mov	r5,r18
 800d91c:	e009883a 	mov	r4,fp
 800d920:	102b883a 	mov	r21,r2
 800d924:	800ca640 	call	800ca64 <__mulsi3>
 800d928:	900b883a 	mov	r5,r18
 800d92c:	b809883a 	mov	r4,r23
 800d930:	1039883a 	mov	fp,r2
 800d934:	800ca640 	call	800ca64 <__mulsi3>
 800d938:	d9c00517 	ldw	r7,20(sp)
 800d93c:	b80b883a 	mov	r5,r23
 800d940:	1025883a 	mov	r18,r2
 800d944:	3809883a 	mov	r4,r7
 800d948:	800ca640 	call	800ca64 <__mulsi3>
 800d94c:	a808d43a 	srli	r4,r21,16
 800d950:	1705883a 	add	r2,r2,fp
 800d954:	d8c00217 	ldw	r3,8(sp)
 800d958:	2085883a 	add	r2,r4,r2
 800d95c:	1700022e 	bgeu	r2,fp,800d968 <__divdf3+0x630>
 800d960:	01000074 	movhi	r4,1
 800d964:	9125883a 	add	r18,r18,r4
 800d968:	1008d43a 	srli	r4,r2,16
 800d96c:	1004943a 	slli	r2,r2,16
 800d970:	ad7fffcc 	andi	r21,r21,65535
 800d974:	2489883a 	add	r4,r4,r18
 800d978:	1545883a 	add	r2,r2,r21
 800d97c:	81003836 	bltu	r16,r4,800da60 <__divdf3+0x728>
 800d980:	81003626 	beq	r16,r4,800da5c <__divdf3+0x724>
 800d984:	a5000054 	ori	r20,r20,1
 800d988:	1880ffc4 	addi	r2,r3,1023
 800d98c:	00bf2e0e 	bge	zero,r2,800d648 <__alt_data_end+0xfc00d648>
 800d990:	a10001cc 	andi	r4,r20,7
 800d994:	20000726 	beq	r4,zero,800d9b4 <__divdf3+0x67c>
 800d998:	a10003cc 	andi	r4,r20,15
 800d99c:	01400104 	movi	r5,4
 800d9a0:	21400426 	beq	r4,r5,800d9b4 <__divdf3+0x67c>
 800d9a4:	a149883a 	add	r4,r20,r5
 800d9a8:	2529803a 	cmpltu	r20,r4,r20
 800d9ac:	8d23883a 	add	r17,r17,r20
 800d9b0:	2029883a 	mov	r20,r4
 800d9b4:	8900402c 	andhi	r4,r17,256
 800d9b8:	20000426 	beq	r4,zero,800d9cc <__divdf3+0x694>
 800d9bc:	18810004 	addi	r2,r3,1024
 800d9c0:	00ffc034 	movhi	r3,65280
 800d9c4:	18ffffc4 	addi	r3,r3,-1
 800d9c8:	88e2703a 	and	r17,r17,r3
 800d9cc:	00c1ff84 	movi	r3,2046
 800d9d0:	18beb416 	blt	r3,r2,800d4a4 <__alt_data_end+0xfc00d4a4>
 800d9d4:	a028d0fa 	srli	r20,r20,3
 800d9d8:	882a977a 	slli	r21,r17,29
 800d9dc:	8820927a 	slli	r16,r17,9
 800d9e0:	1081ffcc 	andi	r2,r2,2047
 800d9e4:	ad2ab03a 	or	r21,r21,r20
 800d9e8:	8020d33a 	srli	r16,r16,12
 800d9ec:	9900004c 	andi	r4,r19,1
 800d9f0:	003eb006 	br	800d4b4 <__alt_data_end+0xfc00d4b4>
 800d9f4:	8080022c 	andhi	r2,r16,8
 800d9f8:	10001226 	beq	r2,zero,800da44 <__divdf3+0x70c>
 800d9fc:	8880022c 	andhi	r2,r17,8
 800da00:	1000101e 	bne	r2,zero,800da44 <__divdf3+0x70c>
 800da04:	00800434 	movhi	r2,16
 800da08:	8c000234 	orhi	r16,r17,8
 800da0c:	10bfffc4 	addi	r2,r2,-1
 800da10:	b809883a 	mov	r4,r23
 800da14:	80a0703a 	and	r16,r16,r2
 800da18:	a02b883a 	mov	r21,r20
 800da1c:	003f0806 	br	800d640 <__alt_data_end+0xfc00d640>
 800da20:	008000c4 	movi	r2,3
 800da24:	3880b126 	beq	r7,r2,800dcec <__divdf3+0x9b4>
 800da28:	00800044 	movi	r2,1
 800da2c:	38805b1e 	bne	r7,r2,800db9c <__divdf3+0x864>
 800da30:	e009883a 	mov	r4,fp
 800da34:	0005883a 	mov	r2,zero
 800da38:	0021883a 	mov	r16,zero
 800da3c:	002b883a 	mov	r21,zero
 800da40:	003e9c06 	br	800d4b4 <__alt_data_end+0xfc00d4b4>
 800da44:	00800434 	movhi	r2,16
 800da48:	84000234 	orhi	r16,r16,8
 800da4c:	10bfffc4 	addi	r2,r2,-1
 800da50:	b009883a 	mov	r4,r22
 800da54:	80a0703a 	and	r16,r16,r2
 800da58:	003ef906 	br	800d640 <__alt_data_end+0xfc00d640>
 800da5c:	103fca26 	beq	r2,zero,800d988 <__alt_data_end+0xfc00d988>
 800da60:	b421883a 	add	r16,r22,r16
 800da64:	a17fffc4 	addi	r5,r20,-1
 800da68:	8580422e 	bgeu	r16,r22,800db74 <__divdf3+0x83c>
 800da6c:	2829883a 	mov	r20,r5
 800da70:	813fc41e 	bne	r16,r4,800d984 <__alt_data_end+0xfc00d984>
 800da74:	d9800017 	ldw	r6,0(sp)
 800da78:	30bfc21e 	bne	r6,r2,800d984 <__alt_data_end+0xfc00d984>
 800da7c:	003fc206 	br	800d988 <__alt_data_end+0xfc00d988>
 800da80:	143ff604 	addi	r16,r2,-40
 800da84:	8c20983a 	sll	r16,r17,r16
 800da88:	002b883a 	mov	r21,zero
 800da8c:	003eb406 	br	800d560 <__alt_data_end+0xfc00d560>
 800da90:	d9800215 	stw	r6,8(sp)
 800da94:	d9c00515 	stw	r7,20(sp)
 800da98:	da000415 	stw	r8,16(sp)
 800da9c:	800f2cc0 	call	800f2cc <__clzsi2>
 800daa0:	10800804 	addi	r2,r2,32
 800daa4:	da000417 	ldw	r8,16(sp)
 800daa8:	d9c00517 	ldw	r7,20(sp)
 800daac:	d9800217 	ldw	r6,8(sp)
 800dab0:	003ea106 	br	800d538 <__alt_data_end+0xfc00d538>
 800dab4:	147ff604 	addi	r17,r2,-40
 800dab8:	3462983a 	sll	r17,r6,r17
 800dabc:	0029883a 	mov	r20,zero
 800dac0:	003ec906 	br	800d5e8 <__alt_data_end+0xfc00d5e8>
 800dac4:	3009883a 	mov	r4,r6
 800dac8:	d9400115 	stw	r5,4(sp)
 800dacc:	d9800215 	stw	r6,8(sp)
 800dad0:	da000415 	stw	r8,16(sp)
 800dad4:	da400315 	stw	r9,12(sp)
 800dad8:	800f2cc0 	call	800f2cc <__clzsi2>
 800dadc:	10800804 	addi	r2,r2,32
 800dae0:	da400317 	ldw	r9,12(sp)
 800dae4:	da000417 	ldw	r8,16(sp)
 800dae8:	d9800217 	ldw	r6,8(sp)
 800daec:	d9400117 	ldw	r5,4(sp)
 800daf0:	003eb306 	br	800d5c0 <__alt_data_end+0xfc00d5c0>
 800daf4:	d9800017 	ldw	r6,0(sp)
 800daf8:	a9ab883a 	add	r21,r21,r6
 800dafc:	a98b803a 	cmpltu	r5,r21,r6
 800db00:	2d8b883a 	add	r5,r5,r22
 800db04:	2a11883a 	add	r8,r5,r8
 800db08:	897fffc4 	addi	r5,r17,-1
 800db0c:	b2000c2e 	bgeu	r22,r8,800db40 <__divdf3+0x808>
 800db10:	41003f36 	bltu	r8,r4,800dc10 <__divdf3+0x8d8>
 800db14:	22006c26 	beq	r4,r8,800dcc8 <__divdf3+0x990>
 800db18:	4109c83a 	sub	r4,r8,r4
 800db1c:	2823883a 	mov	r17,r5
 800db20:	003f3b06 	br	800d810 <__alt_data_end+0xfc00d810>
 800db24:	ad3ed336 	bltu	r21,r20,800d674 <__alt_data_end+0xfc00d674>
 800db28:	a804d07a 	srli	r2,r21,1
 800db2c:	802e97fa 	slli	r23,r16,31
 800db30:	a82a97fa 	slli	r21,r21,31
 800db34:	8020d07a 	srli	r16,r16,1
 800db38:	b8aeb03a 	or	r23,r23,r2
 800db3c:	003ed006 	br	800d680 <__alt_data_end+0xfc00d680>
 800db40:	b23ff51e 	bne	r22,r8,800db18 <__alt_data_end+0xfc00db18>
 800db44:	d9800017 	ldw	r6,0(sp)
 800db48:	a9bff12e 	bgeu	r21,r6,800db10 <__alt_data_end+0xfc00db10>
 800db4c:	b109c83a 	sub	r4,r22,r4
 800db50:	2823883a 	mov	r17,r5
 800db54:	003f2e06 	br	800d810 <__alt_data_end+0xfc00d810>
 800db58:	2021883a 	mov	r16,r4
 800db5c:	003eff06 	br	800d75c <__alt_data_end+0xfc00d75c>
 800db60:	2023883a 	mov	r17,r4
 800db64:	003ee406 	br	800d6f8 <__alt_data_end+0xfc00d6f8>
 800db68:	a8bfe236 	bltu	r21,r2,800daf4 <__alt_data_end+0xfc00daf4>
 800db6c:	0009883a 	mov	r4,zero
 800db70:	003f2706 	br	800d810 <__alt_data_end+0xfc00d810>
 800db74:	81002d36 	bltu	r16,r4,800dc2c <__divdf3+0x8f4>
 800db78:	24005626 	beq	r4,r16,800dcd4 <__divdf3+0x99c>
 800db7c:	2829883a 	mov	r20,r5
 800db80:	003f8006 	br	800d984 <__alt_data_end+0xfc00d984>
 800db84:	053fffc4 	movi	r20,-1
 800db88:	003f7f06 	br	800d988 <__alt_data_end+0xfc00d988>
 800db8c:	200f883a 	mov	r7,r4
 800db90:	003f3c06 	br	800d884 <__alt_data_end+0xfc00d884>
 800db94:	1011883a 	mov	r8,r2
 800db98:	003f5506 	br	800d8f0 <__alt_data_end+0xfc00d8f0>
 800db9c:	e027883a 	mov	r19,fp
 800dba0:	003f7906 	br	800d988 <__alt_data_end+0xfc00d988>
 800dba4:	010007c4 	movi	r4,31
 800dba8:	20c02816 	blt	r4,r3,800dc4c <__divdf3+0x914>
 800dbac:	00800804 	movi	r2,32
 800dbb0:	10c5c83a 	sub	r2,r2,r3
 800dbb4:	888a983a 	sll	r5,r17,r2
 800dbb8:	a0c8d83a 	srl	r4,r20,r3
 800dbbc:	a084983a 	sll	r2,r20,r2
 800dbc0:	88e2d83a 	srl	r17,r17,r3
 800dbc4:	2906b03a 	or	r3,r5,r4
 800dbc8:	1004c03a 	cmpne	r2,r2,zero
 800dbcc:	1886b03a 	or	r3,r3,r2
 800dbd0:	188001cc 	andi	r2,r3,7
 800dbd4:	10000726 	beq	r2,zero,800dbf4 <__divdf3+0x8bc>
 800dbd8:	188003cc 	andi	r2,r3,15
 800dbdc:	01000104 	movi	r4,4
 800dbe0:	11000426 	beq	r2,r4,800dbf4 <__divdf3+0x8bc>
 800dbe4:	1805883a 	mov	r2,r3
 800dbe8:	10c00104 	addi	r3,r2,4
 800dbec:	1885803a 	cmpltu	r2,r3,r2
 800dbf0:	88a3883a 	add	r17,r17,r2
 800dbf4:	8880202c 	andhi	r2,r17,128
 800dbf8:	10002926 	beq	r2,zero,800dca0 <__divdf3+0x968>
 800dbfc:	9900004c 	andi	r4,r19,1
 800dc00:	00800044 	movi	r2,1
 800dc04:	0021883a 	mov	r16,zero
 800dc08:	002b883a 	mov	r21,zero
 800dc0c:	003e2906 	br	800d4b4 <__alt_data_end+0xfc00d4b4>
 800dc10:	d9800017 	ldw	r6,0(sp)
 800dc14:	8c7fff84 	addi	r17,r17,-2
 800dc18:	a9ab883a 	add	r21,r21,r6
 800dc1c:	a98b803a 	cmpltu	r5,r21,r6
 800dc20:	2d8b883a 	add	r5,r5,r22
 800dc24:	2a11883a 	add	r8,r5,r8
 800dc28:	003ef806 	br	800d80c <__alt_data_end+0xfc00d80c>
 800dc2c:	d9800017 	ldw	r6,0(sp)
 800dc30:	318f883a 	add	r7,r6,r6
 800dc34:	398b803a 	cmpltu	r5,r7,r6
 800dc38:	2d8d883a 	add	r6,r5,r22
 800dc3c:	81a1883a 	add	r16,r16,r6
 800dc40:	a17fff84 	addi	r5,r20,-2
 800dc44:	d9c00015 	stw	r7,0(sp)
 800dc48:	003f8806 	br	800da6c <__alt_data_end+0xfc00da6c>
 800dc4c:	013ff844 	movi	r4,-31
 800dc50:	2085c83a 	sub	r2,r4,r2
 800dc54:	8888d83a 	srl	r4,r17,r2
 800dc58:	00800804 	movi	r2,32
 800dc5c:	18802126 	beq	r3,r2,800dce4 <__divdf3+0x9ac>
 800dc60:	04001004 	movi	r16,64
 800dc64:	80c7c83a 	sub	r3,r16,r3
 800dc68:	88e0983a 	sll	r16,r17,r3
 800dc6c:	8504b03a 	or	r2,r16,r20
 800dc70:	1004c03a 	cmpne	r2,r2,zero
 800dc74:	2084b03a 	or	r2,r4,r2
 800dc78:	144001cc 	andi	r17,r2,7
 800dc7c:	88000d1e 	bne	r17,zero,800dcb4 <__divdf3+0x97c>
 800dc80:	0021883a 	mov	r16,zero
 800dc84:	102ad0fa 	srli	r21,r2,3
 800dc88:	9900004c 	andi	r4,r19,1
 800dc8c:	0005883a 	mov	r2,zero
 800dc90:	ac6ab03a 	or	r21,r21,r17
 800dc94:	003e0706 	br	800d4b4 <__alt_data_end+0xfc00d4b4>
 800dc98:	1007883a 	mov	r3,r2
 800dc9c:	0023883a 	mov	r17,zero
 800dca0:	8820927a 	slli	r16,r17,9
 800dca4:	1805883a 	mov	r2,r3
 800dca8:	8822977a 	slli	r17,r17,29
 800dcac:	8020d33a 	srli	r16,r16,12
 800dcb0:	003ff406 	br	800dc84 <__alt_data_end+0xfc00dc84>
 800dcb4:	10c003cc 	andi	r3,r2,15
 800dcb8:	01000104 	movi	r4,4
 800dcbc:	193ff626 	beq	r3,r4,800dc98 <__alt_data_end+0xfc00dc98>
 800dcc0:	0023883a 	mov	r17,zero
 800dcc4:	003fc806 	br	800dbe8 <__alt_data_end+0xfc00dbe8>
 800dcc8:	a8bfd136 	bltu	r21,r2,800dc10 <__alt_data_end+0xfc00dc10>
 800dccc:	2823883a 	mov	r17,r5
 800dcd0:	003fa606 	br	800db6c <__alt_data_end+0xfc00db6c>
 800dcd4:	d9800017 	ldw	r6,0(sp)
 800dcd8:	30bfd436 	bltu	r6,r2,800dc2c <__alt_data_end+0xfc00dc2c>
 800dcdc:	2829883a 	mov	r20,r5
 800dce0:	003f6406 	br	800da74 <__alt_data_end+0xfc00da74>
 800dce4:	0021883a 	mov	r16,zero
 800dce8:	003fe006 	br	800dc6c <__alt_data_end+0xfc00dc6c>
 800dcec:	00800434 	movhi	r2,16
 800dcf0:	8c000234 	orhi	r16,r17,8
 800dcf4:	10bfffc4 	addi	r2,r2,-1
 800dcf8:	e009883a 	mov	r4,fp
 800dcfc:	80a0703a 	and	r16,r16,r2
 800dd00:	a02b883a 	mov	r21,r20
 800dd04:	003e4e06 	br	800d640 <__alt_data_end+0xfc00d640>

0800dd08 <__eqdf2>:
 800dd08:	2804d53a 	srli	r2,r5,20
 800dd0c:	3806d53a 	srli	r3,r7,20
 800dd10:	02000434 	movhi	r8,16
 800dd14:	423fffc4 	addi	r8,r8,-1
 800dd18:	1081ffcc 	andi	r2,r2,2047
 800dd1c:	0281ffc4 	movi	r10,2047
 800dd20:	2a12703a 	and	r9,r5,r8
 800dd24:	18c1ffcc 	andi	r3,r3,2047
 800dd28:	3a10703a 	and	r8,r7,r8
 800dd2c:	280ad7fa 	srli	r5,r5,31
 800dd30:	380ed7fa 	srli	r7,r7,31
 800dd34:	12801026 	beq	r2,r10,800dd78 <__eqdf2+0x70>
 800dd38:	0281ffc4 	movi	r10,2047
 800dd3c:	1a800a26 	beq	r3,r10,800dd68 <__eqdf2+0x60>
 800dd40:	10c00226 	beq	r2,r3,800dd4c <__eqdf2+0x44>
 800dd44:	00800044 	movi	r2,1
 800dd48:	f800283a 	ret
 800dd4c:	4a3ffd1e 	bne	r9,r8,800dd44 <__alt_data_end+0xfc00dd44>
 800dd50:	21bffc1e 	bne	r4,r6,800dd44 <__alt_data_end+0xfc00dd44>
 800dd54:	29c00c26 	beq	r5,r7,800dd88 <__eqdf2+0x80>
 800dd58:	103ffa1e 	bne	r2,zero,800dd44 <__alt_data_end+0xfc00dd44>
 800dd5c:	2244b03a 	or	r2,r4,r9
 800dd60:	1004c03a 	cmpne	r2,r2,zero
 800dd64:	f800283a 	ret
 800dd68:	3214b03a 	or	r10,r6,r8
 800dd6c:	503ff426 	beq	r10,zero,800dd40 <__alt_data_end+0xfc00dd40>
 800dd70:	00800044 	movi	r2,1
 800dd74:	f800283a 	ret
 800dd78:	2254b03a 	or	r10,r4,r9
 800dd7c:	503fee26 	beq	r10,zero,800dd38 <__alt_data_end+0xfc00dd38>
 800dd80:	00800044 	movi	r2,1
 800dd84:	f800283a 	ret
 800dd88:	0005883a 	mov	r2,zero
 800dd8c:	f800283a 	ret

0800dd90 <__gedf2>:
 800dd90:	2804d53a 	srli	r2,r5,20
 800dd94:	3806d53a 	srli	r3,r7,20
 800dd98:	02000434 	movhi	r8,16
 800dd9c:	423fffc4 	addi	r8,r8,-1
 800dda0:	1081ffcc 	andi	r2,r2,2047
 800dda4:	0241ffc4 	movi	r9,2047
 800dda8:	2a14703a 	and	r10,r5,r8
 800ddac:	18c1ffcc 	andi	r3,r3,2047
 800ddb0:	3a10703a 	and	r8,r7,r8
 800ddb4:	280ad7fa 	srli	r5,r5,31
 800ddb8:	380ed7fa 	srli	r7,r7,31
 800ddbc:	12401d26 	beq	r2,r9,800de34 <__gedf2+0xa4>
 800ddc0:	0241ffc4 	movi	r9,2047
 800ddc4:	1a401226 	beq	r3,r9,800de10 <__gedf2+0x80>
 800ddc8:	1000081e 	bne	r2,zero,800ddec <__gedf2+0x5c>
 800ddcc:	2296b03a 	or	r11,r4,r10
 800ddd0:	5813003a 	cmpeq	r9,r11,zero
 800ddd4:	1800091e 	bne	r3,zero,800ddfc <__gedf2+0x6c>
 800ddd8:	3218b03a 	or	r12,r6,r8
 800dddc:	6000071e 	bne	r12,zero,800ddfc <__gedf2+0x6c>
 800dde0:	0005883a 	mov	r2,zero
 800dde4:	5800101e 	bne	r11,zero,800de28 <__gedf2+0x98>
 800dde8:	f800283a 	ret
 800ddec:	18000c1e 	bne	r3,zero,800de20 <__gedf2+0x90>
 800ddf0:	3212b03a 	or	r9,r6,r8
 800ddf4:	48000c26 	beq	r9,zero,800de28 <__gedf2+0x98>
 800ddf8:	0013883a 	mov	r9,zero
 800ddfc:	39c03fcc 	andi	r7,r7,255
 800de00:	48000826 	beq	r9,zero,800de24 <__gedf2+0x94>
 800de04:	38000926 	beq	r7,zero,800de2c <__gedf2+0x9c>
 800de08:	00800044 	movi	r2,1
 800de0c:	f800283a 	ret
 800de10:	3212b03a 	or	r9,r6,r8
 800de14:	483fec26 	beq	r9,zero,800ddc8 <__alt_data_end+0xfc00ddc8>
 800de18:	00bfff84 	movi	r2,-2
 800de1c:	f800283a 	ret
 800de20:	39c03fcc 	andi	r7,r7,255
 800de24:	29c00626 	beq	r5,r7,800de40 <__gedf2+0xb0>
 800de28:	283ff726 	beq	r5,zero,800de08 <__alt_data_end+0xfc00de08>
 800de2c:	00bfffc4 	movi	r2,-1
 800de30:	f800283a 	ret
 800de34:	2292b03a 	or	r9,r4,r10
 800de38:	483fe126 	beq	r9,zero,800ddc0 <__alt_data_end+0xfc00ddc0>
 800de3c:	003ff606 	br	800de18 <__alt_data_end+0xfc00de18>
 800de40:	18bff916 	blt	r3,r2,800de28 <__alt_data_end+0xfc00de28>
 800de44:	10c00316 	blt	r2,r3,800de54 <__gedf2+0xc4>
 800de48:	42bff736 	bltu	r8,r10,800de28 <__alt_data_end+0xfc00de28>
 800de4c:	52000326 	beq	r10,r8,800de5c <__gedf2+0xcc>
 800de50:	5200042e 	bgeu	r10,r8,800de64 <__gedf2+0xd4>
 800de54:	283fec1e 	bne	r5,zero,800de08 <__alt_data_end+0xfc00de08>
 800de58:	003ff406 	br	800de2c <__alt_data_end+0xfc00de2c>
 800de5c:	313ff236 	bltu	r6,r4,800de28 <__alt_data_end+0xfc00de28>
 800de60:	21bffc36 	bltu	r4,r6,800de54 <__alt_data_end+0xfc00de54>
 800de64:	0005883a 	mov	r2,zero
 800de68:	f800283a 	ret

0800de6c <__ledf2>:
 800de6c:	2804d53a 	srli	r2,r5,20
 800de70:	3810d53a 	srli	r8,r7,20
 800de74:	00c00434 	movhi	r3,16
 800de78:	18ffffc4 	addi	r3,r3,-1
 800de7c:	1081ffcc 	andi	r2,r2,2047
 800de80:	0241ffc4 	movi	r9,2047
 800de84:	28d4703a 	and	r10,r5,r3
 800de88:	4201ffcc 	andi	r8,r8,2047
 800de8c:	38c6703a 	and	r3,r7,r3
 800de90:	280ad7fa 	srli	r5,r5,31
 800de94:	380ed7fa 	srli	r7,r7,31
 800de98:	12401f26 	beq	r2,r9,800df18 <__ledf2+0xac>
 800de9c:	0241ffc4 	movi	r9,2047
 800dea0:	42401426 	beq	r8,r9,800def4 <__ledf2+0x88>
 800dea4:	1000091e 	bne	r2,zero,800decc <__ledf2+0x60>
 800dea8:	2296b03a 	or	r11,r4,r10
 800deac:	5813003a 	cmpeq	r9,r11,zero
 800deb0:	29403fcc 	andi	r5,r5,255
 800deb4:	40000a1e 	bne	r8,zero,800dee0 <__ledf2+0x74>
 800deb8:	30d8b03a 	or	r12,r6,r3
 800debc:	6000081e 	bne	r12,zero,800dee0 <__ledf2+0x74>
 800dec0:	0005883a 	mov	r2,zero
 800dec4:	5800111e 	bne	r11,zero,800df0c <__ledf2+0xa0>
 800dec8:	f800283a 	ret
 800decc:	29403fcc 	andi	r5,r5,255
 800ded0:	40000c1e 	bne	r8,zero,800df04 <__ledf2+0x98>
 800ded4:	30d2b03a 	or	r9,r6,r3
 800ded8:	48000c26 	beq	r9,zero,800df0c <__ledf2+0xa0>
 800dedc:	0013883a 	mov	r9,zero
 800dee0:	39c03fcc 	andi	r7,r7,255
 800dee4:	48000826 	beq	r9,zero,800df08 <__ledf2+0x9c>
 800dee8:	38001126 	beq	r7,zero,800df30 <__ledf2+0xc4>
 800deec:	00800044 	movi	r2,1
 800def0:	f800283a 	ret
 800def4:	30d2b03a 	or	r9,r6,r3
 800def8:	483fea26 	beq	r9,zero,800dea4 <__alt_data_end+0xfc00dea4>
 800defc:	00800084 	movi	r2,2
 800df00:	f800283a 	ret
 800df04:	39c03fcc 	andi	r7,r7,255
 800df08:	39400726 	beq	r7,r5,800df28 <__ledf2+0xbc>
 800df0c:	2800081e 	bne	r5,zero,800df30 <__ledf2+0xc4>
 800df10:	00800044 	movi	r2,1
 800df14:	f800283a 	ret
 800df18:	2292b03a 	or	r9,r4,r10
 800df1c:	483fdf26 	beq	r9,zero,800de9c <__alt_data_end+0xfc00de9c>
 800df20:	00800084 	movi	r2,2
 800df24:	f800283a 	ret
 800df28:	4080030e 	bge	r8,r2,800df38 <__ledf2+0xcc>
 800df2c:	383fef26 	beq	r7,zero,800deec <__alt_data_end+0xfc00deec>
 800df30:	00bfffc4 	movi	r2,-1
 800df34:	f800283a 	ret
 800df38:	123feb16 	blt	r2,r8,800dee8 <__alt_data_end+0xfc00dee8>
 800df3c:	1abff336 	bltu	r3,r10,800df0c <__alt_data_end+0xfc00df0c>
 800df40:	50c00326 	beq	r10,r3,800df50 <__ledf2+0xe4>
 800df44:	50c0042e 	bgeu	r10,r3,800df58 <__ledf2+0xec>
 800df48:	283fe81e 	bne	r5,zero,800deec <__alt_data_end+0xfc00deec>
 800df4c:	003ff806 	br	800df30 <__alt_data_end+0xfc00df30>
 800df50:	313fee36 	bltu	r6,r4,800df0c <__alt_data_end+0xfc00df0c>
 800df54:	21bffc36 	bltu	r4,r6,800df48 <__alt_data_end+0xfc00df48>
 800df58:	0005883a 	mov	r2,zero
 800df5c:	f800283a 	ret

0800df60 <__muldf3>:
 800df60:	deffee04 	addi	sp,sp,-72
 800df64:	dd000c15 	stw	r20,48(sp)
 800df68:	2828d53a 	srli	r20,r5,20
 800df6c:	ddc00f15 	stw	r23,60(sp)
 800df70:	282ed7fa 	srli	r23,r5,31
 800df74:	dc000815 	stw	r16,32(sp)
 800df78:	04000434 	movhi	r16,16
 800df7c:	dcc00b15 	stw	r19,44(sp)
 800df80:	843fffc4 	addi	r16,r16,-1
 800df84:	dfc01115 	stw	ra,68(sp)
 800df88:	df001015 	stw	fp,64(sp)
 800df8c:	dd800e15 	stw	r22,56(sp)
 800df90:	dd400d15 	stw	r21,52(sp)
 800df94:	dc800a15 	stw	r18,40(sp)
 800df98:	dc400915 	stw	r17,36(sp)
 800df9c:	a501ffcc 	andi	r20,r20,2047
 800dfa0:	2c20703a 	and	r16,r5,r16
 800dfa4:	b827883a 	mov	r19,r23
 800dfa8:	ba403fcc 	andi	r9,r23,255
 800dfac:	a0006026 	beq	r20,zero,800e130 <__muldf3+0x1d0>
 800dfb0:	0081ffc4 	movi	r2,2047
 800dfb4:	202d883a 	mov	r22,r4
 800dfb8:	a0803626 	beq	r20,r2,800e094 <__muldf3+0x134>
 800dfbc:	84000434 	orhi	r16,r16,16
 800dfc0:	200ad77a 	srli	r5,r4,29
 800dfc4:	800490fa 	slli	r2,r16,3
 800dfc8:	202c90fa 	slli	r22,r4,3
 800dfcc:	a53f0044 	addi	r20,r20,-1023
 800dfd0:	28a0b03a 	or	r16,r5,r2
 800dfd4:	002b883a 	mov	r21,zero
 800dfd8:	000b883a 	mov	r5,zero
 800dfdc:	3804d53a 	srli	r2,r7,20
 800dfe0:	3838d7fa 	srli	fp,r7,31
 800dfe4:	04400434 	movhi	r17,16
 800dfe8:	8c7fffc4 	addi	r17,r17,-1
 800dfec:	1081ffcc 	andi	r2,r2,2047
 800dff0:	3025883a 	mov	r18,r6
 800dff4:	3c62703a 	and	r17,r7,r17
 800dff8:	e2803fcc 	andi	r10,fp,255
 800dffc:	10006d26 	beq	r2,zero,800e1b4 <__muldf3+0x254>
 800e000:	00c1ffc4 	movi	r3,2047
 800e004:	10c06526 	beq	r2,r3,800e19c <__muldf3+0x23c>
 800e008:	8c400434 	orhi	r17,r17,16
 800e00c:	300ed77a 	srli	r7,r6,29
 800e010:	880690fa 	slli	r3,r17,3
 800e014:	302490fa 	slli	r18,r6,3
 800e018:	10bf0044 	addi	r2,r2,-1023
 800e01c:	38e2b03a 	or	r17,r7,r3
 800e020:	000f883a 	mov	r7,zero
 800e024:	a087883a 	add	r3,r20,r2
 800e028:	010003c4 	movi	r4,15
 800e02c:	3d44b03a 	or	r2,r7,r21
 800e030:	e5ccf03a 	xor	r6,fp,r23
 800e034:	1a000044 	addi	r8,r3,1
 800e038:	20809b36 	bltu	r4,r2,800e2a8 <__muldf3+0x348>
 800e03c:	100490ba 	slli	r2,r2,2
 800e040:	01020074 	movhi	r4,2049
 800e044:	21381504 	addi	r4,r4,-8108
 800e048:	1105883a 	add	r2,r2,r4
 800e04c:	10800017 	ldw	r2,0(r2)
 800e050:	1000683a 	jmp	r2
 800e054:	0800e2a8 	cmpgeui	zero,at,906
 800e058:	0800e0b4 	orhi	zero,at,898
 800e05c:	0800e0b4 	orhi	zero,at,898
 800e060:	0800e0b0 	cmpltui	zero,at,898
 800e064:	0800e284 	addi	zero,at,906
 800e068:	0800e284 	addi	zero,at,906
 800e06c:	0800e26c 	andhi	zero,at,905
 800e070:	0800e0b0 	cmpltui	zero,at,898
 800e074:	0800e284 	addi	zero,at,906
 800e078:	0800e26c 	andhi	zero,at,905
 800e07c:	0800e284 	addi	zero,at,906
 800e080:	0800e0b0 	cmpltui	zero,at,898
 800e084:	0800e294 	ori	zero,at,906
 800e088:	0800e294 	ori	zero,at,906
 800e08c:	0800e294 	ori	zero,at,906
 800e090:	0800e5f4 	orhi	zero,at,919
 800e094:	2404b03a 	or	r2,r4,r16
 800e098:	1000711e 	bne	r2,zero,800e260 <__muldf3+0x300>
 800e09c:	05400204 	movi	r21,8
 800e0a0:	0021883a 	mov	r16,zero
 800e0a4:	002d883a 	mov	r22,zero
 800e0a8:	01400084 	movi	r5,2
 800e0ac:	003fcb06 	br	800dfdc <__alt_data_end+0xfc00dfdc>
 800e0b0:	500d883a 	mov	r6,r10
 800e0b4:	00800084 	movi	r2,2
 800e0b8:	38805926 	beq	r7,r2,800e220 <__muldf3+0x2c0>
 800e0bc:	008000c4 	movi	r2,3
 800e0c0:	3881bb26 	beq	r7,r2,800e7b0 <__muldf3+0x850>
 800e0c4:	00800044 	movi	r2,1
 800e0c8:	3881961e 	bne	r7,r2,800e724 <__muldf3+0x7c4>
 800e0cc:	3027883a 	mov	r19,r6
 800e0d0:	0005883a 	mov	r2,zero
 800e0d4:	0021883a 	mov	r16,zero
 800e0d8:	002d883a 	mov	r22,zero
 800e0dc:	1004953a 	slli	r2,r2,20
 800e0e0:	98c03fcc 	andi	r3,r19,255
 800e0e4:	04400434 	movhi	r17,16
 800e0e8:	8c7fffc4 	addi	r17,r17,-1
 800e0ec:	180697fa 	slli	r3,r3,31
 800e0f0:	8460703a 	and	r16,r16,r17
 800e0f4:	80a0b03a 	or	r16,r16,r2
 800e0f8:	80c6b03a 	or	r3,r16,r3
 800e0fc:	b005883a 	mov	r2,r22
 800e100:	dfc01117 	ldw	ra,68(sp)
 800e104:	df001017 	ldw	fp,64(sp)
 800e108:	ddc00f17 	ldw	r23,60(sp)
 800e10c:	dd800e17 	ldw	r22,56(sp)
 800e110:	dd400d17 	ldw	r21,52(sp)
 800e114:	dd000c17 	ldw	r20,48(sp)
 800e118:	dcc00b17 	ldw	r19,44(sp)
 800e11c:	dc800a17 	ldw	r18,40(sp)
 800e120:	dc400917 	ldw	r17,36(sp)
 800e124:	dc000817 	ldw	r16,32(sp)
 800e128:	dec01204 	addi	sp,sp,72
 800e12c:	f800283a 	ret
 800e130:	2404b03a 	or	r2,r4,r16
 800e134:	202b883a 	mov	r21,r4
 800e138:	10004426 	beq	r2,zero,800e24c <__muldf3+0x2ec>
 800e13c:	80015126 	beq	r16,zero,800e684 <__muldf3+0x724>
 800e140:	8009883a 	mov	r4,r16
 800e144:	d9800715 	stw	r6,28(sp)
 800e148:	d9c00215 	stw	r7,8(sp)
 800e14c:	da400415 	stw	r9,16(sp)
 800e150:	800f2cc0 	call	800f2cc <__clzsi2>
 800e154:	d9800717 	ldw	r6,28(sp)
 800e158:	d9c00217 	ldw	r7,8(sp)
 800e15c:	da400417 	ldw	r9,16(sp)
 800e160:	113ffd44 	addi	r4,r2,-11
 800e164:	00c00704 	movi	r3,28
 800e168:	19014216 	blt	r3,r4,800e674 <__muldf3+0x714>
 800e16c:	00c00744 	movi	r3,29
 800e170:	15bffe04 	addi	r22,r2,-8
 800e174:	1907c83a 	sub	r3,r3,r4
 800e178:	85a0983a 	sll	r16,r16,r22
 800e17c:	a8c6d83a 	srl	r3,r21,r3
 800e180:	adac983a 	sll	r22,r21,r22
 800e184:	1c20b03a 	or	r16,r3,r16
 800e188:	1080fcc4 	addi	r2,r2,1011
 800e18c:	00a9c83a 	sub	r20,zero,r2
 800e190:	002b883a 	mov	r21,zero
 800e194:	000b883a 	mov	r5,zero
 800e198:	003f9006 	br	800dfdc <__alt_data_end+0xfc00dfdc>
 800e19c:	3446b03a 	or	r3,r6,r17
 800e1a0:	1800281e 	bne	r3,zero,800e244 <__muldf3+0x2e4>
 800e1a4:	0023883a 	mov	r17,zero
 800e1a8:	0025883a 	mov	r18,zero
 800e1ac:	01c00084 	movi	r7,2
 800e1b0:	003f9c06 	br	800e024 <__alt_data_end+0xfc00e024>
 800e1b4:	3446b03a 	or	r3,r6,r17
 800e1b8:	18001e26 	beq	r3,zero,800e234 <__muldf3+0x2d4>
 800e1bc:	88012126 	beq	r17,zero,800e644 <__muldf3+0x6e4>
 800e1c0:	8809883a 	mov	r4,r17
 800e1c4:	d9400215 	stw	r5,8(sp)
 800e1c8:	d9800715 	stw	r6,28(sp)
 800e1cc:	da400415 	stw	r9,16(sp)
 800e1d0:	da800315 	stw	r10,12(sp)
 800e1d4:	800f2cc0 	call	800f2cc <__clzsi2>
 800e1d8:	d9400217 	ldw	r5,8(sp)
 800e1dc:	d9800717 	ldw	r6,28(sp)
 800e1e0:	da400417 	ldw	r9,16(sp)
 800e1e4:	da800317 	ldw	r10,12(sp)
 800e1e8:	113ffd44 	addi	r4,r2,-11
 800e1ec:	00c00704 	movi	r3,28
 800e1f0:	19011016 	blt	r3,r4,800e634 <__muldf3+0x6d4>
 800e1f4:	00c00744 	movi	r3,29
 800e1f8:	14bffe04 	addi	r18,r2,-8
 800e1fc:	1907c83a 	sub	r3,r3,r4
 800e200:	8ca2983a 	sll	r17,r17,r18
 800e204:	30c6d83a 	srl	r3,r6,r3
 800e208:	34a4983a 	sll	r18,r6,r18
 800e20c:	1c62b03a 	or	r17,r3,r17
 800e210:	1080fcc4 	addi	r2,r2,1011
 800e214:	0085c83a 	sub	r2,zero,r2
 800e218:	000f883a 	mov	r7,zero
 800e21c:	003f8106 	br	800e024 <__alt_data_end+0xfc00e024>
 800e220:	3027883a 	mov	r19,r6
 800e224:	0081ffc4 	movi	r2,2047
 800e228:	0021883a 	mov	r16,zero
 800e22c:	002d883a 	mov	r22,zero
 800e230:	003faa06 	br	800e0dc <__alt_data_end+0xfc00e0dc>
 800e234:	0023883a 	mov	r17,zero
 800e238:	0025883a 	mov	r18,zero
 800e23c:	01c00044 	movi	r7,1
 800e240:	003f7806 	br	800e024 <__alt_data_end+0xfc00e024>
 800e244:	01c000c4 	movi	r7,3
 800e248:	003f7606 	br	800e024 <__alt_data_end+0xfc00e024>
 800e24c:	05400104 	movi	r21,4
 800e250:	0021883a 	mov	r16,zero
 800e254:	002d883a 	mov	r22,zero
 800e258:	01400044 	movi	r5,1
 800e25c:	003f5f06 	br	800dfdc <__alt_data_end+0xfc00dfdc>
 800e260:	05400304 	movi	r21,12
 800e264:	014000c4 	movi	r5,3
 800e268:	003f5c06 	br	800dfdc <__alt_data_end+0xfc00dfdc>
 800e26c:	04000434 	movhi	r16,16
 800e270:	0027883a 	mov	r19,zero
 800e274:	843fffc4 	addi	r16,r16,-1
 800e278:	05bfffc4 	movi	r22,-1
 800e27c:	0081ffc4 	movi	r2,2047
 800e280:	003f9606 	br	800e0dc <__alt_data_end+0xfc00e0dc>
 800e284:	8023883a 	mov	r17,r16
 800e288:	b025883a 	mov	r18,r22
 800e28c:	280f883a 	mov	r7,r5
 800e290:	003f8806 	br	800e0b4 <__alt_data_end+0xfc00e0b4>
 800e294:	8023883a 	mov	r17,r16
 800e298:	b025883a 	mov	r18,r22
 800e29c:	480d883a 	mov	r6,r9
 800e2a0:	280f883a 	mov	r7,r5
 800e2a4:	003f8306 	br	800e0b4 <__alt_data_end+0xfc00e0b4>
 800e2a8:	b026d43a 	srli	r19,r22,16
 800e2ac:	902ed43a 	srli	r23,r18,16
 800e2b0:	b5bfffcc 	andi	r22,r22,65535
 800e2b4:	94bfffcc 	andi	r18,r18,65535
 800e2b8:	b00b883a 	mov	r5,r22
 800e2bc:	9009883a 	mov	r4,r18
 800e2c0:	d8c00515 	stw	r3,20(sp)
 800e2c4:	d9800715 	stw	r6,28(sp)
 800e2c8:	da000615 	stw	r8,24(sp)
 800e2cc:	800ca640 	call	800ca64 <__mulsi3>
 800e2d0:	980b883a 	mov	r5,r19
 800e2d4:	9009883a 	mov	r4,r18
 800e2d8:	1029883a 	mov	r20,r2
 800e2dc:	800ca640 	call	800ca64 <__mulsi3>
 800e2e0:	b80b883a 	mov	r5,r23
 800e2e4:	9809883a 	mov	r4,r19
 800e2e8:	102b883a 	mov	r21,r2
 800e2ec:	800ca640 	call	800ca64 <__mulsi3>
 800e2f0:	b809883a 	mov	r4,r23
 800e2f4:	b00b883a 	mov	r5,r22
 800e2f8:	1039883a 	mov	fp,r2
 800e2fc:	800ca640 	call	800ca64 <__mulsi3>
 800e300:	a008d43a 	srli	r4,r20,16
 800e304:	1545883a 	add	r2,r2,r21
 800e308:	d8c00517 	ldw	r3,20(sp)
 800e30c:	2085883a 	add	r2,r4,r2
 800e310:	d9800717 	ldw	r6,28(sp)
 800e314:	da000617 	ldw	r8,24(sp)
 800e318:	1540022e 	bgeu	r2,r21,800e324 <__muldf3+0x3c4>
 800e31c:	01000074 	movhi	r4,1
 800e320:	e139883a 	add	fp,fp,r4
 800e324:	100e943a 	slli	r7,r2,16
 800e328:	1004d43a 	srli	r2,r2,16
 800e32c:	882ad43a 	srli	r21,r17,16
 800e330:	a53fffcc 	andi	r20,r20,65535
 800e334:	8c7fffcc 	andi	r17,r17,65535
 800e338:	3d29883a 	add	r20,r7,r20
 800e33c:	b00b883a 	mov	r5,r22
 800e340:	8809883a 	mov	r4,r17
 800e344:	d8c00515 	stw	r3,20(sp)
 800e348:	d9800715 	stw	r6,28(sp)
 800e34c:	da000615 	stw	r8,24(sp)
 800e350:	dd000115 	stw	r20,4(sp)
 800e354:	d8800015 	stw	r2,0(sp)
 800e358:	800ca640 	call	800ca64 <__mulsi3>
 800e35c:	980b883a 	mov	r5,r19
 800e360:	8809883a 	mov	r4,r17
 800e364:	d8800215 	stw	r2,8(sp)
 800e368:	800ca640 	call	800ca64 <__mulsi3>
 800e36c:	9809883a 	mov	r4,r19
 800e370:	a80b883a 	mov	r5,r21
 800e374:	1029883a 	mov	r20,r2
 800e378:	800ca640 	call	800ca64 <__mulsi3>
 800e37c:	b00b883a 	mov	r5,r22
 800e380:	a809883a 	mov	r4,r21
 800e384:	d8800415 	stw	r2,16(sp)
 800e388:	800ca640 	call	800ca64 <__mulsi3>
 800e38c:	d9c00217 	ldw	r7,8(sp)
 800e390:	1505883a 	add	r2,r2,r20
 800e394:	d8c00517 	ldw	r3,20(sp)
 800e398:	3826d43a 	srli	r19,r7,16
 800e39c:	d9800717 	ldw	r6,28(sp)
 800e3a0:	da000617 	ldw	r8,24(sp)
 800e3a4:	9885883a 	add	r2,r19,r2
 800e3a8:	da400417 	ldw	r9,16(sp)
 800e3ac:	1500022e 	bgeu	r2,r20,800e3b8 <__muldf3+0x458>
 800e3b0:	01000074 	movhi	r4,1
 800e3b4:	4913883a 	add	r9,r9,r4
 800e3b8:	1028d43a 	srli	r20,r2,16
 800e3bc:	1004943a 	slli	r2,r2,16
 800e3c0:	802cd43a 	srli	r22,r16,16
 800e3c4:	843fffcc 	andi	r16,r16,65535
 800e3c8:	3cffffcc 	andi	r19,r7,65535
 800e3cc:	9009883a 	mov	r4,r18
 800e3d0:	800b883a 	mov	r5,r16
 800e3d4:	a269883a 	add	r20,r20,r9
 800e3d8:	d8c00515 	stw	r3,20(sp)
 800e3dc:	d9800715 	stw	r6,28(sp)
 800e3e0:	da000615 	stw	r8,24(sp)
 800e3e4:	14e7883a 	add	r19,r2,r19
 800e3e8:	800ca640 	call	800ca64 <__mulsi3>
 800e3ec:	9009883a 	mov	r4,r18
 800e3f0:	b00b883a 	mov	r5,r22
 800e3f4:	d8800315 	stw	r2,12(sp)
 800e3f8:	800ca640 	call	800ca64 <__mulsi3>
 800e3fc:	b809883a 	mov	r4,r23
 800e400:	b00b883a 	mov	r5,r22
 800e404:	d8800215 	stw	r2,8(sp)
 800e408:	800ca640 	call	800ca64 <__mulsi3>
 800e40c:	b80b883a 	mov	r5,r23
 800e410:	8009883a 	mov	r4,r16
 800e414:	d8800415 	stw	r2,16(sp)
 800e418:	800ca640 	call	800ca64 <__mulsi3>
 800e41c:	da800317 	ldw	r10,12(sp)
 800e420:	d9c00217 	ldw	r7,8(sp)
 800e424:	d9000017 	ldw	r4,0(sp)
 800e428:	502ed43a 	srli	r23,r10,16
 800e42c:	11c5883a 	add	r2,r2,r7
 800e430:	24e5883a 	add	r18,r4,r19
 800e434:	b885883a 	add	r2,r23,r2
 800e438:	d8c00517 	ldw	r3,20(sp)
 800e43c:	d9800717 	ldw	r6,28(sp)
 800e440:	da000617 	ldw	r8,24(sp)
 800e444:	da400417 	ldw	r9,16(sp)
 800e448:	11c0022e 	bgeu	r2,r7,800e454 <__muldf3+0x4f4>
 800e44c:	01000074 	movhi	r4,1
 800e450:	4913883a 	add	r9,r9,r4
 800e454:	100ed43a 	srli	r7,r2,16
 800e458:	1004943a 	slli	r2,r2,16
 800e45c:	55ffffcc 	andi	r23,r10,65535
 800e460:	3a53883a 	add	r9,r7,r9
 800e464:	8809883a 	mov	r4,r17
 800e468:	800b883a 	mov	r5,r16
 800e46c:	d8c00515 	stw	r3,20(sp)
 800e470:	d9800715 	stw	r6,28(sp)
 800e474:	da000615 	stw	r8,24(sp)
 800e478:	da400415 	stw	r9,16(sp)
 800e47c:	15ef883a 	add	r23,r2,r23
 800e480:	800ca640 	call	800ca64 <__mulsi3>
 800e484:	8809883a 	mov	r4,r17
 800e488:	b00b883a 	mov	r5,r22
 800e48c:	d8800215 	stw	r2,8(sp)
 800e490:	800ca640 	call	800ca64 <__mulsi3>
 800e494:	b00b883a 	mov	r5,r22
 800e498:	a809883a 	mov	r4,r21
 800e49c:	d8800315 	stw	r2,12(sp)
 800e4a0:	800ca640 	call	800ca64 <__mulsi3>
 800e4a4:	8009883a 	mov	r4,r16
 800e4a8:	a80b883a 	mov	r5,r21
 800e4ac:	1023883a 	mov	r17,r2
 800e4b0:	800ca640 	call	800ca64 <__mulsi3>
 800e4b4:	d9c00217 	ldw	r7,8(sp)
 800e4b8:	da800317 	ldw	r10,12(sp)
 800e4bc:	d8c00517 	ldw	r3,20(sp)
 800e4c0:	3808d43a 	srli	r4,r7,16
 800e4c4:	1285883a 	add	r2,r2,r10
 800e4c8:	d9800717 	ldw	r6,28(sp)
 800e4cc:	2085883a 	add	r2,r4,r2
 800e4d0:	da000617 	ldw	r8,24(sp)
 800e4d4:	da400417 	ldw	r9,16(sp)
 800e4d8:	1280022e 	bgeu	r2,r10,800e4e4 <__muldf3+0x584>
 800e4dc:	01000074 	movhi	r4,1
 800e4e0:	8923883a 	add	r17,r17,r4
 800e4e4:	1008943a 	slli	r4,r2,16
 800e4e8:	39ffffcc 	andi	r7,r7,65535
 800e4ec:	e4b9883a 	add	fp,fp,r18
 800e4f0:	21cf883a 	add	r7,r4,r7
 800e4f4:	e4e7803a 	cmpltu	r19,fp,r19
 800e4f8:	3d0f883a 	add	r7,r7,r20
 800e4fc:	bf39883a 	add	fp,r23,fp
 800e500:	99c9883a 	add	r4,r19,r7
 800e504:	e5ef803a 	cmpltu	r23,fp,r23
 800e508:	490b883a 	add	r5,r9,r4
 800e50c:	1004d43a 	srli	r2,r2,16
 800e510:	b965883a 	add	r18,r23,r5
 800e514:	24c9803a 	cmpltu	r4,r4,r19
 800e518:	3d29803a 	cmpltu	r20,r7,r20
 800e51c:	a128b03a 	or	r20,r20,r4
 800e520:	95ef803a 	cmpltu	r23,r18,r23
 800e524:	2a53803a 	cmpltu	r9,r5,r9
 800e528:	a0a9883a 	add	r20,r20,r2
 800e52c:	4deeb03a 	or	r23,r9,r23
 800e530:	a5ef883a 	add	r23,r20,r23
 800e534:	bc63883a 	add	r17,r23,r17
 800e538:	e004927a 	slli	r2,fp,9
 800e53c:	d9000117 	ldw	r4,4(sp)
 800e540:	882e927a 	slli	r23,r17,9
 800e544:	9022d5fa 	srli	r17,r18,23
 800e548:	e038d5fa 	srli	fp,fp,23
 800e54c:	1104b03a 	or	r2,r2,r4
 800e550:	9024927a 	slli	r18,r18,9
 800e554:	1004c03a 	cmpne	r2,r2,zero
 800e558:	bc62b03a 	or	r17,r23,r17
 800e55c:	1738b03a 	or	fp,r2,fp
 800e560:	8880402c 	andhi	r2,r17,256
 800e564:	e4a4b03a 	or	r18,fp,r18
 800e568:	10000726 	beq	r2,zero,800e588 <__muldf3+0x628>
 800e56c:	9006d07a 	srli	r3,r18,1
 800e570:	880497fa 	slli	r2,r17,31
 800e574:	9480004c 	andi	r18,r18,1
 800e578:	8822d07a 	srli	r17,r17,1
 800e57c:	1ca4b03a 	or	r18,r3,r18
 800e580:	14a4b03a 	or	r18,r2,r18
 800e584:	4007883a 	mov	r3,r8
 800e588:	1880ffc4 	addi	r2,r3,1023
 800e58c:	0080460e 	bge	zero,r2,800e6a8 <__muldf3+0x748>
 800e590:	910001cc 	andi	r4,r18,7
 800e594:	20000726 	beq	r4,zero,800e5b4 <__muldf3+0x654>
 800e598:	910003cc 	andi	r4,r18,15
 800e59c:	01400104 	movi	r5,4
 800e5a0:	21400426 	beq	r4,r5,800e5b4 <__muldf3+0x654>
 800e5a4:	9149883a 	add	r4,r18,r5
 800e5a8:	24a5803a 	cmpltu	r18,r4,r18
 800e5ac:	8ca3883a 	add	r17,r17,r18
 800e5b0:	2025883a 	mov	r18,r4
 800e5b4:	8900402c 	andhi	r4,r17,256
 800e5b8:	20000426 	beq	r4,zero,800e5cc <__muldf3+0x66c>
 800e5bc:	18810004 	addi	r2,r3,1024
 800e5c0:	00ffc034 	movhi	r3,65280
 800e5c4:	18ffffc4 	addi	r3,r3,-1
 800e5c8:	88e2703a 	and	r17,r17,r3
 800e5cc:	00c1ff84 	movi	r3,2046
 800e5d0:	18bf1316 	blt	r3,r2,800e220 <__alt_data_end+0xfc00e220>
 800e5d4:	882c977a 	slli	r22,r17,29
 800e5d8:	9024d0fa 	srli	r18,r18,3
 800e5dc:	8822927a 	slli	r17,r17,9
 800e5e0:	1081ffcc 	andi	r2,r2,2047
 800e5e4:	b4acb03a 	or	r22,r22,r18
 800e5e8:	8820d33a 	srli	r16,r17,12
 800e5ec:	3027883a 	mov	r19,r6
 800e5f0:	003eba06 	br	800e0dc <__alt_data_end+0xfc00e0dc>
 800e5f4:	8080022c 	andhi	r2,r16,8
 800e5f8:	10000926 	beq	r2,zero,800e620 <__muldf3+0x6c0>
 800e5fc:	8880022c 	andhi	r2,r17,8
 800e600:	1000071e 	bne	r2,zero,800e620 <__muldf3+0x6c0>
 800e604:	00800434 	movhi	r2,16
 800e608:	8c000234 	orhi	r16,r17,8
 800e60c:	10bfffc4 	addi	r2,r2,-1
 800e610:	e027883a 	mov	r19,fp
 800e614:	80a0703a 	and	r16,r16,r2
 800e618:	902d883a 	mov	r22,r18
 800e61c:	003f1706 	br	800e27c <__alt_data_end+0xfc00e27c>
 800e620:	00800434 	movhi	r2,16
 800e624:	84000234 	orhi	r16,r16,8
 800e628:	10bfffc4 	addi	r2,r2,-1
 800e62c:	80a0703a 	and	r16,r16,r2
 800e630:	003f1206 	br	800e27c <__alt_data_end+0xfc00e27c>
 800e634:	147ff604 	addi	r17,r2,-40
 800e638:	3462983a 	sll	r17,r6,r17
 800e63c:	0025883a 	mov	r18,zero
 800e640:	003ef306 	br	800e210 <__alt_data_end+0xfc00e210>
 800e644:	3009883a 	mov	r4,r6
 800e648:	d9400215 	stw	r5,8(sp)
 800e64c:	d9800715 	stw	r6,28(sp)
 800e650:	da400415 	stw	r9,16(sp)
 800e654:	da800315 	stw	r10,12(sp)
 800e658:	800f2cc0 	call	800f2cc <__clzsi2>
 800e65c:	10800804 	addi	r2,r2,32
 800e660:	da800317 	ldw	r10,12(sp)
 800e664:	da400417 	ldw	r9,16(sp)
 800e668:	d9800717 	ldw	r6,28(sp)
 800e66c:	d9400217 	ldw	r5,8(sp)
 800e670:	003edd06 	br	800e1e8 <__alt_data_end+0xfc00e1e8>
 800e674:	143ff604 	addi	r16,r2,-40
 800e678:	ac20983a 	sll	r16,r21,r16
 800e67c:	002d883a 	mov	r22,zero
 800e680:	003ec106 	br	800e188 <__alt_data_end+0xfc00e188>
 800e684:	d9800715 	stw	r6,28(sp)
 800e688:	d9c00215 	stw	r7,8(sp)
 800e68c:	da400415 	stw	r9,16(sp)
 800e690:	800f2cc0 	call	800f2cc <__clzsi2>
 800e694:	10800804 	addi	r2,r2,32
 800e698:	da400417 	ldw	r9,16(sp)
 800e69c:	d9c00217 	ldw	r7,8(sp)
 800e6a0:	d9800717 	ldw	r6,28(sp)
 800e6a4:	003eae06 	br	800e160 <__alt_data_end+0xfc00e160>
 800e6a8:	00c00044 	movi	r3,1
 800e6ac:	1887c83a 	sub	r3,r3,r2
 800e6b0:	01000e04 	movi	r4,56
 800e6b4:	20fe8516 	blt	r4,r3,800e0cc <__alt_data_end+0xfc00e0cc>
 800e6b8:	010007c4 	movi	r4,31
 800e6bc:	20c01b16 	blt	r4,r3,800e72c <__muldf3+0x7cc>
 800e6c0:	00800804 	movi	r2,32
 800e6c4:	10c5c83a 	sub	r2,r2,r3
 800e6c8:	888a983a 	sll	r5,r17,r2
 800e6cc:	90c8d83a 	srl	r4,r18,r3
 800e6d0:	9084983a 	sll	r2,r18,r2
 800e6d4:	88e2d83a 	srl	r17,r17,r3
 800e6d8:	2906b03a 	or	r3,r5,r4
 800e6dc:	1004c03a 	cmpne	r2,r2,zero
 800e6e0:	1886b03a 	or	r3,r3,r2
 800e6e4:	188001cc 	andi	r2,r3,7
 800e6e8:	10000726 	beq	r2,zero,800e708 <__muldf3+0x7a8>
 800e6ec:	188003cc 	andi	r2,r3,15
 800e6f0:	01000104 	movi	r4,4
 800e6f4:	11000426 	beq	r2,r4,800e708 <__muldf3+0x7a8>
 800e6f8:	1805883a 	mov	r2,r3
 800e6fc:	10c00104 	addi	r3,r2,4
 800e700:	1885803a 	cmpltu	r2,r3,r2
 800e704:	88a3883a 	add	r17,r17,r2
 800e708:	8880202c 	andhi	r2,r17,128
 800e70c:	10001c26 	beq	r2,zero,800e780 <__muldf3+0x820>
 800e710:	3027883a 	mov	r19,r6
 800e714:	00800044 	movi	r2,1
 800e718:	0021883a 	mov	r16,zero
 800e71c:	002d883a 	mov	r22,zero
 800e720:	003e6e06 	br	800e0dc <__alt_data_end+0xfc00e0dc>
 800e724:	4007883a 	mov	r3,r8
 800e728:	003f9706 	br	800e588 <__alt_data_end+0xfc00e588>
 800e72c:	017ff844 	movi	r5,-31
 800e730:	2885c83a 	sub	r2,r5,r2
 800e734:	888ad83a 	srl	r5,r17,r2
 800e738:	00800804 	movi	r2,32
 800e73c:	18801a26 	beq	r3,r2,800e7a8 <__muldf3+0x848>
 800e740:	01001004 	movi	r4,64
 800e744:	20c7c83a 	sub	r3,r4,r3
 800e748:	88e2983a 	sll	r17,r17,r3
 800e74c:	8ca4b03a 	or	r18,r17,r18
 800e750:	9004c03a 	cmpne	r2,r18,zero
 800e754:	2884b03a 	or	r2,r5,r2
 800e758:	144001cc 	andi	r17,r2,7
 800e75c:	88000d1e 	bne	r17,zero,800e794 <__muldf3+0x834>
 800e760:	0021883a 	mov	r16,zero
 800e764:	102cd0fa 	srli	r22,r2,3
 800e768:	3027883a 	mov	r19,r6
 800e76c:	0005883a 	mov	r2,zero
 800e770:	b46cb03a 	or	r22,r22,r17
 800e774:	003e5906 	br	800e0dc <__alt_data_end+0xfc00e0dc>
 800e778:	1007883a 	mov	r3,r2
 800e77c:	0023883a 	mov	r17,zero
 800e780:	8820927a 	slli	r16,r17,9
 800e784:	1805883a 	mov	r2,r3
 800e788:	8822977a 	slli	r17,r17,29
 800e78c:	8020d33a 	srli	r16,r16,12
 800e790:	003ff406 	br	800e764 <__alt_data_end+0xfc00e764>
 800e794:	10c003cc 	andi	r3,r2,15
 800e798:	01000104 	movi	r4,4
 800e79c:	193ff626 	beq	r3,r4,800e778 <__alt_data_end+0xfc00e778>
 800e7a0:	0023883a 	mov	r17,zero
 800e7a4:	003fd506 	br	800e6fc <__alt_data_end+0xfc00e6fc>
 800e7a8:	0023883a 	mov	r17,zero
 800e7ac:	003fe706 	br	800e74c <__alt_data_end+0xfc00e74c>
 800e7b0:	00800434 	movhi	r2,16
 800e7b4:	8c000234 	orhi	r16,r17,8
 800e7b8:	10bfffc4 	addi	r2,r2,-1
 800e7bc:	3027883a 	mov	r19,r6
 800e7c0:	80a0703a 	and	r16,r16,r2
 800e7c4:	902d883a 	mov	r22,r18
 800e7c8:	003eac06 	br	800e27c <__alt_data_end+0xfc00e27c>

0800e7cc <__subdf3>:
 800e7cc:	02000434 	movhi	r8,16
 800e7d0:	423fffc4 	addi	r8,r8,-1
 800e7d4:	defffb04 	addi	sp,sp,-20
 800e7d8:	2a14703a 	and	r10,r5,r8
 800e7dc:	3812d53a 	srli	r9,r7,20
 800e7e0:	3a10703a 	and	r8,r7,r8
 800e7e4:	2006d77a 	srli	r3,r4,29
 800e7e8:	3004d77a 	srli	r2,r6,29
 800e7ec:	dc000015 	stw	r16,0(sp)
 800e7f0:	501490fa 	slli	r10,r10,3
 800e7f4:	2820d53a 	srli	r16,r5,20
 800e7f8:	401090fa 	slli	r8,r8,3
 800e7fc:	dc800215 	stw	r18,8(sp)
 800e800:	dc400115 	stw	r17,4(sp)
 800e804:	dfc00415 	stw	ra,16(sp)
 800e808:	202290fa 	slli	r17,r4,3
 800e80c:	dcc00315 	stw	r19,12(sp)
 800e810:	4a41ffcc 	andi	r9,r9,2047
 800e814:	0101ffc4 	movi	r4,2047
 800e818:	2824d7fa 	srli	r18,r5,31
 800e81c:	8401ffcc 	andi	r16,r16,2047
 800e820:	50c6b03a 	or	r3,r10,r3
 800e824:	380ed7fa 	srli	r7,r7,31
 800e828:	408ab03a 	or	r5,r8,r2
 800e82c:	300c90fa 	slli	r6,r6,3
 800e830:	49009626 	beq	r9,r4,800ea8c <__subdf3+0x2c0>
 800e834:	39c0005c 	xori	r7,r7,1
 800e838:	8245c83a 	sub	r2,r16,r9
 800e83c:	3c807426 	beq	r7,r18,800ea10 <__subdf3+0x244>
 800e840:	0080af0e 	bge	zero,r2,800eb00 <__subdf3+0x334>
 800e844:	48002a1e 	bne	r9,zero,800e8f0 <__subdf3+0x124>
 800e848:	2988b03a 	or	r4,r5,r6
 800e84c:	20009a1e 	bne	r4,zero,800eab8 <__subdf3+0x2ec>
 800e850:	888001cc 	andi	r2,r17,7
 800e854:	10000726 	beq	r2,zero,800e874 <__subdf3+0xa8>
 800e858:	888003cc 	andi	r2,r17,15
 800e85c:	01000104 	movi	r4,4
 800e860:	11000426 	beq	r2,r4,800e874 <__subdf3+0xa8>
 800e864:	890b883a 	add	r5,r17,r4
 800e868:	2c63803a 	cmpltu	r17,r5,r17
 800e86c:	1c47883a 	add	r3,r3,r17
 800e870:	2823883a 	mov	r17,r5
 800e874:	1880202c 	andhi	r2,r3,128
 800e878:	10005926 	beq	r2,zero,800e9e0 <__subdf3+0x214>
 800e87c:	84000044 	addi	r16,r16,1
 800e880:	0081ffc4 	movi	r2,2047
 800e884:	8080be26 	beq	r16,r2,800eb80 <__subdf3+0x3b4>
 800e888:	017fe034 	movhi	r5,65408
 800e88c:	297fffc4 	addi	r5,r5,-1
 800e890:	1946703a 	and	r3,r3,r5
 800e894:	1804977a 	slli	r2,r3,29
 800e898:	1806927a 	slli	r3,r3,9
 800e89c:	8822d0fa 	srli	r17,r17,3
 800e8a0:	8401ffcc 	andi	r16,r16,2047
 800e8a4:	180ad33a 	srli	r5,r3,12
 800e8a8:	9100004c 	andi	r4,r18,1
 800e8ac:	1444b03a 	or	r2,r2,r17
 800e8b0:	80c1ffcc 	andi	r3,r16,2047
 800e8b4:	1820953a 	slli	r16,r3,20
 800e8b8:	20c03fcc 	andi	r3,r4,255
 800e8bc:	180897fa 	slli	r4,r3,31
 800e8c0:	00c00434 	movhi	r3,16
 800e8c4:	18ffffc4 	addi	r3,r3,-1
 800e8c8:	28c6703a 	and	r3,r5,r3
 800e8cc:	1c06b03a 	or	r3,r3,r16
 800e8d0:	1906b03a 	or	r3,r3,r4
 800e8d4:	dfc00417 	ldw	ra,16(sp)
 800e8d8:	dcc00317 	ldw	r19,12(sp)
 800e8dc:	dc800217 	ldw	r18,8(sp)
 800e8e0:	dc400117 	ldw	r17,4(sp)
 800e8e4:	dc000017 	ldw	r16,0(sp)
 800e8e8:	dec00504 	addi	sp,sp,20
 800e8ec:	f800283a 	ret
 800e8f0:	0101ffc4 	movi	r4,2047
 800e8f4:	813fd626 	beq	r16,r4,800e850 <__alt_data_end+0xfc00e850>
 800e8f8:	29402034 	orhi	r5,r5,128
 800e8fc:	01000e04 	movi	r4,56
 800e900:	2080a316 	blt	r4,r2,800eb90 <__subdf3+0x3c4>
 800e904:	010007c4 	movi	r4,31
 800e908:	2080c616 	blt	r4,r2,800ec24 <__subdf3+0x458>
 800e90c:	01000804 	movi	r4,32
 800e910:	2089c83a 	sub	r4,r4,r2
 800e914:	2910983a 	sll	r8,r5,r4
 800e918:	308ed83a 	srl	r7,r6,r2
 800e91c:	3108983a 	sll	r4,r6,r4
 800e920:	2884d83a 	srl	r2,r5,r2
 800e924:	41ccb03a 	or	r6,r8,r7
 800e928:	2008c03a 	cmpne	r4,r4,zero
 800e92c:	310cb03a 	or	r6,r6,r4
 800e930:	898dc83a 	sub	r6,r17,r6
 800e934:	89a3803a 	cmpltu	r17,r17,r6
 800e938:	1887c83a 	sub	r3,r3,r2
 800e93c:	1c47c83a 	sub	r3,r3,r17
 800e940:	3023883a 	mov	r17,r6
 800e944:	1880202c 	andhi	r2,r3,128
 800e948:	10002326 	beq	r2,zero,800e9d8 <__subdf3+0x20c>
 800e94c:	04c02034 	movhi	r19,128
 800e950:	9cffffc4 	addi	r19,r19,-1
 800e954:	1ce6703a 	and	r19,r3,r19
 800e958:	98007a26 	beq	r19,zero,800eb44 <__subdf3+0x378>
 800e95c:	9809883a 	mov	r4,r19
 800e960:	800f2cc0 	call	800f2cc <__clzsi2>
 800e964:	113ffe04 	addi	r4,r2,-8
 800e968:	00c007c4 	movi	r3,31
 800e96c:	19007b16 	blt	r3,r4,800eb5c <__subdf3+0x390>
 800e970:	00800804 	movi	r2,32
 800e974:	1105c83a 	sub	r2,r2,r4
 800e978:	8884d83a 	srl	r2,r17,r2
 800e97c:	9906983a 	sll	r3,r19,r4
 800e980:	8922983a 	sll	r17,r17,r4
 800e984:	10c4b03a 	or	r2,r2,r3
 800e988:	24007816 	blt	r4,r16,800eb6c <__subdf3+0x3a0>
 800e98c:	2421c83a 	sub	r16,r4,r16
 800e990:	80c00044 	addi	r3,r16,1
 800e994:	010007c4 	movi	r4,31
 800e998:	20c09516 	blt	r4,r3,800ebf0 <__subdf3+0x424>
 800e99c:	01400804 	movi	r5,32
 800e9a0:	28cbc83a 	sub	r5,r5,r3
 800e9a4:	88c8d83a 	srl	r4,r17,r3
 800e9a8:	8962983a 	sll	r17,r17,r5
 800e9ac:	114a983a 	sll	r5,r2,r5
 800e9b0:	10c6d83a 	srl	r3,r2,r3
 800e9b4:	8804c03a 	cmpne	r2,r17,zero
 800e9b8:	290ab03a 	or	r5,r5,r4
 800e9bc:	28a2b03a 	or	r17,r5,r2
 800e9c0:	0021883a 	mov	r16,zero
 800e9c4:	003fa206 	br	800e850 <__alt_data_end+0xfc00e850>
 800e9c8:	2090b03a 	or	r8,r4,r2
 800e9cc:	40018e26 	beq	r8,zero,800f008 <__subdf3+0x83c>
 800e9d0:	1007883a 	mov	r3,r2
 800e9d4:	2023883a 	mov	r17,r4
 800e9d8:	888001cc 	andi	r2,r17,7
 800e9dc:	103f9e1e 	bne	r2,zero,800e858 <__alt_data_end+0xfc00e858>
 800e9e0:	1804977a 	slli	r2,r3,29
 800e9e4:	8822d0fa 	srli	r17,r17,3
 800e9e8:	1810d0fa 	srli	r8,r3,3
 800e9ec:	9100004c 	andi	r4,r18,1
 800e9f0:	1444b03a 	or	r2,r2,r17
 800e9f4:	00c1ffc4 	movi	r3,2047
 800e9f8:	80c02826 	beq	r16,r3,800ea9c <__subdf3+0x2d0>
 800e9fc:	01400434 	movhi	r5,16
 800ea00:	297fffc4 	addi	r5,r5,-1
 800ea04:	80e0703a 	and	r16,r16,r3
 800ea08:	414a703a 	and	r5,r8,r5
 800ea0c:	003fa806 	br	800e8b0 <__alt_data_end+0xfc00e8b0>
 800ea10:	0080630e 	bge	zero,r2,800eba0 <__subdf3+0x3d4>
 800ea14:	48003026 	beq	r9,zero,800ead8 <__subdf3+0x30c>
 800ea18:	0101ffc4 	movi	r4,2047
 800ea1c:	813f8c26 	beq	r16,r4,800e850 <__alt_data_end+0xfc00e850>
 800ea20:	29402034 	orhi	r5,r5,128
 800ea24:	01000e04 	movi	r4,56
 800ea28:	2080a90e 	bge	r4,r2,800ecd0 <__subdf3+0x504>
 800ea2c:	298cb03a 	or	r6,r5,r6
 800ea30:	3012c03a 	cmpne	r9,r6,zero
 800ea34:	0005883a 	mov	r2,zero
 800ea38:	4c53883a 	add	r9,r9,r17
 800ea3c:	4c63803a 	cmpltu	r17,r9,r17
 800ea40:	10c7883a 	add	r3,r2,r3
 800ea44:	88c7883a 	add	r3,r17,r3
 800ea48:	4823883a 	mov	r17,r9
 800ea4c:	1880202c 	andhi	r2,r3,128
 800ea50:	1000d026 	beq	r2,zero,800ed94 <__subdf3+0x5c8>
 800ea54:	84000044 	addi	r16,r16,1
 800ea58:	0081ffc4 	movi	r2,2047
 800ea5c:	8080fe26 	beq	r16,r2,800ee58 <__subdf3+0x68c>
 800ea60:	00bfe034 	movhi	r2,65408
 800ea64:	10bfffc4 	addi	r2,r2,-1
 800ea68:	1886703a 	and	r3,r3,r2
 800ea6c:	880ad07a 	srli	r5,r17,1
 800ea70:	180497fa 	slli	r2,r3,31
 800ea74:	8900004c 	andi	r4,r17,1
 800ea78:	2922b03a 	or	r17,r5,r4
 800ea7c:	1806d07a 	srli	r3,r3,1
 800ea80:	1462b03a 	or	r17,r2,r17
 800ea84:	3825883a 	mov	r18,r7
 800ea88:	003f7106 	br	800e850 <__alt_data_end+0xfc00e850>
 800ea8c:	2984b03a 	or	r2,r5,r6
 800ea90:	103f6826 	beq	r2,zero,800e834 <__alt_data_end+0xfc00e834>
 800ea94:	39c03fcc 	andi	r7,r7,255
 800ea98:	003f6706 	br	800e838 <__alt_data_end+0xfc00e838>
 800ea9c:	4086b03a 	or	r3,r8,r2
 800eaa0:	18015226 	beq	r3,zero,800efec <__subdf3+0x820>
 800eaa4:	00c00434 	movhi	r3,16
 800eaa8:	41400234 	orhi	r5,r8,8
 800eaac:	18ffffc4 	addi	r3,r3,-1
 800eab0:	28ca703a 	and	r5,r5,r3
 800eab4:	003f7e06 	br	800e8b0 <__alt_data_end+0xfc00e8b0>
 800eab8:	10bfffc4 	addi	r2,r2,-1
 800eabc:	1000491e 	bne	r2,zero,800ebe4 <__subdf3+0x418>
 800eac0:	898fc83a 	sub	r7,r17,r6
 800eac4:	89e3803a 	cmpltu	r17,r17,r7
 800eac8:	1947c83a 	sub	r3,r3,r5
 800eacc:	1c47c83a 	sub	r3,r3,r17
 800ead0:	3823883a 	mov	r17,r7
 800ead4:	003f9b06 	br	800e944 <__alt_data_end+0xfc00e944>
 800ead8:	2988b03a 	or	r4,r5,r6
 800eadc:	203f5c26 	beq	r4,zero,800e850 <__alt_data_end+0xfc00e850>
 800eae0:	10bfffc4 	addi	r2,r2,-1
 800eae4:	1000931e 	bne	r2,zero,800ed34 <__subdf3+0x568>
 800eae8:	898d883a 	add	r6,r17,r6
 800eaec:	3463803a 	cmpltu	r17,r6,r17
 800eaf0:	1947883a 	add	r3,r3,r5
 800eaf4:	88c7883a 	add	r3,r17,r3
 800eaf8:	3023883a 	mov	r17,r6
 800eafc:	003fd306 	br	800ea4c <__alt_data_end+0xfc00ea4c>
 800eb00:	1000541e 	bne	r2,zero,800ec54 <__subdf3+0x488>
 800eb04:	80800044 	addi	r2,r16,1
 800eb08:	1081ffcc 	andi	r2,r2,2047
 800eb0c:	01000044 	movi	r4,1
 800eb10:	2080a20e 	bge	r4,r2,800ed9c <__subdf3+0x5d0>
 800eb14:	8989c83a 	sub	r4,r17,r6
 800eb18:	8905803a 	cmpltu	r2,r17,r4
 800eb1c:	1967c83a 	sub	r19,r3,r5
 800eb20:	98a7c83a 	sub	r19,r19,r2
 800eb24:	9880202c 	andhi	r2,r19,128
 800eb28:	10006326 	beq	r2,zero,800ecb8 <__subdf3+0x4ec>
 800eb2c:	3463c83a 	sub	r17,r6,r17
 800eb30:	28c7c83a 	sub	r3,r5,r3
 800eb34:	344d803a 	cmpltu	r6,r6,r17
 800eb38:	19a7c83a 	sub	r19,r3,r6
 800eb3c:	3825883a 	mov	r18,r7
 800eb40:	983f861e 	bne	r19,zero,800e95c <__alt_data_end+0xfc00e95c>
 800eb44:	8809883a 	mov	r4,r17
 800eb48:	800f2cc0 	call	800f2cc <__clzsi2>
 800eb4c:	10800804 	addi	r2,r2,32
 800eb50:	113ffe04 	addi	r4,r2,-8
 800eb54:	00c007c4 	movi	r3,31
 800eb58:	193f850e 	bge	r3,r4,800e970 <__alt_data_end+0xfc00e970>
 800eb5c:	10bff604 	addi	r2,r2,-40
 800eb60:	8884983a 	sll	r2,r17,r2
 800eb64:	0023883a 	mov	r17,zero
 800eb68:	243f880e 	bge	r4,r16,800e98c <__alt_data_end+0xfc00e98c>
 800eb6c:	00ffe034 	movhi	r3,65408
 800eb70:	18ffffc4 	addi	r3,r3,-1
 800eb74:	8121c83a 	sub	r16,r16,r4
 800eb78:	10c6703a 	and	r3,r2,r3
 800eb7c:	003f3406 	br	800e850 <__alt_data_end+0xfc00e850>
 800eb80:	9100004c 	andi	r4,r18,1
 800eb84:	000b883a 	mov	r5,zero
 800eb88:	0005883a 	mov	r2,zero
 800eb8c:	003f4806 	br	800e8b0 <__alt_data_end+0xfc00e8b0>
 800eb90:	298cb03a 	or	r6,r5,r6
 800eb94:	300cc03a 	cmpne	r6,r6,zero
 800eb98:	0005883a 	mov	r2,zero
 800eb9c:	003f6406 	br	800e930 <__alt_data_end+0xfc00e930>
 800eba0:	10009a1e 	bne	r2,zero,800ee0c <__subdf3+0x640>
 800eba4:	82400044 	addi	r9,r16,1
 800eba8:	4881ffcc 	andi	r2,r9,2047
 800ebac:	02800044 	movi	r10,1
 800ebb0:	5080670e 	bge	r10,r2,800ed50 <__subdf3+0x584>
 800ebb4:	0081ffc4 	movi	r2,2047
 800ebb8:	4880af26 	beq	r9,r2,800ee78 <__subdf3+0x6ac>
 800ebbc:	898d883a 	add	r6,r17,r6
 800ebc0:	1945883a 	add	r2,r3,r5
 800ebc4:	3447803a 	cmpltu	r3,r6,r17
 800ebc8:	1887883a 	add	r3,r3,r2
 800ebcc:	182297fa 	slli	r17,r3,31
 800ebd0:	300cd07a 	srli	r6,r6,1
 800ebd4:	1806d07a 	srli	r3,r3,1
 800ebd8:	4821883a 	mov	r16,r9
 800ebdc:	89a2b03a 	or	r17,r17,r6
 800ebe0:	003f1b06 	br	800e850 <__alt_data_end+0xfc00e850>
 800ebe4:	0101ffc4 	movi	r4,2047
 800ebe8:	813f441e 	bne	r16,r4,800e8fc <__alt_data_end+0xfc00e8fc>
 800ebec:	003f1806 	br	800e850 <__alt_data_end+0xfc00e850>
 800ebf0:	843ff844 	addi	r16,r16,-31
 800ebf4:	01400804 	movi	r5,32
 800ebf8:	1408d83a 	srl	r4,r2,r16
 800ebfc:	19405026 	beq	r3,r5,800ed40 <__subdf3+0x574>
 800ec00:	01401004 	movi	r5,64
 800ec04:	28c7c83a 	sub	r3,r5,r3
 800ec08:	10c4983a 	sll	r2,r2,r3
 800ec0c:	88a2b03a 	or	r17,r17,r2
 800ec10:	8822c03a 	cmpne	r17,r17,zero
 800ec14:	2462b03a 	or	r17,r4,r17
 800ec18:	0007883a 	mov	r3,zero
 800ec1c:	0021883a 	mov	r16,zero
 800ec20:	003f6d06 	br	800e9d8 <__alt_data_end+0xfc00e9d8>
 800ec24:	11fff804 	addi	r7,r2,-32
 800ec28:	01000804 	movi	r4,32
 800ec2c:	29ced83a 	srl	r7,r5,r7
 800ec30:	11004526 	beq	r2,r4,800ed48 <__subdf3+0x57c>
 800ec34:	01001004 	movi	r4,64
 800ec38:	2089c83a 	sub	r4,r4,r2
 800ec3c:	2904983a 	sll	r2,r5,r4
 800ec40:	118cb03a 	or	r6,r2,r6
 800ec44:	300cc03a 	cmpne	r6,r6,zero
 800ec48:	398cb03a 	or	r6,r7,r6
 800ec4c:	0005883a 	mov	r2,zero
 800ec50:	003f3706 	br	800e930 <__alt_data_end+0xfc00e930>
 800ec54:	80002a26 	beq	r16,zero,800ed00 <__subdf3+0x534>
 800ec58:	0101ffc4 	movi	r4,2047
 800ec5c:	49006626 	beq	r9,r4,800edf8 <__subdf3+0x62c>
 800ec60:	0085c83a 	sub	r2,zero,r2
 800ec64:	18c02034 	orhi	r3,r3,128
 800ec68:	01000e04 	movi	r4,56
 800ec6c:	20807e16 	blt	r4,r2,800ee68 <__subdf3+0x69c>
 800ec70:	010007c4 	movi	r4,31
 800ec74:	2080e716 	blt	r4,r2,800f014 <__subdf3+0x848>
 800ec78:	01000804 	movi	r4,32
 800ec7c:	2089c83a 	sub	r4,r4,r2
 800ec80:	1914983a 	sll	r10,r3,r4
 800ec84:	8890d83a 	srl	r8,r17,r2
 800ec88:	8908983a 	sll	r4,r17,r4
 800ec8c:	1884d83a 	srl	r2,r3,r2
 800ec90:	5222b03a 	or	r17,r10,r8
 800ec94:	2006c03a 	cmpne	r3,r4,zero
 800ec98:	88e2b03a 	or	r17,r17,r3
 800ec9c:	3463c83a 	sub	r17,r6,r17
 800eca0:	2885c83a 	sub	r2,r5,r2
 800eca4:	344d803a 	cmpltu	r6,r6,r17
 800eca8:	1187c83a 	sub	r3,r2,r6
 800ecac:	4821883a 	mov	r16,r9
 800ecb0:	3825883a 	mov	r18,r7
 800ecb4:	003f2306 	br	800e944 <__alt_data_end+0xfc00e944>
 800ecb8:	24d0b03a 	or	r8,r4,r19
 800ecbc:	40001b1e 	bne	r8,zero,800ed2c <__subdf3+0x560>
 800ecc0:	0005883a 	mov	r2,zero
 800ecc4:	0009883a 	mov	r4,zero
 800ecc8:	0021883a 	mov	r16,zero
 800eccc:	003f4906 	br	800e9f4 <__alt_data_end+0xfc00e9f4>
 800ecd0:	010007c4 	movi	r4,31
 800ecd4:	20803a16 	blt	r4,r2,800edc0 <__subdf3+0x5f4>
 800ecd8:	01000804 	movi	r4,32
 800ecdc:	2089c83a 	sub	r4,r4,r2
 800ece0:	2912983a 	sll	r9,r5,r4
 800ece4:	3090d83a 	srl	r8,r6,r2
 800ece8:	3108983a 	sll	r4,r6,r4
 800ecec:	2884d83a 	srl	r2,r5,r2
 800ecf0:	4a12b03a 	or	r9,r9,r8
 800ecf4:	2008c03a 	cmpne	r4,r4,zero
 800ecf8:	4912b03a 	or	r9,r9,r4
 800ecfc:	003f4e06 	br	800ea38 <__alt_data_end+0xfc00ea38>
 800ed00:	1c48b03a 	or	r4,r3,r17
 800ed04:	20003c26 	beq	r4,zero,800edf8 <__subdf3+0x62c>
 800ed08:	0084303a 	nor	r2,zero,r2
 800ed0c:	1000381e 	bne	r2,zero,800edf0 <__subdf3+0x624>
 800ed10:	3463c83a 	sub	r17,r6,r17
 800ed14:	28c5c83a 	sub	r2,r5,r3
 800ed18:	344d803a 	cmpltu	r6,r6,r17
 800ed1c:	1187c83a 	sub	r3,r2,r6
 800ed20:	4821883a 	mov	r16,r9
 800ed24:	3825883a 	mov	r18,r7
 800ed28:	003f0606 	br	800e944 <__alt_data_end+0xfc00e944>
 800ed2c:	2023883a 	mov	r17,r4
 800ed30:	003f0906 	br	800e958 <__alt_data_end+0xfc00e958>
 800ed34:	0101ffc4 	movi	r4,2047
 800ed38:	813f3a1e 	bne	r16,r4,800ea24 <__alt_data_end+0xfc00ea24>
 800ed3c:	003ec406 	br	800e850 <__alt_data_end+0xfc00e850>
 800ed40:	0005883a 	mov	r2,zero
 800ed44:	003fb106 	br	800ec0c <__alt_data_end+0xfc00ec0c>
 800ed48:	0005883a 	mov	r2,zero
 800ed4c:	003fbc06 	br	800ec40 <__alt_data_end+0xfc00ec40>
 800ed50:	1c44b03a 	or	r2,r3,r17
 800ed54:	80008e1e 	bne	r16,zero,800ef90 <__subdf3+0x7c4>
 800ed58:	1000c826 	beq	r2,zero,800f07c <__subdf3+0x8b0>
 800ed5c:	2984b03a 	or	r2,r5,r6
 800ed60:	103ebb26 	beq	r2,zero,800e850 <__alt_data_end+0xfc00e850>
 800ed64:	8989883a 	add	r4,r17,r6
 800ed68:	1945883a 	add	r2,r3,r5
 800ed6c:	2447803a 	cmpltu	r3,r4,r17
 800ed70:	1887883a 	add	r3,r3,r2
 800ed74:	1880202c 	andhi	r2,r3,128
 800ed78:	2023883a 	mov	r17,r4
 800ed7c:	103f1626 	beq	r2,zero,800e9d8 <__alt_data_end+0xfc00e9d8>
 800ed80:	00bfe034 	movhi	r2,65408
 800ed84:	10bfffc4 	addi	r2,r2,-1
 800ed88:	5021883a 	mov	r16,r10
 800ed8c:	1886703a 	and	r3,r3,r2
 800ed90:	003eaf06 	br	800e850 <__alt_data_end+0xfc00e850>
 800ed94:	3825883a 	mov	r18,r7
 800ed98:	003f0f06 	br	800e9d8 <__alt_data_end+0xfc00e9d8>
 800ed9c:	1c44b03a 	or	r2,r3,r17
 800eda0:	8000251e 	bne	r16,zero,800ee38 <__subdf3+0x66c>
 800eda4:	1000661e 	bne	r2,zero,800ef40 <__subdf3+0x774>
 800eda8:	2990b03a 	or	r8,r5,r6
 800edac:	40009626 	beq	r8,zero,800f008 <__subdf3+0x83c>
 800edb0:	2807883a 	mov	r3,r5
 800edb4:	3023883a 	mov	r17,r6
 800edb8:	3825883a 	mov	r18,r7
 800edbc:	003ea406 	br	800e850 <__alt_data_end+0xfc00e850>
 800edc0:	127ff804 	addi	r9,r2,-32
 800edc4:	01000804 	movi	r4,32
 800edc8:	2a52d83a 	srl	r9,r5,r9
 800edcc:	11008c26 	beq	r2,r4,800f000 <__subdf3+0x834>
 800edd0:	01001004 	movi	r4,64
 800edd4:	2085c83a 	sub	r2,r4,r2
 800edd8:	2884983a 	sll	r2,r5,r2
 800eddc:	118cb03a 	or	r6,r2,r6
 800ede0:	300cc03a 	cmpne	r6,r6,zero
 800ede4:	4992b03a 	or	r9,r9,r6
 800ede8:	0005883a 	mov	r2,zero
 800edec:	003f1206 	br	800ea38 <__alt_data_end+0xfc00ea38>
 800edf0:	0101ffc4 	movi	r4,2047
 800edf4:	493f9c1e 	bne	r9,r4,800ec68 <__alt_data_end+0xfc00ec68>
 800edf8:	2807883a 	mov	r3,r5
 800edfc:	3023883a 	mov	r17,r6
 800ee00:	4821883a 	mov	r16,r9
 800ee04:	3825883a 	mov	r18,r7
 800ee08:	003e9106 	br	800e850 <__alt_data_end+0xfc00e850>
 800ee0c:	80001f1e 	bne	r16,zero,800ee8c <__subdf3+0x6c0>
 800ee10:	1c48b03a 	or	r4,r3,r17
 800ee14:	20005a26 	beq	r4,zero,800ef80 <__subdf3+0x7b4>
 800ee18:	0084303a 	nor	r2,zero,r2
 800ee1c:	1000561e 	bne	r2,zero,800ef78 <__subdf3+0x7ac>
 800ee20:	89a3883a 	add	r17,r17,r6
 800ee24:	1945883a 	add	r2,r3,r5
 800ee28:	898d803a 	cmpltu	r6,r17,r6
 800ee2c:	3087883a 	add	r3,r6,r2
 800ee30:	4821883a 	mov	r16,r9
 800ee34:	003f0506 	br	800ea4c <__alt_data_end+0xfc00ea4c>
 800ee38:	10002b1e 	bne	r2,zero,800eee8 <__subdf3+0x71c>
 800ee3c:	2984b03a 	or	r2,r5,r6
 800ee40:	10008026 	beq	r2,zero,800f044 <__subdf3+0x878>
 800ee44:	2807883a 	mov	r3,r5
 800ee48:	3023883a 	mov	r17,r6
 800ee4c:	3825883a 	mov	r18,r7
 800ee50:	0401ffc4 	movi	r16,2047
 800ee54:	003e7e06 	br	800e850 <__alt_data_end+0xfc00e850>
 800ee58:	3809883a 	mov	r4,r7
 800ee5c:	0011883a 	mov	r8,zero
 800ee60:	0005883a 	mov	r2,zero
 800ee64:	003ee306 	br	800e9f4 <__alt_data_end+0xfc00e9f4>
 800ee68:	1c62b03a 	or	r17,r3,r17
 800ee6c:	8822c03a 	cmpne	r17,r17,zero
 800ee70:	0005883a 	mov	r2,zero
 800ee74:	003f8906 	br	800ec9c <__alt_data_end+0xfc00ec9c>
 800ee78:	3809883a 	mov	r4,r7
 800ee7c:	4821883a 	mov	r16,r9
 800ee80:	0011883a 	mov	r8,zero
 800ee84:	0005883a 	mov	r2,zero
 800ee88:	003eda06 	br	800e9f4 <__alt_data_end+0xfc00e9f4>
 800ee8c:	0101ffc4 	movi	r4,2047
 800ee90:	49003b26 	beq	r9,r4,800ef80 <__subdf3+0x7b4>
 800ee94:	0085c83a 	sub	r2,zero,r2
 800ee98:	18c02034 	orhi	r3,r3,128
 800ee9c:	01000e04 	movi	r4,56
 800eea0:	20806e16 	blt	r4,r2,800f05c <__subdf3+0x890>
 800eea4:	010007c4 	movi	r4,31
 800eea8:	20807716 	blt	r4,r2,800f088 <__subdf3+0x8bc>
 800eeac:	01000804 	movi	r4,32
 800eeb0:	2089c83a 	sub	r4,r4,r2
 800eeb4:	1914983a 	sll	r10,r3,r4
 800eeb8:	8890d83a 	srl	r8,r17,r2
 800eebc:	8908983a 	sll	r4,r17,r4
 800eec0:	1884d83a 	srl	r2,r3,r2
 800eec4:	5222b03a 	or	r17,r10,r8
 800eec8:	2006c03a 	cmpne	r3,r4,zero
 800eecc:	88e2b03a 	or	r17,r17,r3
 800eed0:	89a3883a 	add	r17,r17,r6
 800eed4:	1145883a 	add	r2,r2,r5
 800eed8:	898d803a 	cmpltu	r6,r17,r6
 800eedc:	3087883a 	add	r3,r6,r2
 800eee0:	4821883a 	mov	r16,r9
 800eee4:	003ed906 	br	800ea4c <__alt_data_end+0xfc00ea4c>
 800eee8:	2984b03a 	or	r2,r5,r6
 800eeec:	10004226 	beq	r2,zero,800eff8 <__subdf3+0x82c>
 800eef0:	1808d0fa 	srli	r4,r3,3
 800eef4:	8822d0fa 	srli	r17,r17,3
 800eef8:	1806977a 	slli	r3,r3,29
 800eefc:	2080022c 	andhi	r2,r4,8
 800ef00:	1c62b03a 	or	r17,r3,r17
 800ef04:	10000826 	beq	r2,zero,800ef28 <__subdf3+0x75c>
 800ef08:	2812d0fa 	srli	r9,r5,3
 800ef0c:	4880022c 	andhi	r2,r9,8
 800ef10:	1000051e 	bne	r2,zero,800ef28 <__subdf3+0x75c>
 800ef14:	300cd0fa 	srli	r6,r6,3
 800ef18:	2804977a 	slli	r2,r5,29
 800ef1c:	4809883a 	mov	r4,r9
 800ef20:	3825883a 	mov	r18,r7
 800ef24:	11a2b03a 	or	r17,r2,r6
 800ef28:	8806d77a 	srli	r3,r17,29
 800ef2c:	200890fa 	slli	r4,r4,3
 800ef30:	882290fa 	slli	r17,r17,3
 800ef34:	0401ffc4 	movi	r16,2047
 800ef38:	1906b03a 	or	r3,r3,r4
 800ef3c:	003e4406 	br	800e850 <__alt_data_end+0xfc00e850>
 800ef40:	2984b03a 	or	r2,r5,r6
 800ef44:	103e4226 	beq	r2,zero,800e850 <__alt_data_end+0xfc00e850>
 800ef48:	8989c83a 	sub	r4,r17,r6
 800ef4c:	8911803a 	cmpltu	r8,r17,r4
 800ef50:	1945c83a 	sub	r2,r3,r5
 800ef54:	1205c83a 	sub	r2,r2,r8
 800ef58:	1200202c 	andhi	r8,r2,128
 800ef5c:	403e9a26 	beq	r8,zero,800e9c8 <__alt_data_end+0xfc00e9c8>
 800ef60:	3463c83a 	sub	r17,r6,r17
 800ef64:	28c5c83a 	sub	r2,r5,r3
 800ef68:	344d803a 	cmpltu	r6,r6,r17
 800ef6c:	1187c83a 	sub	r3,r2,r6
 800ef70:	3825883a 	mov	r18,r7
 800ef74:	003e3606 	br	800e850 <__alt_data_end+0xfc00e850>
 800ef78:	0101ffc4 	movi	r4,2047
 800ef7c:	493fc71e 	bne	r9,r4,800ee9c <__alt_data_end+0xfc00ee9c>
 800ef80:	2807883a 	mov	r3,r5
 800ef84:	3023883a 	mov	r17,r6
 800ef88:	4821883a 	mov	r16,r9
 800ef8c:	003e3006 	br	800e850 <__alt_data_end+0xfc00e850>
 800ef90:	10003626 	beq	r2,zero,800f06c <__subdf3+0x8a0>
 800ef94:	2984b03a 	or	r2,r5,r6
 800ef98:	10001726 	beq	r2,zero,800eff8 <__subdf3+0x82c>
 800ef9c:	1808d0fa 	srli	r4,r3,3
 800efa0:	8822d0fa 	srli	r17,r17,3
 800efa4:	1806977a 	slli	r3,r3,29
 800efa8:	2080022c 	andhi	r2,r4,8
 800efac:	1c62b03a 	or	r17,r3,r17
 800efb0:	10000726 	beq	r2,zero,800efd0 <__subdf3+0x804>
 800efb4:	2812d0fa 	srli	r9,r5,3
 800efb8:	4880022c 	andhi	r2,r9,8
 800efbc:	1000041e 	bne	r2,zero,800efd0 <__subdf3+0x804>
 800efc0:	300cd0fa 	srli	r6,r6,3
 800efc4:	2804977a 	slli	r2,r5,29
 800efc8:	4809883a 	mov	r4,r9
 800efcc:	11a2b03a 	or	r17,r2,r6
 800efd0:	8806d77a 	srli	r3,r17,29
 800efd4:	200890fa 	slli	r4,r4,3
 800efd8:	882290fa 	slli	r17,r17,3
 800efdc:	3825883a 	mov	r18,r7
 800efe0:	1906b03a 	or	r3,r3,r4
 800efe4:	0401ffc4 	movi	r16,2047
 800efe8:	003e1906 	br	800e850 <__alt_data_end+0xfc00e850>
 800efec:	000b883a 	mov	r5,zero
 800eff0:	0005883a 	mov	r2,zero
 800eff4:	003e2e06 	br	800e8b0 <__alt_data_end+0xfc00e8b0>
 800eff8:	0401ffc4 	movi	r16,2047
 800effc:	003e1406 	br	800e850 <__alt_data_end+0xfc00e850>
 800f000:	0005883a 	mov	r2,zero
 800f004:	003f7506 	br	800eddc <__alt_data_end+0xfc00eddc>
 800f008:	0005883a 	mov	r2,zero
 800f00c:	0009883a 	mov	r4,zero
 800f010:	003e7806 	br	800e9f4 <__alt_data_end+0xfc00e9f4>
 800f014:	123ff804 	addi	r8,r2,-32
 800f018:	01000804 	movi	r4,32
 800f01c:	1a10d83a 	srl	r8,r3,r8
 800f020:	11002526 	beq	r2,r4,800f0b8 <__subdf3+0x8ec>
 800f024:	01001004 	movi	r4,64
 800f028:	2085c83a 	sub	r2,r4,r2
 800f02c:	1884983a 	sll	r2,r3,r2
 800f030:	1444b03a 	or	r2,r2,r17
 800f034:	1004c03a 	cmpne	r2,r2,zero
 800f038:	40a2b03a 	or	r17,r8,r2
 800f03c:	0005883a 	mov	r2,zero
 800f040:	003f1606 	br	800ec9c <__alt_data_end+0xfc00ec9c>
 800f044:	02000434 	movhi	r8,16
 800f048:	0009883a 	mov	r4,zero
 800f04c:	423fffc4 	addi	r8,r8,-1
 800f050:	00bfffc4 	movi	r2,-1
 800f054:	0401ffc4 	movi	r16,2047
 800f058:	003e6606 	br	800e9f4 <__alt_data_end+0xfc00e9f4>
 800f05c:	1c62b03a 	or	r17,r3,r17
 800f060:	8822c03a 	cmpne	r17,r17,zero
 800f064:	0005883a 	mov	r2,zero
 800f068:	003f9906 	br	800eed0 <__alt_data_end+0xfc00eed0>
 800f06c:	2807883a 	mov	r3,r5
 800f070:	3023883a 	mov	r17,r6
 800f074:	0401ffc4 	movi	r16,2047
 800f078:	003df506 	br	800e850 <__alt_data_end+0xfc00e850>
 800f07c:	2807883a 	mov	r3,r5
 800f080:	3023883a 	mov	r17,r6
 800f084:	003df206 	br	800e850 <__alt_data_end+0xfc00e850>
 800f088:	123ff804 	addi	r8,r2,-32
 800f08c:	01000804 	movi	r4,32
 800f090:	1a10d83a 	srl	r8,r3,r8
 800f094:	11000a26 	beq	r2,r4,800f0c0 <__subdf3+0x8f4>
 800f098:	01001004 	movi	r4,64
 800f09c:	2085c83a 	sub	r2,r4,r2
 800f0a0:	1884983a 	sll	r2,r3,r2
 800f0a4:	1444b03a 	or	r2,r2,r17
 800f0a8:	1004c03a 	cmpne	r2,r2,zero
 800f0ac:	40a2b03a 	or	r17,r8,r2
 800f0b0:	0005883a 	mov	r2,zero
 800f0b4:	003f8606 	br	800eed0 <__alt_data_end+0xfc00eed0>
 800f0b8:	0005883a 	mov	r2,zero
 800f0bc:	003fdc06 	br	800f030 <__alt_data_end+0xfc00f030>
 800f0c0:	0005883a 	mov	r2,zero
 800f0c4:	003ff706 	br	800f0a4 <__alt_data_end+0xfc00f0a4>

0800f0c8 <__fixdfsi>:
 800f0c8:	280cd53a 	srli	r6,r5,20
 800f0cc:	00c00434 	movhi	r3,16
 800f0d0:	18ffffc4 	addi	r3,r3,-1
 800f0d4:	3181ffcc 	andi	r6,r6,2047
 800f0d8:	01c0ff84 	movi	r7,1022
 800f0dc:	28c6703a 	and	r3,r5,r3
 800f0e0:	280ad7fa 	srli	r5,r5,31
 800f0e4:	3980120e 	bge	r7,r6,800f130 <__fixdfsi+0x68>
 800f0e8:	00810744 	movi	r2,1053
 800f0ec:	11800c16 	blt	r2,r6,800f120 <__fixdfsi+0x58>
 800f0f0:	00810cc4 	movi	r2,1075
 800f0f4:	1185c83a 	sub	r2,r2,r6
 800f0f8:	01c007c4 	movi	r7,31
 800f0fc:	18c00434 	orhi	r3,r3,16
 800f100:	38800d16 	blt	r7,r2,800f138 <__fixdfsi+0x70>
 800f104:	31befb44 	addi	r6,r6,-1043
 800f108:	2084d83a 	srl	r2,r4,r2
 800f10c:	1986983a 	sll	r3,r3,r6
 800f110:	1884b03a 	or	r2,r3,r2
 800f114:	28000726 	beq	r5,zero,800f134 <__fixdfsi+0x6c>
 800f118:	0085c83a 	sub	r2,zero,r2
 800f11c:	f800283a 	ret
 800f120:	00a00034 	movhi	r2,32768
 800f124:	10bfffc4 	addi	r2,r2,-1
 800f128:	2885883a 	add	r2,r5,r2
 800f12c:	f800283a 	ret
 800f130:	0005883a 	mov	r2,zero
 800f134:	f800283a 	ret
 800f138:	008104c4 	movi	r2,1043
 800f13c:	1185c83a 	sub	r2,r2,r6
 800f140:	1884d83a 	srl	r2,r3,r2
 800f144:	003ff306 	br	800f114 <__alt_data_end+0xfc00f114>

0800f148 <__floatsidf>:
 800f148:	defffd04 	addi	sp,sp,-12
 800f14c:	dfc00215 	stw	ra,8(sp)
 800f150:	dc400115 	stw	r17,4(sp)
 800f154:	dc000015 	stw	r16,0(sp)
 800f158:	20002b26 	beq	r4,zero,800f208 <__floatsidf+0xc0>
 800f15c:	2023883a 	mov	r17,r4
 800f160:	2020d7fa 	srli	r16,r4,31
 800f164:	20002d16 	blt	r4,zero,800f21c <__floatsidf+0xd4>
 800f168:	8809883a 	mov	r4,r17
 800f16c:	800f2cc0 	call	800f2cc <__clzsi2>
 800f170:	01410784 	movi	r5,1054
 800f174:	288bc83a 	sub	r5,r5,r2
 800f178:	01010cc4 	movi	r4,1075
 800f17c:	2149c83a 	sub	r4,r4,r5
 800f180:	00c007c4 	movi	r3,31
 800f184:	1900160e 	bge	r3,r4,800f1e0 <__floatsidf+0x98>
 800f188:	00c104c4 	movi	r3,1043
 800f18c:	1947c83a 	sub	r3,r3,r5
 800f190:	88c6983a 	sll	r3,r17,r3
 800f194:	00800434 	movhi	r2,16
 800f198:	10bfffc4 	addi	r2,r2,-1
 800f19c:	1886703a 	and	r3,r3,r2
 800f1a0:	2941ffcc 	andi	r5,r5,2047
 800f1a4:	800d883a 	mov	r6,r16
 800f1a8:	0005883a 	mov	r2,zero
 800f1ac:	280a953a 	slli	r5,r5,20
 800f1b0:	31803fcc 	andi	r6,r6,255
 800f1b4:	01000434 	movhi	r4,16
 800f1b8:	300c97fa 	slli	r6,r6,31
 800f1bc:	213fffc4 	addi	r4,r4,-1
 800f1c0:	1906703a 	and	r3,r3,r4
 800f1c4:	1946b03a 	or	r3,r3,r5
 800f1c8:	1986b03a 	or	r3,r3,r6
 800f1cc:	dfc00217 	ldw	ra,8(sp)
 800f1d0:	dc400117 	ldw	r17,4(sp)
 800f1d4:	dc000017 	ldw	r16,0(sp)
 800f1d8:	dec00304 	addi	sp,sp,12
 800f1dc:	f800283a 	ret
 800f1e0:	00c002c4 	movi	r3,11
 800f1e4:	1887c83a 	sub	r3,r3,r2
 800f1e8:	88c6d83a 	srl	r3,r17,r3
 800f1ec:	8904983a 	sll	r2,r17,r4
 800f1f0:	01000434 	movhi	r4,16
 800f1f4:	213fffc4 	addi	r4,r4,-1
 800f1f8:	2941ffcc 	andi	r5,r5,2047
 800f1fc:	1906703a 	and	r3,r3,r4
 800f200:	800d883a 	mov	r6,r16
 800f204:	003fe906 	br	800f1ac <__alt_data_end+0xfc00f1ac>
 800f208:	000d883a 	mov	r6,zero
 800f20c:	000b883a 	mov	r5,zero
 800f210:	0007883a 	mov	r3,zero
 800f214:	0005883a 	mov	r2,zero
 800f218:	003fe406 	br	800f1ac <__alt_data_end+0xfc00f1ac>
 800f21c:	0123c83a 	sub	r17,zero,r4
 800f220:	003fd106 	br	800f168 <__alt_data_end+0xfc00f168>

0800f224 <__floatunsidf>:
 800f224:	defffe04 	addi	sp,sp,-8
 800f228:	dc000015 	stw	r16,0(sp)
 800f22c:	dfc00115 	stw	ra,4(sp)
 800f230:	2021883a 	mov	r16,r4
 800f234:	20002226 	beq	r4,zero,800f2c0 <__floatunsidf+0x9c>
 800f238:	800f2cc0 	call	800f2cc <__clzsi2>
 800f23c:	01010784 	movi	r4,1054
 800f240:	2089c83a 	sub	r4,r4,r2
 800f244:	01810cc4 	movi	r6,1075
 800f248:	310dc83a 	sub	r6,r6,r4
 800f24c:	00c007c4 	movi	r3,31
 800f250:	1980120e 	bge	r3,r6,800f29c <__floatunsidf+0x78>
 800f254:	00c104c4 	movi	r3,1043
 800f258:	1907c83a 	sub	r3,r3,r4
 800f25c:	80ca983a 	sll	r5,r16,r3
 800f260:	00800434 	movhi	r2,16
 800f264:	10bfffc4 	addi	r2,r2,-1
 800f268:	2101ffcc 	andi	r4,r4,2047
 800f26c:	0021883a 	mov	r16,zero
 800f270:	288a703a 	and	r5,r5,r2
 800f274:	2008953a 	slli	r4,r4,20
 800f278:	00c00434 	movhi	r3,16
 800f27c:	18ffffc4 	addi	r3,r3,-1
 800f280:	28c6703a 	and	r3,r5,r3
 800f284:	8005883a 	mov	r2,r16
 800f288:	1906b03a 	or	r3,r3,r4
 800f28c:	dfc00117 	ldw	ra,4(sp)
 800f290:	dc000017 	ldw	r16,0(sp)
 800f294:	dec00204 	addi	sp,sp,8
 800f298:	f800283a 	ret
 800f29c:	00c002c4 	movi	r3,11
 800f2a0:	188bc83a 	sub	r5,r3,r2
 800f2a4:	814ad83a 	srl	r5,r16,r5
 800f2a8:	00c00434 	movhi	r3,16
 800f2ac:	18ffffc4 	addi	r3,r3,-1
 800f2b0:	81a0983a 	sll	r16,r16,r6
 800f2b4:	2101ffcc 	andi	r4,r4,2047
 800f2b8:	28ca703a 	and	r5,r5,r3
 800f2bc:	003fed06 	br	800f274 <__alt_data_end+0xfc00f274>
 800f2c0:	0009883a 	mov	r4,zero
 800f2c4:	000b883a 	mov	r5,zero
 800f2c8:	003fea06 	br	800f274 <__alt_data_end+0xfc00f274>

0800f2cc <__clzsi2>:
 800f2cc:	00bfffd4 	movui	r2,65535
 800f2d0:	11000536 	bltu	r2,r4,800f2e8 <__clzsi2+0x1c>
 800f2d4:	00803fc4 	movi	r2,255
 800f2d8:	11000f36 	bltu	r2,r4,800f318 <__clzsi2+0x4c>
 800f2dc:	00800804 	movi	r2,32
 800f2e0:	0007883a 	mov	r3,zero
 800f2e4:	00000506 	br	800f2fc <__clzsi2+0x30>
 800f2e8:	00804034 	movhi	r2,256
 800f2ec:	10bfffc4 	addi	r2,r2,-1
 800f2f0:	11000c2e 	bgeu	r2,r4,800f324 <__clzsi2+0x58>
 800f2f4:	00800204 	movi	r2,8
 800f2f8:	00c00604 	movi	r3,24
 800f2fc:	20c8d83a 	srl	r4,r4,r3
 800f300:	00c20074 	movhi	r3,2049
 800f304:	18c93d04 	addi	r3,r3,9460
 800f308:	1909883a 	add	r4,r3,r4
 800f30c:	20c00003 	ldbu	r3,0(r4)
 800f310:	10c5c83a 	sub	r2,r2,r3
 800f314:	f800283a 	ret
 800f318:	00800604 	movi	r2,24
 800f31c:	00c00204 	movi	r3,8
 800f320:	003ff606 	br	800f2fc <__alt_data_end+0xfc00f2fc>
 800f324:	00800404 	movi	r2,16
 800f328:	1007883a 	mov	r3,r2
 800f32c:	003ff306 	br	800f2fc <__alt_data_end+0xfc00f2fc>

0800f330 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f330:	defffe04 	addi	sp,sp,-8
 800f334:	dfc00115 	stw	ra,4(sp)
 800f338:	df000015 	stw	fp,0(sp)
 800f33c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f340:	d0a00b17 	ldw	r2,-32724(gp)
 800f344:	10000326 	beq	r2,zero,800f354 <alt_get_errno+0x24>
 800f348:	d0a00b17 	ldw	r2,-32724(gp)
 800f34c:	103ee83a 	callr	r2
 800f350:	00000106 	br	800f358 <alt_get_errno+0x28>
 800f354:	d0a6d204 	addi	r2,gp,-25784
}
 800f358:	e037883a 	mov	sp,fp
 800f35c:	dfc00117 	ldw	ra,4(sp)
 800f360:	df000017 	ldw	fp,0(sp)
 800f364:	dec00204 	addi	sp,sp,8
 800f368:	f800283a 	ret

0800f36c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800f36c:	defffb04 	addi	sp,sp,-20
 800f370:	dfc00415 	stw	ra,16(sp)
 800f374:	df000315 	stw	fp,12(sp)
 800f378:	df000304 	addi	fp,sp,12
 800f37c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800f380:	e0bfff17 	ldw	r2,-4(fp)
 800f384:	10000816 	blt	r2,zero,800f3a8 <close+0x3c>
 800f388:	01400304 	movi	r5,12
 800f38c:	e13fff17 	ldw	r4,-4(fp)
 800f390:	800ca640 	call	800ca64 <__mulsi3>
 800f394:	1007883a 	mov	r3,r2
 800f398:	00820074 	movhi	r2,2049
 800f39c:	108bbd04 	addi	r2,r2,12020
 800f3a0:	1885883a 	add	r2,r3,r2
 800f3a4:	00000106 	br	800f3ac <close+0x40>
 800f3a8:	0005883a 	mov	r2,zero
 800f3ac:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 800f3b0:	e0bffd17 	ldw	r2,-12(fp)
 800f3b4:	10001926 	beq	r2,zero,800f41c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800f3b8:	e0bffd17 	ldw	r2,-12(fp)
 800f3bc:	10800017 	ldw	r2,0(r2)
 800f3c0:	10800417 	ldw	r2,16(r2)
 800f3c4:	10000626 	beq	r2,zero,800f3e0 <close+0x74>
 800f3c8:	e0bffd17 	ldw	r2,-12(fp)
 800f3cc:	10800017 	ldw	r2,0(r2)
 800f3d0:	10800417 	ldw	r2,16(r2)
 800f3d4:	e13ffd17 	ldw	r4,-12(fp)
 800f3d8:	103ee83a 	callr	r2
 800f3dc:	00000106 	br	800f3e4 <close+0x78>
 800f3e0:	0005883a 	mov	r2,zero
 800f3e4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800f3e8:	e13fff17 	ldw	r4,-4(fp)
 800f3ec:	800fa540 	call	800fa54 <alt_release_fd>
    if (rval < 0)
 800f3f0:	e0bffe17 	ldw	r2,-8(fp)
 800f3f4:	1000070e 	bge	r2,zero,800f414 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 800f3f8:	800f3300 	call	800f330 <alt_get_errno>
 800f3fc:	1007883a 	mov	r3,r2
 800f400:	e0bffe17 	ldw	r2,-8(fp)
 800f404:	0085c83a 	sub	r2,zero,r2
 800f408:	18800015 	stw	r2,0(r3)
      return -1;
 800f40c:	00bfffc4 	movi	r2,-1
 800f410:	00000706 	br	800f430 <close+0xc4>
    }
    return 0;
 800f414:	0005883a 	mov	r2,zero
 800f418:	00000506 	br	800f430 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800f41c:	800f3300 	call	800f330 <alt_get_errno>
 800f420:	1007883a 	mov	r3,r2
 800f424:	00801444 	movi	r2,81
 800f428:	18800015 	stw	r2,0(r3)
    return -1;
 800f42c:	00bfffc4 	movi	r2,-1
  }
}
 800f430:	e037883a 	mov	sp,fp
 800f434:	dfc00117 	ldw	ra,4(sp)
 800f438:	df000017 	ldw	fp,0(sp)
 800f43c:	dec00204 	addi	sp,sp,8
 800f440:	f800283a 	ret

0800f444 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800f444:	defffc04 	addi	sp,sp,-16
 800f448:	df000315 	stw	fp,12(sp)
 800f44c:	df000304 	addi	fp,sp,12
 800f450:	e13ffd15 	stw	r4,-12(fp)
 800f454:	e17ffe15 	stw	r5,-8(fp)
 800f458:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800f45c:	e0bfff17 	ldw	r2,-4(fp)
}
 800f460:	e037883a 	mov	sp,fp
 800f464:	df000017 	ldw	fp,0(sp)
 800f468:	dec00104 	addi	sp,sp,4
 800f46c:	f800283a 	ret

0800f470 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f470:	defffe04 	addi	sp,sp,-8
 800f474:	dfc00115 	stw	ra,4(sp)
 800f478:	df000015 	stw	fp,0(sp)
 800f47c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f480:	d0a00b17 	ldw	r2,-32724(gp)
 800f484:	10000326 	beq	r2,zero,800f494 <alt_get_errno+0x24>
 800f488:	d0a00b17 	ldw	r2,-32724(gp)
 800f48c:	103ee83a 	callr	r2
 800f490:	00000106 	br	800f498 <alt_get_errno+0x28>
 800f494:	d0a6d204 	addi	r2,gp,-25784
}
 800f498:	e037883a 	mov	sp,fp
 800f49c:	dfc00117 	ldw	ra,4(sp)
 800f4a0:	df000017 	ldw	fp,0(sp)
 800f4a4:	dec00204 	addi	sp,sp,8
 800f4a8:	f800283a 	ret

0800f4ac <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800f4ac:	defffb04 	addi	sp,sp,-20
 800f4b0:	dfc00415 	stw	ra,16(sp)
 800f4b4:	df000315 	stw	fp,12(sp)
 800f4b8:	df000304 	addi	fp,sp,12
 800f4bc:	e13ffe15 	stw	r4,-8(fp)
 800f4c0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800f4c4:	e0bffe17 	ldw	r2,-8(fp)
 800f4c8:	10000816 	blt	r2,zero,800f4ec <fstat+0x40>
 800f4cc:	01400304 	movi	r5,12
 800f4d0:	e13ffe17 	ldw	r4,-8(fp)
 800f4d4:	800ca640 	call	800ca64 <__mulsi3>
 800f4d8:	1007883a 	mov	r3,r2
 800f4dc:	00820074 	movhi	r2,2049
 800f4e0:	108bbd04 	addi	r2,r2,12020
 800f4e4:	1885883a 	add	r2,r3,r2
 800f4e8:	00000106 	br	800f4f0 <fstat+0x44>
 800f4ec:	0005883a 	mov	r2,zero
 800f4f0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 800f4f4:	e0bffd17 	ldw	r2,-12(fp)
 800f4f8:	10001026 	beq	r2,zero,800f53c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800f4fc:	e0bffd17 	ldw	r2,-12(fp)
 800f500:	10800017 	ldw	r2,0(r2)
 800f504:	10800817 	ldw	r2,32(r2)
 800f508:	10000726 	beq	r2,zero,800f528 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 800f50c:	e0bffd17 	ldw	r2,-12(fp)
 800f510:	10800017 	ldw	r2,0(r2)
 800f514:	10800817 	ldw	r2,32(r2)
 800f518:	e17fff17 	ldw	r5,-4(fp)
 800f51c:	e13ffd17 	ldw	r4,-12(fp)
 800f520:	103ee83a 	callr	r2
 800f524:	00000a06 	br	800f550 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800f528:	e0bfff17 	ldw	r2,-4(fp)
 800f52c:	00c80004 	movi	r3,8192
 800f530:	10c00115 	stw	r3,4(r2)
      return 0;
 800f534:	0005883a 	mov	r2,zero
 800f538:	00000506 	br	800f550 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800f53c:	800f4700 	call	800f470 <alt_get_errno>
 800f540:	1007883a 	mov	r3,r2
 800f544:	00801444 	movi	r2,81
 800f548:	18800015 	stw	r2,0(r3)
    return -1;
 800f54c:	00bfffc4 	movi	r2,-1
  }
}
 800f550:	e037883a 	mov	sp,fp
 800f554:	dfc00117 	ldw	ra,4(sp)
 800f558:	df000017 	ldw	fp,0(sp)
 800f55c:	dec00204 	addi	sp,sp,8
 800f560:	f800283a 	ret

0800f564 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f564:	defffe04 	addi	sp,sp,-8
 800f568:	dfc00115 	stw	ra,4(sp)
 800f56c:	df000015 	stw	fp,0(sp)
 800f570:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f574:	d0a00b17 	ldw	r2,-32724(gp)
 800f578:	10000326 	beq	r2,zero,800f588 <alt_get_errno+0x24>
 800f57c:	d0a00b17 	ldw	r2,-32724(gp)
 800f580:	103ee83a 	callr	r2
 800f584:	00000106 	br	800f58c <alt_get_errno+0x28>
 800f588:	d0a6d204 	addi	r2,gp,-25784
}
 800f58c:	e037883a 	mov	sp,fp
 800f590:	dfc00117 	ldw	ra,4(sp)
 800f594:	df000017 	ldw	fp,0(sp)
 800f598:	dec00204 	addi	sp,sp,8
 800f59c:	f800283a 	ret

0800f5a0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800f5a0:	deffed04 	addi	sp,sp,-76
 800f5a4:	dfc01215 	stw	ra,72(sp)
 800f5a8:	df001115 	stw	fp,68(sp)
 800f5ac:	df001104 	addi	fp,sp,68
 800f5b0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800f5b4:	e0bfff17 	ldw	r2,-4(fp)
 800f5b8:	10000816 	blt	r2,zero,800f5dc <isatty+0x3c>
 800f5bc:	01400304 	movi	r5,12
 800f5c0:	e13fff17 	ldw	r4,-4(fp)
 800f5c4:	800ca640 	call	800ca64 <__mulsi3>
 800f5c8:	1007883a 	mov	r3,r2
 800f5cc:	00820074 	movhi	r2,2049
 800f5d0:	108bbd04 	addi	r2,r2,12020
 800f5d4:	1885883a 	add	r2,r3,r2
 800f5d8:	00000106 	br	800f5e0 <isatty+0x40>
 800f5dc:	0005883a 	mov	r2,zero
 800f5e0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 800f5e4:	e0bfef17 	ldw	r2,-68(fp)
 800f5e8:	10000e26 	beq	r2,zero,800f624 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800f5ec:	e0bfef17 	ldw	r2,-68(fp)
 800f5f0:	10800017 	ldw	r2,0(r2)
 800f5f4:	10800817 	ldw	r2,32(r2)
 800f5f8:	1000021e 	bne	r2,zero,800f604 <isatty+0x64>
    {
      return 1;
 800f5fc:	00800044 	movi	r2,1
 800f600:	00000d06 	br	800f638 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800f604:	e0bff004 	addi	r2,fp,-64
 800f608:	100b883a 	mov	r5,r2
 800f60c:	e13fff17 	ldw	r4,-4(fp)
 800f610:	800f4ac0 	call	800f4ac <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800f614:	e0bff117 	ldw	r2,-60(fp)
 800f618:	10880020 	cmpeqi	r2,r2,8192
 800f61c:	10803fcc 	andi	r2,r2,255
 800f620:	00000506 	br	800f638 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800f624:	800f5640 	call	800f564 <alt_get_errno>
 800f628:	1007883a 	mov	r3,r2
 800f62c:	00801444 	movi	r2,81
 800f630:	18800015 	stw	r2,0(r3)
    return 0;
 800f634:	0005883a 	mov	r2,zero
  }
}
 800f638:	e037883a 	mov	sp,fp
 800f63c:	dfc00117 	ldw	ra,4(sp)
 800f640:	df000017 	ldw	fp,0(sp)
 800f644:	dec00204 	addi	sp,sp,8
 800f648:	f800283a 	ret

0800f64c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800f64c:	defffc04 	addi	sp,sp,-16
 800f650:	df000315 	stw	fp,12(sp)
 800f654:	df000304 	addi	fp,sp,12
 800f658:	e13ffd15 	stw	r4,-12(fp)
 800f65c:	e17ffe15 	stw	r5,-8(fp)
 800f660:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 800f664:	e0fffe17 	ldw	r3,-8(fp)
 800f668:	e0bffd17 	ldw	r2,-12(fp)
 800f66c:	18800c26 	beq	r3,r2,800f6a0 <alt_load_section+0x54>
  {
    while( to != end )
 800f670:	00000806 	br	800f694 <alt_load_section+0x48>
    {
      *to++ = *from++;
 800f674:	e0bffe17 	ldw	r2,-8(fp)
 800f678:	10c00104 	addi	r3,r2,4
 800f67c:	e0fffe15 	stw	r3,-8(fp)
 800f680:	e0fffd17 	ldw	r3,-12(fp)
 800f684:	19000104 	addi	r4,r3,4
 800f688:	e13ffd15 	stw	r4,-12(fp)
 800f68c:	18c00017 	ldw	r3,0(r3)
 800f690:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 800f694:	e0fffe17 	ldw	r3,-8(fp)
 800f698:	e0bfff17 	ldw	r2,-4(fp)
 800f69c:	18bff51e 	bne	r3,r2,800f674 <__alt_data_end+0xfc00f674>
    {
      *to++ = *from++;
    }
  }
}
 800f6a0:	0001883a 	nop
 800f6a4:	e037883a 	mov	sp,fp
 800f6a8:	df000017 	ldw	fp,0(sp)
 800f6ac:	dec00104 	addi	sp,sp,4
 800f6b0:	f800283a 	ret

0800f6b4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800f6b4:	defffe04 	addi	sp,sp,-8
 800f6b8:	dfc00115 	stw	ra,4(sp)
 800f6bc:	df000015 	stw	fp,0(sp)
 800f6c0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800f6c4:	01820074 	movhi	r6,2049
 800f6c8:	31904504 	addi	r6,r6,16660
 800f6cc:	01420074 	movhi	r5,2049
 800f6d0:	29498a04 	addi	r5,r5,9768
 800f6d4:	01020074 	movhi	r4,2049
 800f6d8:	21104504 	addi	r4,r4,16660
 800f6dc:	800f64c0 	call	800f64c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800f6e0:	01820034 	movhi	r6,2048
 800f6e4:	31808c04 	addi	r6,r6,560
 800f6e8:	01420034 	movhi	r5,2048
 800f6ec:	29400804 	addi	r5,r5,32
 800f6f0:	01020034 	movhi	r4,2048
 800f6f4:	21000804 	addi	r4,r4,32
 800f6f8:	800f64c0 	call	800f64c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800f6fc:	01820074 	movhi	r6,2049
 800f700:	31898a04 	addi	r6,r6,9768
 800f704:	01420074 	movhi	r5,2049
 800f708:	2946d404 	addi	r5,r5,6992
 800f70c:	01020074 	movhi	r4,2049
 800f710:	2106d404 	addi	r4,r4,6992
 800f714:	800f64c0 	call	800f64c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800f718:	8010a980 	call	8010a98 <alt_dcache_flush_all>
  alt_icache_flush_all();
 800f71c:	8010c580 	call	8010c58 <alt_icache_flush_all>
}
 800f720:	0001883a 	nop
 800f724:	e037883a 	mov	sp,fp
 800f728:	dfc00117 	ldw	ra,4(sp)
 800f72c:	df000017 	ldw	fp,0(sp)
 800f730:	dec00204 	addi	sp,sp,8
 800f734:	f800283a 	ret

0800f738 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f738:	defffe04 	addi	sp,sp,-8
 800f73c:	dfc00115 	stw	ra,4(sp)
 800f740:	df000015 	stw	fp,0(sp)
 800f744:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f748:	d0a00b17 	ldw	r2,-32724(gp)
 800f74c:	10000326 	beq	r2,zero,800f75c <alt_get_errno+0x24>
 800f750:	d0a00b17 	ldw	r2,-32724(gp)
 800f754:	103ee83a 	callr	r2
 800f758:	00000106 	br	800f760 <alt_get_errno+0x28>
 800f75c:	d0a6d204 	addi	r2,gp,-25784
}
 800f760:	e037883a 	mov	sp,fp
 800f764:	dfc00117 	ldw	ra,4(sp)
 800f768:	df000017 	ldw	fp,0(sp)
 800f76c:	dec00204 	addi	sp,sp,8
 800f770:	f800283a 	ret

0800f774 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800f774:	defff904 	addi	sp,sp,-28
 800f778:	dfc00615 	stw	ra,24(sp)
 800f77c:	df000515 	stw	fp,20(sp)
 800f780:	df000504 	addi	fp,sp,20
 800f784:	e13ffd15 	stw	r4,-12(fp)
 800f788:	e17ffe15 	stw	r5,-8(fp)
 800f78c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800f790:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800f794:	e0bffd17 	ldw	r2,-12(fp)
 800f798:	10000816 	blt	r2,zero,800f7bc <lseek+0x48>
 800f79c:	01400304 	movi	r5,12
 800f7a0:	e13ffd17 	ldw	r4,-12(fp)
 800f7a4:	800ca640 	call	800ca64 <__mulsi3>
 800f7a8:	1007883a 	mov	r3,r2
 800f7ac:	00820074 	movhi	r2,2049
 800f7b0:	108bbd04 	addi	r2,r2,12020
 800f7b4:	1885883a 	add	r2,r3,r2
 800f7b8:	00000106 	br	800f7c0 <lseek+0x4c>
 800f7bc:	0005883a 	mov	r2,zero
 800f7c0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 800f7c4:	e0bffc17 	ldw	r2,-16(fp)
 800f7c8:	10001026 	beq	r2,zero,800f80c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800f7cc:	e0bffc17 	ldw	r2,-16(fp)
 800f7d0:	10800017 	ldw	r2,0(r2)
 800f7d4:	10800717 	ldw	r2,28(r2)
 800f7d8:	10000926 	beq	r2,zero,800f800 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800f7dc:	e0bffc17 	ldw	r2,-16(fp)
 800f7e0:	10800017 	ldw	r2,0(r2)
 800f7e4:	10800717 	ldw	r2,28(r2)
 800f7e8:	e1bfff17 	ldw	r6,-4(fp)
 800f7ec:	e17ffe17 	ldw	r5,-8(fp)
 800f7f0:	e13ffc17 	ldw	r4,-16(fp)
 800f7f4:	103ee83a 	callr	r2
 800f7f8:	e0bffb15 	stw	r2,-20(fp)
 800f7fc:	00000506 	br	800f814 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800f800:	00bfde84 	movi	r2,-134
 800f804:	e0bffb15 	stw	r2,-20(fp)
 800f808:	00000206 	br	800f814 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 800f80c:	00bfebc4 	movi	r2,-81
 800f810:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 800f814:	e0bffb17 	ldw	r2,-20(fp)
 800f818:	1000070e 	bge	r2,zero,800f838 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 800f81c:	800f7380 	call	800f738 <alt_get_errno>
 800f820:	1007883a 	mov	r3,r2
 800f824:	e0bffb17 	ldw	r2,-20(fp)
 800f828:	0085c83a 	sub	r2,zero,r2
 800f82c:	18800015 	stw	r2,0(r3)
    rc = -1;
 800f830:	00bfffc4 	movi	r2,-1
 800f834:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 800f838:	e0bffb17 	ldw	r2,-20(fp)
}
 800f83c:	e037883a 	mov	sp,fp
 800f840:	dfc00117 	ldw	ra,4(sp)
 800f844:	df000017 	ldw	fp,0(sp)
 800f848:	dec00204 	addi	sp,sp,8
 800f84c:	f800283a 	ret

0800f850 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800f850:	defffd04 	addi	sp,sp,-12
 800f854:	dfc00215 	stw	ra,8(sp)
 800f858:	df000115 	stw	fp,4(sp)
 800f85c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800f860:	0009883a 	mov	r4,zero
 800f864:	800fd280 	call	800fd28 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800f868:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800f86c:	800fd600 	call	800fd60 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800f870:	01820074 	movhi	r6,2049
 800f874:	31898004 	addi	r6,r6,9728
 800f878:	01420074 	movhi	r5,2049
 800f87c:	29498004 	addi	r5,r5,9728
 800f880:	01020074 	movhi	r4,2049
 800f884:	21098004 	addi	r4,r4,9728
 800f888:	8010ffc0 	call	8010ffc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800f88c:	8010b980 	call	8010b98 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800f890:	01020074 	movhi	r4,2049
 800f894:	2102fe04 	addi	r4,r4,3064
 800f898:	80117bc0 	call	80117bc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800f89c:	d0a6d317 	ldw	r2,-25780(gp)
 800f8a0:	d0e6d417 	ldw	r3,-25776(gp)
 800f8a4:	d126d517 	ldw	r4,-25772(gp)
 800f8a8:	200d883a 	mov	r6,r4
 800f8ac:	180b883a 	mov	r5,r3
 800f8b0:	1009883a 	mov	r4,r2
 800f8b4:	80004000 	call	8000400 <main>
 800f8b8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800f8bc:	01000044 	movi	r4,1
 800f8c0:	800f36c0 	call	800f36c <close>
  exit (result);
 800f8c4:	e13fff17 	ldw	r4,-4(fp)
 800f8c8:	80117d00 	call	80117d0 <exit>

0800f8cc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800f8cc:	defffe04 	addi	sp,sp,-8
 800f8d0:	df000115 	stw	fp,4(sp)
 800f8d4:	df000104 	addi	fp,sp,4
 800f8d8:	e13fff15 	stw	r4,-4(fp)
}
 800f8dc:	0001883a 	nop
 800f8e0:	e037883a 	mov	sp,fp
 800f8e4:	df000017 	ldw	fp,0(sp)
 800f8e8:	dec00104 	addi	sp,sp,4
 800f8ec:	f800283a 	ret

0800f8f0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800f8f0:	defffe04 	addi	sp,sp,-8
 800f8f4:	df000115 	stw	fp,4(sp)
 800f8f8:	df000104 	addi	fp,sp,4
 800f8fc:	e13fff15 	stw	r4,-4(fp)
}
 800f900:	0001883a 	nop
 800f904:	e037883a 	mov	sp,fp
 800f908:	df000017 	ldw	fp,0(sp)
 800f90c:	dec00104 	addi	sp,sp,4
 800f910:	f800283a 	ret

0800f914 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f914:	defffe04 	addi	sp,sp,-8
 800f918:	dfc00115 	stw	ra,4(sp)
 800f91c:	df000015 	stw	fp,0(sp)
 800f920:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f924:	d0a00b17 	ldw	r2,-32724(gp)
 800f928:	10000326 	beq	r2,zero,800f938 <alt_get_errno+0x24>
 800f92c:	d0a00b17 	ldw	r2,-32724(gp)
 800f930:	103ee83a 	callr	r2
 800f934:	00000106 	br	800f93c <alt_get_errno+0x28>
 800f938:	d0a6d204 	addi	r2,gp,-25784
}
 800f93c:	e037883a 	mov	sp,fp
 800f940:	dfc00117 	ldw	ra,4(sp)
 800f944:	df000017 	ldw	fp,0(sp)
 800f948:	dec00204 	addi	sp,sp,8
 800f94c:	f800283a 	ret

0800f950 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800f950:	defff904 	addi	sp,sp,-28
 800f954:	dfc00615 	stw	ra,24(sp)
 800f958:	df000515 	stw	fp,20(sp)
 800f95c:	df000504 	addi	fp,sp,20
 800f960:	e13ffd15 	stw	r4,-12(fp)
 800f964:	e17ffe15 	stw	r5,-8(fp)
 800f968:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800f96c:	e0bffd17 	ldw	r2,-12(fp)
 800f970:	10000816 	blt	r2,zero,800f994 <read+0x44>
 800f974:	01400304 	movi	r5,12
 800f978:	e13ffd17 	ldw	r4,-12(fp)
 800f97c:	800ca640 	call	800ca64 <__mulsi3>
 800f980:	1007883a 	mov	r3,r2
 800f984:	00820074 	movhi	r2,2049
 800f988:	108bbd04 	addi	r2,r2,12020
 800f98c:	1885883a 	add	r2,r3,r2
 800f990:	00000106 	br	800f998 <read+0x48>
 800f994:	0005883a 	mov	r2,zero
 800f998:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800f99c:	e0bffb17 	ldw	r2,-20(fp)
 800f9a0:	10002226 	beq	r2,zero,800fa2c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800f9a4:	e0bffb17 	ldw	r2,-20(fp)
 800f9a8:	10800217 	ldw	r2,8(r2)
 800f9ac:	108000cc 	andi	r2,r2,3
 800f9b0:	10800060 	cmpeqi	r2,r2,1
 800f9b4:	1000181e 	bne	r2,zero,800fa18 <read+0xc8>
        (fd->dev->read))
 800f9b8:	e0bffb17 	ldw	r2,-20(fp)
 800f9bc:	10800017 	ldw	r2,0(r2)
 800f9c0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800f9c4:	10001426 	beq	r2,zero,800fa18 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800f9c8:	e0bffb17 	ldw	r2,-20(fp)
 800f9cc:	10800017 	ldw	r2,0(r2)
 800f9d0:	10800517 	ldw	r2,20(r2)
 800f9d4:	e0ffff17 	ldw	r3,-4(fp)
 800f9d8:	180d883a 	mov	r6,r3
 800f9dc:	e17ffe17 	ldw	r5,-8(fp)
 800f9e0:	e13ffb17 	ldw	r4,-20(fp)
 800f9e4:	103ee83a 	callr	r2
 800f9e8:	e0bffc15 	stw	r2,-16(fp)
 800f9ec:	e0bffc17 	ldw	r2,-16(fp)
 800f9f0:	1000070e 	bge	r2,zero,800fa10 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 800f9f4:	800f9140 	call	800f914 <alt_get_errno>
 800f9f8:	1007883a 	mov	r3,r2
 800f9fc:	e0bffc17 	ldw	r2,-16(fp)
 800fa00:	0085c83a 	sub	r2,zero,r2
 800fa04:	18800015 	stw	r2,0(r3)
          return -1;
 800fa08:	00bfffc4 	movi	r2,-1
 800fa0c:	00000c06 	br	800fa40 <read+0xf0>
        }
        return rval;
 800fa10:	e0bffc17 	ldw	r2,-16(fp)
 800fa14:	00000a06 	br	800fa40 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800fa18:	800f9140 	call	800f914 <alt_get_errno>
 800fa1c:	1007883a 	mov	r3,r2
 800fa20:	00800344 	movi	r2,13
 800fa24:	18800015 	stw	r2,0(r3)
 800fa28:	00000406 	br	800fa3c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800fa2c:	800f9140 	call	800f914 <alt_get_errno>
 800fa30:	1007883a 	mov	r3,r2
 800fa34:	00801444 	movi	r2,81
 800fa38:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800fa3c:	00bfffc4 	movi	r2,-1
}
 800fa40:	e037883a 	mov	sp,fp
 800fa44:	dfc00117 	ldw	ra,4(sp)
 800fa48:	df000017 	ldw	fp,0(sp)
 800fa4c:	dec00204 	addi	sp,sp,8
 800fa50:	f800283a 	ret

0800fa54 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800fa54:	defffc04 	addi	sp,sp,-16
 800fa58:	dfc00315 	stw	ra,12(sp)
 800fa5c:	df000215 	stw	fp,8(sp)
 800fa60:	dc000115 	stw	r16,4(sp)
 800fa64:	df000204 	addi	fp,sp,8
 800fa68:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 800fa6c:	e0bffe17 	ldw	r2,-8(fp)
 800fa70:	108000d0 	cmplti	r2,r2,3
 800fa74:	1000111e 	bne	r2,zero,800fabc <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 800fa78:	04020074 	movhi	r16,2049
 800fa7c:	840bbd04 	addi	r16,r16,12020
 800fa80:	e0bffe17 	ldw	r2,-8(fp)
 800fa84:	01400304 	movi	r5,12
 800fa88:	1009883a 	mov	r4,r2
 800fa8c:	800ca640 	call	800ca64 <__mulsi3>
 800fa90:	8085883a 	add	r2,r16,r2
 800fa94:	10800204 	addi	r2,r2,8
 800fa98:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800fa9c:	04020074 	movhi	r16,2049
 800faa0:	840bbd04 	addi	r16,r16,12020
 800faa4:	e0bffe17 	ldw	r2,-8(fp)
 800faa8:	01400304 	movi	r5,12
 800faac:	1009883a 	mov	r4,r2
 800fab0:	800ca640 	call	800ca64 <__mulsi3>
 800fab4:	8085883a 	add	r2,r16,r2
 800fab8:	10000015 	stw	zero,0(r2)
  }
}
 800fabc:	0001883a 	nop
 800fac0:	e6ffff04 	addi	sp,fp,-4
 800fac4:	dfc00217 	ldw	ra,8(sp)
 800fac8:	df000117 	ldw	fp,4(sp)
 800facc:	dc000017 	ldw	r16,0(sp)
 800fad0:	dec00304 	addi	sp,sp,12
 800fad4:	f800283a 	ret

0800fad8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800fad8:	defff904 	addi	sp,sp,-28
 800fadc:	df000615 	stw	fp,24(sp)
 800fae0:	df000604 	addi	fp,sp,24
 800fae4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800fae8:	0005303a 	rdctl	r2,status
 800faec:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800faf0:	e0fffe17 	ldw	r3,-8(fp)
 800faf4:	00bfff84 	movi	r2,-2
 800faf8:	1884703a 	and	r2,r3,r2
 800fafc:	1001703a 	wrctl	status,r2
  
  return context;
 800fb00:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800fb04:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800fb08:	d0a00c17 	ldw	r2,-32720(gp)
 800fb0c:	10c000c4 	addi	r3,r2,3
 800fb10:	00bfff04 	movi	r2,-4
 800fb14:	1884703a 	and	r2,r3,r2
 800fb18:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800fb1c:	d0e00c17 	ldw	r3,-32720(gp)
 800fb20:	e0bfff17 	ldw	r2,-4(fp)
 800fb24:	1887883a 	add	r3,r3,r2
 800fb28:	00830034 	movhi	r2,3072
 800fb2c:	10800004 	addi	r2,r2,0
 800fb30:	10c0062e 	bgeu	r2,r3,800fb4c <sbrk+0x74>
 800fb34:	e0bffb17 	ldw	r2,-20(fp)
 800fb38:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800fb3c:	e0bffa17 	ldw	r2,-24(fp)
 800fb40:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800fb44:	00bfffc4 	movi	r2,-1
 800fb48:	00000b06 	br	800fb78 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 800fb4c:	d0a00c17 	ldw	r2,-32720(gp)
 800fb50:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 800fb54:	d0e00c17 	ldw	r3,-32720(gp)
 800fb58:	e0bfff17 	ldw	r2,-4(fp)
 800fb5c:	1885883a 	add	r2,r3,r2
 800fb60:	d0a00c15 	stw	r2,-32720(gp)
 800fb64:	e0bffb17 	ldw	r2,-20(fp)
 800fb68:	e0bffc15 	stw	r2,-16(fp)
 800fb6c:	e0bffc17 	ldw	r2,-16(fp)
 800fb70:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800fb74:	e0bffd17 	ldw	r2,-12(fp)
} 
 800fb78:	e037883a 	mov	sp,fp
 800fb7c:	df000017 	ldw	fp,0(sp)
 800fb80:	dec00104 	addi	sp,sp,4
 800fb84:	f800283a 	ret

0800fb88 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 800fb88:	defffd04 	addi	sp,sp,-12
 800fb8c:	dfc00215 	stw	ra,8(sp)
 800fb90:	df000115 	stw	fp,4(sp)
 800fb94:	df000104 	addi	fp,sp,4
 800fb98:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 800fb9c:	e13fff17 	ldw	r4,-4(fp)
 800fba0:	80109400 	call	8010940 <alt_busy_sleep>
}
 800fba4:	e037883a 	mov	sp,fp
 800fba8:	dfc00117 	ldw	ra,4(sp)
 800fbac:	df000017 	ldw	fp,0(sp)
 800fbb0:	dec00204 	addi	sp,sp,8
 800fbb4:	f800283a 	ret

0800fbb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800fbb8:	defffe04 	addi	sp,sp,-8
 800fbbc:	dfc00115 	stw	ra,4(sp)
 800fbc0:	df000015 	stw	fp,0(sp)
 800fbc4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800fbc8:	d0a00b17 	ldw	r2,-32724(gp)
 800fbcc:	10000326 	beq	r2,zero,800fbdc <alt_get_errno+0x24>
 800fbd0:	d0a00b17 	ldw	r2,-32724(gp)
 800fbd4:	103ee83a 	callr	r2
 800fbd8:	00000106 	br	800fbe0 <alt_get_errno+0x28>
 800fbdc:	d0a6d204 	addi	r2,gp,-25784
}
 800fbe0:	e037883a 	mov	sp,fp
 800fbe4:	dfc00117 	ldw	ra,4(sp)
 800fbe8:	df000017 	ldw	fp,0(sp)
 800fbec:	dec00204 	addi	sp,sp,8
 800fbf0:	f800283a 	ret

0800fbf4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 800fbf4:	defff904 	addi	sp,sp,-28
 800fbf8:	dfc00615 	stw	ra,24(sp)
 800fbfc:	df000515 	stw	fp,20(sp)
 800fc00:	df000504 	addi	fp,sp,20
 800fc04:	e13ffd15 	stw	r4,-12(fp)
 800fc08:	e17ffe15 	stw	r5,-8(fp)
 800fc0c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800fc10:	e0bffd17 	ldw	r2,-12(fp)
 800fc14:	10000816 	blt	r2,zero,800fc38 <write+0x44>
 800fc18:	01400304 	movi	r5,12
 800fc1c:	e13ffd17 	ldw	r4,-12(fp)
 800fc20:	800ca640 	call	800ca64 <__mulsi3>
 800fc24:	1007883a 	mov	r3,r2
 800fc28:	00820074 	movhi	r2,2049
 800fc2c:	108bbd04 	addi	r2,r2,12020
 800fc30:	1885883a 	add	r2,r3,r2
 800fc34:	00000106 	br	800fc3c <write+0x48>
 800fc38:	0005883a 	mov	r2,zero
 800fc3c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800fc40:	e0bffb17 	ldw	r2,-20(fp)
 800fc44:	10002126 	beq	r2,zero,800fccc <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 800fc48:	e0bffb17 	ldw	r2,-20(fp)
 800fc4c:	10800217 	ldw	r2,8(r2)
 800fc50:	108000cc 	andi	r2,r2,3
 800fc54:	10001826 	beq	r2,zero,800fcb8 <write+0xc4>
 800fc58:	e0bffb17 	ldw	r2,-20(fp)
 800fc5c:	10800017 	ldw	r2,0(r2)
 800fc60:	10800617 	ldw	r2,24(r2)
 800fc64:	10001426 	beq	r2,zero,800fcb8 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 800fc68:	e0bffb17 	ldw	r2,-20(fp)
 800fc6c:	10800017 	ldw	r2,0(r2)
 800fc70:	10800617 	ldw	r2,24(r2)
 800fc74:	e0ffff17 	ldw	r3,-4(fp)
 800fc78:	180d883a 	mov	r6,r3
 800fc7c:	e17ffe17 	ldw	r5,-8(fp)
 800fc80:	e13ffb17 	ldw	r4,-20(fp)
 800fc84:	103ee83a 	callr	r2
 800fc88:	e0bffc15 	stw	r2,-16(fp)
 800fc8c:	e0bffc17 	ldw	r2,-16(fp)
 800fc90:	1000070e 	bge	r2,zero,800fcb0 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 800fc94:	800fbb80 	call	800fbb8 <alt_get_errno>
 800fc98:	1007883a 	mov	r3,r2
 800fc9c:	e0bffc17 	ldw	r2,-16(fp)
 800fca0:	0085c83a 	sub	r2,zero,r2
 800fca4:	18800015 	stw	r2,0(r3)
        return -1;
 800fca8:	00bfffc4 	movi	r2,-1
 800fcac:	00000c06 	br	800fce0 <write+0xec>
      }
      return rval;
 800fcb0:	e0bffc17 	ldw	r2,-16(fp)
 800fcb4:	00000a06 	br	800fce0 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 800fcb8:	800fbb80 	call	800fbb8 <alt_get_errno>
 800fcbc:	1007883a 	mov	r3,r2
 800fcc0:	00800344 	movi	r2,13
 800fcc4:	18800015 	stw	r2,0(r3)
 800fcc8:	00000406 	br	800fcdc <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 800fccc:	800fbb80 	call	800fbb8 <alt_get_errno>
 800fcd0:	1007883a 	mov	r3,r2
 800fcd4:	00801444 	movi	r2,81
 800fcd8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800fcdc:	00bfffc4 	movi	r2,-1
}
 800fce0:	e037883a 	mov	sp,fp
 800fce4:	dfc00117 	ldw	ra,4(sp)
 800fce8:	df000017 	ldw	fp,0(sp)
 800fcec:	dec00204 	addi	sp,sp,8
 800fcf0:	f800283a 	ret

0800fcf4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 800fcf4:	defffd04 	addi	sp,sp,-12
 800fcf8:	dfc00215 	stw	ra,8(sp)
 800fcfc:	df000115 	stw	fp,4(sp)
 800fd00:	df000104 	addi	fp,sp,4
 800fd04:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800fd08:	d1600804 	addi	r5,gp,-32736
 800fd0c:	e13fff17 	ldw	r4,-4(fp)
 800fd10:	8010af40 	call	8010af4 <alt_dev_llist_insert>
}
 800fd14:	e037883a 	mov	sp,fp
 800fd18:	dfc00117 	ldw	ra,4(sp)
 800fd1c:	df000017 	ldw	fp,0(sp)
 800fd20:	dec00204 	addi	sp,sp,8
 800fd24:	f800283a 	ret

0800fd28 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800fd28:	defffd04 	addi	sp,sp,-12
 800fd2c:	dfc00215 	stw	ra,8(sp)
 800fd30:	df000115 	stw	fp,4(sp)
 800fd34:	df000104 	addi	fp,sp,4
 800fd38:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 800fd3c:	80114a00 	call	80114a0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800fd40:	00800044 	movi	r2,1
 800fd44:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800fd48:	0001883a 	nop
 800fd4c:	e037883a 	mov	sp,fp
 800fd50:	dfc00117 	ldw	ra,4(sp)
 800fd54:	df000017 	ldw	fp,0(sp)
 800fd58:	dec00204 	addi	sp,sp,8
 800fd5c:	f800283a 	ret

0800fd60 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800fd60:	defffe04 	addi	sp,sp,-8
 800fd64:	dfc00115 	stw	ra,4(sp)
 800fd68:	df000015 	stw	fp,0(sp)
 800fd6c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 800fd70:	01800144 	movi	r6,5
 800fd74:	000b883a 	mov	r5,zero
 800fd78:	01020074 	movhi	r4,2049
 800fd7c:	210c2704 	addi	r4,r4,12444
 800fd80:	800ff100 	call	800ff10 <altera_avalon_jtag_uart_init>
 800fd84:	01020074 	movhi	r4,2049
 800fd88:	210c1d04 	addi	r4,r4,12404
 800fd8c:	800fcf40 	call	800fcf4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 800fd90:	0001883a 	nop
}
 800fd94:	0001883a 	nop
 800fd98:	e037883a 	mov	sp,fp
 800fd9c:	dfc00117 	ldw	ra,4(sp)
 800fda0:	df000017 	ldw	fp,0(sp)
 800fda4:	dec00204 	addi	sp,sp,8
 800fda8:	f800283a 	ret

0800fdac <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800fdac:	defffa04 	addi	sp,sp,-24
 800fdb0:	dfc00515 	stw	ra,20(sp)
 800fdb4:	df000415 	stw	fp,16(sp)
 800fdb8:	df000404 	addi	fp,sp,16
 800fdbc:	e13ffd15 	stw	r4,-12(fp)
 800fdc0:	e17ffe15 	stw	r5,-8(fp)
 800fdc4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800fdc8:	e0bffd17 	ldw	r2,-12(fp)
 800fdcc:	10800017 	ldw	r2,0(r2)
 800fdd0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 800fdd4:	e0bffc17 	ldw	r2,-16(fp)
 800fdd8:	10c00a04 	addi	r3,r2,40
 800fddc:	e0bffd17 	ldw	r2,-12(fp)
 800fde0:	10800217 	ldw	r2,8(r2)
 800fde4:	100f883a 	mov	r7,r2
 800fde8:	e1bfff17 	ldw	r6,-4(fp)
 800fdec:	e17ffe17 	ldw	r5,-8(fp)
 800fdf0:	1809883a 	mov	r4,r3
 800fdf4:	80103d40 	call	80103d4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 800fdf8:	e037883a 	mov	sp,fp
 800fdfc:	dfc00117 	ldw	ra,4(sp)
 800fe00:	df000017 	ldw	fp,0(sp)
 800fe04:	dec00204 	addi	sp,sp,8
 800fe08:	f800283a 	ret

0800fe0c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 800fe0c:	defffa04 	addi	sp,sp,-24
 800fe10:	dfc00515 	stw	ra,20(sp)
 800fe14:	df000415 	stw	fp,16(sp)
 800fe18:	df000404 	addi	fp,sp,16
 800fe1c:	e13ffd15 	stw	r4,-12(fp)
 800fe20:	e17ffe15 	stw	r5,-8(fp)
 800fe24:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800fe28:	e0bffd17 	ldw	r2,-12(fp)
 800fe2c:	10800017 	ldw	r2,0(r2)
 800fe30:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 800fe34:	e0bffc17 	ldw	r2,-16(fp)
 800fe38:	10c00a04 	addi	r3,r2,40
 800fe3c:	e0bffd17 	ldw	r2,-12(fp)
 800fe40:	10800217 	ldw	r2,8(r2)
 800fe44:	100f883a 	mov	r7,r2
 800fe48:	e1bfff17 	ldw	r6,-4(fp)
 800fe4c:	e17ffe17 	ldw	r5,-8(fp)
 800fe50:	1809883a 	mov	r4,r3
 800fe54:	80105f00 	call	80105f0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 800fe58:	e037883a 	mov	sp,fp
 800fe5c:	dfc00117 	ldw	ra,4(sp)
 800fe60:	df000017 	ldw	fp,0(sp)
 800fe64:	dec00204 	addi	sp,sp,8
 800fe68:	f800283a 	ret

0800fe6c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 800fe6c:	defffc04 	addi	sp,sp,-16
 800fe70:	dfc00315 	stw	ra,12(sp)
 800fe74:	df000215 	stw	fp,8(sp)
 800fe78:	df000204 	addi	fp,sp,8
 800fe7c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800fe80:	e0bfff17 	ldw	r2,-4(fp)
 800fe84:	10800017 	ldw	r2,0(r2)
 800fe88:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 800fe8c:	e0bffe17 	ldw	r2,-8(fp)
 800fe90:	10c00a04 	addi	r3,r2,40
 800fe94:	e0bfff17 	ldw	r2,-4(fp)
 800fe98:	10800217 	ldw	r2,8(r2)
 800fe9c:	100b883a 	mov	r5,r2
 800fea0:	1809883a 	mov	r4,r3
 800fea4:	801027c0 	call	801027c <altera_avalon_jtag_uart_close>
}
 800fea8:	e037883a 	mov	sp,fp
 800feac:	dfc00117 	ldw	ra,4(sp)
 800feb0:	df000017 	ldw	fp,0(sp)
 800feb4:	dec00204 	addi	sp,sp,8
 800feb8:	f800283a 	ret

0800febc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 800febc:	defffa04 	addi	sp,sp,-24
 800fec0:	dfc00515 	stw	ra,20(sp)
 800fec4:	df000415 	stw	fp,16(sp)
 800fec8:	df000404 	addi	fp,sp,16
 800fecc:	e13ffd15 	stw	r4,-12(fp)
 800fed0:	e17ffe15 	stw	r5,-8(fp)
 800fed4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 800fed8:	e0bffd17 	ldw	r2,-12(fp)
 800fedc:	10800017 	ldw	r2,0(r2)
 800fee0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 800fee4:	e0bffc17 	ldw	r2,-16(fp)
 800fee8:	10800a04 	addi	r2,r2,40
 800feec:	e1bfff17 	ldw	r6,-4(fp)
 800fef0:	e17ffe17 	ldw	r5,-8(fp)
 800fef4:	1009883a 	mov	r4,r2
 800fef8:	80102e40 	call	80102e4 <altera_avalon_jtag_uart_ioctl>
}
 800fefc:	e037883a 	mov	sp,fp
 800ff00:	dfc00117 	ldw	ra,4(sp)
 800ff04:	df000017 	ldw	fp,0(sp)
 800ff08:	dec00204 	addi	sp,sp,8
 800ff0c:	f800283a 	ret

0800ff10 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 800ff10:	defffa04 	addi	sp,sp,-24
 800ff14:	dfc00515 	stw	ra,20(sp)
 800ff18:	df000415 	stw	fp,16(sp)
 800ff1c:	df000404 	addi	fp,sp,16
 800ff20:	e13ffd15 	stw	r4,-12(fp)
 800ff24:	e17ffe15 	stw	r5,-8(fp)
 800ff28:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800ff2c:	e0bffd17 	ldw	r2,-12(fp)
 800ff30:	00c00044 	movi	r3,1
 800ff34:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 800ff38:	e0bffd17 	ldw	r2,-12(fp)
 800ff3c:	10800017 	ldw	r2,0(r2)
 800ff40:	10800104 	addi	r2,r2,4
 800ff44:	1007883a 	mov	r3,r2
 800ff48:	e0bffd17 	ldw	r2,-12(fp)
 800ff4c:	10800817 	ldw	r2,32(r2)
 800ff50:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 800ff54:	e0bffe17 	ldw	r2,-8(fp)
 800ff58:	e0ffff17 	ldw	r3,-4(fp)
 800ff5c:	d8000015 	stw	zero,0(sp)
 800ff60:	e1fffd17 	ldw	r7,-12(fp)
 800ff64:	01820074 	movhi	r6,2049
 800ff68:	31bff404 	addi	r6,r6,-48
 800ff6c:	180b883a 	mov	r5,r3
 800ff70:	1009883a 	mov	r4,r2
 800ff74:	8010c780 	call	8010c78 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 800ff78:	e0bffd17 	ldw	r2,-12(fp)
 800ff7c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 800ff80:	e0bffd17 	ldw	r2,-12(fp)
 800ff84:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800ff88:	d0e6d717 	ldw	r3,-25764(gp)
 800ff8c:	e1fffd17 	ldw	r7,-12(fp)
 800ff90:	01820074 	movhi	r6,2049
 800ff94:	31807704 	addi	r6,r6,476
 800ff98:	180b883a 	mov	r5,r3
 800ff9c:	1009883a 	mov	r4,r2
 800ffa0:	80108140 	call	8010814 <alt_alarm_start>
 800ffa4:	1000040e 	bge	r2,zero,800ffb8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 800ffa8:	e0fffd17 	ldw	r3,-12(fp)
 800ffac:	00a00034 	movhi	r2,32768
 800ffb0:	10bfffc4 	addi	r2,r2,-1
 800ffb4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 800ffb8:	0001883a 	nop
 800ffbc:	e037883a 	mov	sp,fp
 800ffc0:	dfc00117 	ldw	ra,4(sp)
 800ffc4:	df000017 	ldw	fp,0(sp)
 800ffc8:	dec00204 	addi	sp,sp,8
 800ffcc:	f800283a 	ret

0800ffd0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 800ffd0:	defff804 	addi	sp,sp,-32
 800ffd4:	df000715 	stw	fp,28(sp)
 800ffd8:	df000704 	addi	fp,sp,28
 800ffdc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 800ffe0:	e0bfff17 	ldw	r2,-4(fp)
 800ffe4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 800ffe8:	e0bffb17 	ldw	r2,-20(fp)
 800ffec:	10800017 	ldw	r2,0(r2)
 800fff0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800fff4:	e0bffc17 	ldw	r2,-16(fp)
 800fff8:	10800104 	addi	r2,r2,4
 800fffc:	10800037 	ldwio	r2,0(r2)
 8010000:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8010004:	e0bffd17 	ldw	r2,-12(fp)
 8010008:	1080c00c 	andi	r2,r2,768
 801000c:	10006d26 	beq	r2,zero,80101c4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 8010010:	e0bffd17 	ldw	r2,-12(fp)
 8010014:	1080400c 	andi	r2,r2,256
 8010018:	10003526 	beq	r2,zero,80100f0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 801001c:	00800074 	movhi	r2,1
 8010020:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8010024:	e0bffb17 	ldw	r2,-20(fp)
 8010028:	10800a17 	ldw	r2,40(r2)
 801002c:	10800044 	addi	r2,r2,1
 8010030:	1081ffcc 	andi	r2,r2,2047
 8010034:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 8010038:	e0bffb17 	ldw	r2,-20(fp)
 801003c:	10c00b17 	ldw	r3,44(r2)
 8010040:	e0bffe17 	ldw	r2,-8(fp)
 8010044:	18801526 	beq	r3,r2,801009c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8010048:	e0bffc17 	ldw	r2,-16(fp)
 801004c:	10800037 	ldwio	r2,0(r2)
 8010050:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8010054:	e0bff917 	ldw	r2,-28(fp)
 8010058:	10a0000c 	andi	r2,r2,32768
 801005c:	10001126 	beq	r2,zero,80100a4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8010060:	e0bffb17 	ldw	r2,-20(fp)
 8010064:	10800a17 	ldw	r2,40(r2)
 8010068:	e0fff917 	ldw	r3,-28(fp)
 801006c:	1809883a 	mov	r4,r3
 8010070:	e0fffb17 	ldw	r3,-20(fp)
 8010074:	1885883a 	add	r2,r3,r2
 8010078:	10800e04 	addi	r2,r2,56
 801007c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8010080:	e0bffb17 	ldw	r2,-20(fp)
 8010084:	10800a17 	ldw	r2,40(r2)
 8010088:	10800044 	addi	r2,r2,1
 801008c:	10c1ffcc 	andi	r3,r2,2047
 8010090:	e0bffb17 	ldw	r2,-20(fp)
 8010094:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8010098:	003fe206 	br	8010024 <__alt_data_end+0xfc010024>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 801009c:	0001883a 	nop
 80100a0:	00000106 	br	80100a8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 80100a4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 80100a8:	e0bff917 	ldw	r2,-28(fp)
 80100ac:	10bfffec 	andhi	r2,r2,65535
 80100b0:	10000f26 	beq	r2,zero,80100f0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80100b4:	e0bffb17 	ldw	r2,-20(fp)
 80100b8:	10c00817 	ldw	r3,32(r2)
 80100bc:	00bfff84 	movi	r2,-2
 80100c0:	1886703a 	and	r3,r3,r2
 80100c4:	e0bffb17 	ldw	r2,-20(fp)
 80100c8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 80100cc:	e0bffc17 	ldw	r2,-16(fp)
 80100d0:	10800104 	addi	r2,r2,4
 80100d4:	1007883a 	mov	r3,r2
 80100d8:	e0bffb17 	ldw	r2,-20(fp)
 80100dc:	10800817 	ldw	r2,32(r2)
 80100e0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80100e4:	e0bffc17 	ldw	r2,-16(fp)
 80100e8:	10800104 	addi	r2,r2,4
 80100ec:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 80100f0:	e0bffd17 	ldw	r2,-12(fp)
 80100f4:	1080800c 	andi	r2,r2,512
 80100f8:	103fbe26 	beq	r2,zero,800fff4 <__alt_data_end+0xfc00fff4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 80100fc:	e0bffd17 	ldw	r2,-12(fp)
 8010100:	1004d43a 	srli	r2,r2,16
 8010104:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 8010108:	00001406 	br	801015c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 801010c:	e0bffc17 	ldw	r2,-16(fp)
 8010110:	e0fffb17 	ldw	r3,-20(fp)
 8010114:	18c00d17 	ldw	r3,52(r3)
 8010118:	e13ffb17 	ldw	r4,-20(fp)
 801011c:	20c7883a 	add	r3,r4,r3
 8010120:	18c20e04 	addi	r3,r3,2104
 8010124:	18c00003 	ldbu	r3,0(r3)
 8010128:	18c03fcc 	andi	r3,r3,255
 801012c:	18c0201c 	xori	r3,r3,128
 8010130:	18ffe004 	addi	r3,r3,-128
 8010134:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8010138:	e0bffb17 	ldw	r2,-20(fp)
 801013c:	10800d17 	ldw	r2,52(r2)
 8010140:	10800044 	addi	r2,r2,1
 8010144:	10c1ffcc 	andi	r3,r2,2047
 8010148:	e0bffb17 	ldw	r2,-20(fp)
 801014c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8010150:	e0bffa17 	ldw	r2,-24(fp)
 8010154:	10bfffc4 	addi	r2,r2,-1
 8010158:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 801015c:	e0bffa17 	ldw	r2,-24(fp)
 8010160:	10000526 	beq	r2,zero,8010178 <altera_avalon_jtag_uart_irq+0x1a8>
 8010164:	e0bffb17 	ldw	r2,-20(fp)
 8010168:	10c00d17 	ldw	r3,52(r2)
 801016c:	e0bffb17 	ldw	r2,-20(fp)
 8010170:	10800c17 	ldw	r2,48(r2)
 8010174:	18bfe51e 	bne	r3,r2,801010c <__alt_data_end+0xfc01010c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8010178:	e0bffa17 	ldw	r2,-24(fp)
 801017c:	103f9d26 	beq	r2,zero,800fff4 <__alt_data_end+0xfc00fff4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8010180:	e0bffb17 	ldw	r2,-20(fp)
 8010184:	10c00817 	ldw	r3,32(r2)
 8010188:	00bfff44 	movi	r2,-3
 801018c:	1886703a 	and	r3,r3,r2
 8010190:	e0bffb17 	ldw	r2,-20(fp)
 8010194:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8010198:	e0bffb17 	ldw	r2,-20(fp)
 801019c:	10800017 	ldw	r2,0(r2)
 80101a0:	10800104 	addi	r2,r2,4
 80101a4:	1007883a 	mov	r3,r2
 80101a8:	e0bffb17 	ldw	r2,-20(fp)
 80101ac:	10800817 	ldw	r2,32(r2)
 80101b0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80101b4:	e0bffc17 	ldw	r2,-16(fp)
 80101b8:	10800104 	addi	r2,r2,4
 80101bc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 80101c0:	003f8c06 	br	800fff4 <__alt_data_end+0xfc00fff4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 80101c4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 80101c8:	0001883a 	nop
 80101cc:	e037883a 	mov	sp,fp
 80101d0:	df000017 	ldw	fp,0(sp)
 80101d4:	dec00104 	addi	sp,sp,4
 80101d8:	f800283a 	ret

080101dc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 80101dc:	defff804 	addi	sp,sp,-32
 80101e0:	df000715 	stw	fp,28(sp)
 80101e4:	df000704 	addi	fp,sp,28
 80101e8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 80101ec:	e0bffb17 	ldw	r2,-20(fp)
 80101f0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 80101f4:	e0bff917 	ldw	r2,-28(fp)
 80101f8:	10800017 	ldw	r2,0(r2)
 80101fc:	10800104 	addi	r2,r2,4
 8010200:	10800037 	ldwio	r2,0(r2)
 8010204:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8010208:	e0bffa17 	ldw	r2,-24(fp)
 801020c:	1081000c 	andi	r2,r2,1024
 8010210:	10000b26 	beq	r2,zero,8010240 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8010214:	e0bff917 	ldw	r2,-28(fp)
 8010218:	10800017 	ldw	r2,0(r2)
 801021c:	10800104 	addi	r2,r2,4
 8010220:	1007883a 	mov	r3,r2
 8010224:	e0bff917 	ldw	r2,-28(fp)
 8010228:	10800817 	ldw	r2,32(r2)
 801022c:	10810014 	ori	r2,r2,1024
 8010230:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 8010234:	e0bff917 	ldw	r2,-28(fp)
 8010238:	10000915 	stw	zero,36(r2)
 801023c:	00000a06 	br	8010268 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8010240:	e0bff917 	ldw	r2,-28(fp)
 8010244:	10c00917 	ldw	r3,36(r2)
 8010248:	00a00034 	movhi	r2,32768
 801024c:	10bfff04 	addi	r2,r2,-4
 8010250:	10c00536 	bltu	r2,r3,8010268 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8010254:	e0bff917 	ldw	r2,-28(fp)
 8010258:	10800917 	ldw	r2,36(r2)
 801025c:	10c00044 	addi	r3,r2,1
 8010260:	e0bff917 	ldw	r2,-28(fp)
 8010264:	10c00915 	stw	r3,36(r2)
 8010268:	d0a6d717 	ldw	r2,-25764(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 801026c:	e037883a 	mov	sp,fp
 8010270:	df000017 	ldw	fp,0(sp)
 8010274:	dec00104 	addi	sp,sp,4
 8010278:	f800283a 	ret

0801027c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 801027c:	defffd04 	addi	sp,sp,-12
 8010280:	df000215 	stw	fp,8(sp)
 8010284:	df000204 	addi	fp,sp,8
 8010288:	e13ffe15 	stw	r4,-8(fp)
 801028c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8010290:	00000506 	br	80102a8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8010294:	e0bfff17 	ldw	r2,-4(fp)
 8010298:	1090000c 	andi	r2,r2,16384
 801029c:	10000226 	beq	r2,zero,80102a8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 80102a0:	00bffd44 	movi	r2,-11
 80102a4:	00000b06 	br	80102d4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 80102a8:	e0bffe17 	ldw	r2,-8(fp)
 80102ac:	10c00d17 	ldw	r3,52(r2)
 80102b0:	e0bffe17 	ldw	r2,-8(fp)
 80102b4:	10800c17 	ldw	r2,48(r2)
 80102b8:	18800526 	beq	r3,r2,80102d0 <altera_avalon_jtag_uart_close+0x54>
 80102bc:	e0bffe17 	ldw	r2,-8(fp)
 80102c0:	10c00917 	ldw	r3,36(r2)
 80102c4:	e0bffe17 	ldw	r2,-8(fp)
 80102c8:	10800117 	ldw	r2,4(r2)
 80102cc:	18bff136 	bltu	r3,r2,8010294 <__alt_data_end+0xfc010294>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 80102d0:	0005883a 	mov	r2,zero
}
 80102d4:	e037883a 	mov	sp,fp
 80102d8:	df000017 	ldw	fp,0(sp)
 80102dc:	dec00104 	addi	sp,sp,4
 80102e0:	f800283a 	ret

080102e4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 80102e4:	defffa04 	addi	sp,sp,-24
 80102e8:	df000515 	stw	fp,20(sp)
 80102ec:	df000504 	addi	fp,sp,20
 80102f0:	e13ffd15 	stw	r4,-12(fp)
 80102f4:	e17ffe15 	stw	r5,-8(fp)
 80102f8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 80102fc:	00bff9c4 	movi	r2,-25
 8010300:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 8010304:	e0bffe17 	ldw	r2,-8(fp)
 8010308:	10da8060 	cmpeqi	r3,r2,27137
 801030c:	1800031e 	bne	r3,zero,801031c <altera_avalon_jtag_uart_ioctl+0x38>
 8010310:	109a80a0 	cmpeqi	r2,r2,27138
 8010314:	1000181e 	bne	r2,zero,8010378 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 8010318:	00002906 	br	80103c0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 801031c:	e0bffd17 	ldw	r2,-12(fp)
 8010320:	10c00117 	ldw	r3,4(r2)
 8010324:	00a00034 	movhi	r2,32768
 8010328:	10bfffc4 	addi	r2,r2,-1
 801032c:	18802126 	beq	r3,r2,80103b4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 8010330:	e0bfff17 	ldw	r2,-4(fp)
 8010334:	10800017 	ldw	r2,0(r2)
 8010338:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 801033c:	e0bffc17 	ldw	r2,-16(fp)
 8010340:	10800090 	cmplti	r2,r2,2
 8010344:	1000061e 	bne	r2,zero,8010360 <altera_avalon_jtag_uart_ioctl+0x7c>
 8010348:	e0fffc17 	ldw	r3,-16(fp)
 801034c:	00a00034 	movhi	r2,32768
 8010350:	10bfffc4 	addi	r2,r2,-1
 8010354:	18800226 	beq	r3,r2,8010360 <altera_avalon_jtag_uart_ioctl+0x7c>
 8010358:	e0bffc17 	ldw	r2,-16(fp)
 801035c:	00000206 	br	8010368 <altera_avalon_jtag_uart_ioctl+0x84>
 8010360:	00a00034 	movhi	r2,32768
 8010364:	10bfff84 	addi	r2,r2,-2
 8010368:	e0fffd17 	ldw	r3,-12(fp)
 801036c:	18800115 	stw	r2,4(r3)
      rc = 0;
 8010370:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8010374:	00000f06 	br	80103b4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8010378:	e0bffd17 	ldw	r2,-12(fp)
 801037c:	10c00117 	ldw	r3,4(r2)
 8010380:	00a00034 	movhi	r2,32768
 8010384:	10bfffc4 	addi	r2,r2,-1
 8010388:	18800c26 	beq	r3,r2,80103bc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 801038c:	e0bffd17 	ldw	r2,-12(fp)
 8010390:	10c00917 	ldw	r3,36(r2)
 8010394:	e0bffd17 	ldw	r2,-12(fp)
 8010398:	10800117 	ldw	r2,4(r2)
 801039c:	1885803a 	cmpltu	r2,r3,r2
 80103a0:	10c03fcc 	andi	r3,r2,255
 80103a4:	e0bfff17 	ldw	r2,-4(fp)
 80103a8:	10c00015 	stw	r3,0(r2)
      rc = 0;
 80103ac:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 80103b0:	00000206 	br	80103bc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 80103b4:	0001883a 	nop
 80103b8:	00000106 	br	80103c0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 80103bc:	0001883a 	nop

  default:
    break;
  }

  return rc;
 80103c0:	e0bffb17 	ldw	r2,-20(fp)
}
 80103c4:	e037883a 	mov	sp,fp
 80103c8:	df000017 	ldw	fp,0(sp)
 80103cc:	dec00104 	addi	sp,sp,4
 80103d0:	f800283a 	ret

080103d4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 80103d4:	defff304 	addi	sp,sp,-52
 80103d8:	dfc00c15 	stw	ra,48(sp)
 80103dc:	df000b15 	stw	fp,44(sp)
 80103e0:	df000b04 	addi	fp,sp,44
 80103e4:	e13ffc15 	stw	r4,-16(fp)
 80103e8:	e17ffd15 	stw	r5,-12(fp)
 80103ec:	e1bffe15 	stw	r6,-8(fp)
 80103f0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 80103f4:	e0bffd17 	ldw	r2,-12(fp)
 80103f8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 80103fc:	00004706 	br	801051c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8010400:	e0bffc17 	ldw	r2,-16(fp)
 8010404:	10800a17 	ldw	r2,40(r2)
 8010408:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 801040c:	e0bffc17 	ldw	r2,-16(fp)
 8010410:	10800b17 	ldw	r2,44(r2)
 8010414:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 8010418:	e0fff717 	ldw	r3,-36(fp)
 801041c:	e0bff817 	ldw	r2,-32(fp)
 8010420:	18800536 	bltu	r3,r2,8010438 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8010424:	e0fff717 	ldw	r3,-36(fp)
 8010428:	e0bff817 	ldw	r2,-32(fp)
 801042c:	1885c83a 	sub	r2,r3,r2
 8010430:	e0bff615 	stw	r2,-40(fp)
 8010434:	00000406 	br	8010448 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8010438:	00c20004 	movi	r3,2048
 801043c:	e0bff817 	ldw	r2,-32(fp)
 8010440:	1885c83a 	sub	r2,r3,r2
 8010444:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8010448:	e0bff617 	ldw	r2,-40(fp)
 801044c:	10001e26 	beq	r2,zero,80104c8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 8010450:	e0fffe17 	ldw	r3,-8(fp)
 8010454:	e0bff617 	ldw	r2,-40(fp)
 8010458:	1880022e 	bgeu	r3,r2,8010464 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 801045c:	e0bffe17 	ldw	r2,-8(fp)
 8010460:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8010464:	e0bffc17 	ldw	r2,-16(fp)
 8010468:	10c00e04 	addi	r3,r2,56
 801046c:	e0bff817 	ldw	r2,-32(fp)
 8010470:	1885883a 	add	r2,r3,r2
 8010474:	e1bff617 	ldw	r6,-40(fp)
 8010478:	100b883a 	mov	r5,r2
 801047c:	e13ff517 	ldw	r4,-44(fp)
 8010480:	8007fe40 	call	8007fe4 <memcpy>
      ptr   += n;
 8010484:	e0fff517 	ldw	r3,-44(fp)
 8010488:	e0bff617 	ldw	r2,-40(fp)
 801048c:	1885883a 	add	r2,r3,r2
 8010490:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 8010494:	e0fffe17 	ldw	r3,-8(fp)
 8010498:	e0bff617 	ldw	r2,-40(fp)
 801049c:	1885c83a 	sub	r2,r3,r2
 80104a0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80104a4:	e0fff817 	ldw	r3,-32(fp)
 80104a8:	e0bff617 	ldw	r2,-40(fp)
 80104ac:	1885883a 	add	r2,r3,r2
 80104b0:	10c1ffcc 	andi	r3,r2,2047
 80104b4:	e0bffc17 	ldw	r2,-16(fp)
 80104b8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 80104bc:	e0bffe17 	ldw	r2,-8(fp)
 80104c0:	00bfcf16 	blt	zero,r2,8010400 <__alt_data_end+0xfc010400>
 80104c4:	00000106 	br	80104cc <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 80104c8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 80104cc:	e0fff517 	ldw	r3,-44(fp)
 80104d0:	e0bffd17 	ldw	r2,-12(fp)
 80104d4:	1880141e 	bne	r3,r2,8010528 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 80104d8:	e0bfff17 	ldw	r2,-4(fp)
 80104dc:	1090000c 	andi	r2,r2,16384
 80104e0:	1000131e 	bne	r2,zero,8010530 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 80104e4:	0001883a 	nop
 80104e8:	e0bffc17 	ldw	r2,-16(fp)
 80104ec:	10c00a17 	ldw	r3,40(r2)
 80104f0:	e0bff717 	ldw	r2,-36(fp)
 80104f4:	1880051e 	bne	r3,r2,801050c <altera_avalon_jtag_uart_read+0x138>
 80104f8:	e0bffc17 	ldw	r2,-16(fp)
 80104fc:	10c00917 	ldw	r3,36(r2)
 8010500:	e0bffc17 	ldw	r2,-16(fp)
 8010504:	10800117 	ldw	r2,4(r2)
 8010508:	18bff736 	bltu	r3,r2,80104e8 <__alt_data_end+0xfc0104e8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 801050c:	e0bffc17 	ldw	r2,-16(fp)
 8010510:	10c00a17 	ldw	r3,40(r2)
 8010514:	e0bff717 	ldw	r2,-36(fp)
 8010518:	18800726 	beq	r3,r2,8010538 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 801051c:	e0bffe17 	ldw	r2,-8(fp)
 8010520:	00bfb716 	blt	zero,r2,8010400 <__alt_data_end+0xfc010400>
 8010524:	00000506 	br	801053c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 8010528:	0001883a 	nop
 801052c:	00000306 	br	801053c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 8010530:	0001883a 	nop
 8010534:	00000106 	br	801053c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 8010538:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 801053c:	e0fff517 	ldw	r3,-44(fp)
 8010540:	e0bffd17 	ldw	r2,-12(fp)
 8010544:	18801826 	beq	r3,r2,80105a8 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010548:	0005303a 	rdctl	r2,status
 801054c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010550:	e0fffb17 	ldw	r3,-20(fp)
 8010554:	00bfff84 	movi	r2,-2
 8010558:	1884703a 	and	r2,r3,r2
 801055c:	1001703a 	wrctl	status,r2
  
  return context;
 8010560:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8010564:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8010568:	e0bffc17 	ldw	r2,-16(fp)
 801056c:	10800817 	ldw	r2,32(r2)
 8010570:	10c00054 	ori	r3,r2,1
 8010574:	e0bffc17 	ldw	r2,-16(fp)
 8010578:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 801057c:	e0bffc17 	ldw	r2,-16(fp)
 8010580:	10800017 	ldw	r2,0(r2)
 8010584:	10800104 	addi	r2,r2,4
 8010588:	1007883a 	mov	r3,r2
 801058c:	e0bffc17 	ldw	r2,-16(fp)
 8010590:	10800817 	ldw	r2,32(r2)
 8010594:	18800035 	stwio	r2,0(r3)
 8010598:	e0bffa17 	ldw	r2,-24(fp)
 801059c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80105a0:	e0bff917 	ldw	r2,-28(fp)
 80105a4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 80105a8:	e0fff517 	ldw	r3,-44(fp)
 80105ac:	e0bffd17 	ldw	r2,-12(fp)
 80105b0:	18800426 	beq	r3,r2,80105c4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 80105b4:	e0fff517 	ldw	r3,-44(fp)
 80105b8:	e0bffd17 	ldw	r2,-12(fp)
 80105bc:	1885c83a 	sub	r2,r3,r2
 80105c0:	00000606 	br	80105dc <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 80105c4:	e0bfff17 	ldw	r2,-4(fp)
 80105c8:	1090000c 	andi	r2,r2,16384
 80105cc:	10000226 	beq	r2,zero,80105d8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 80105d0:	00bffd44 	movi	r2,-11
 80105d4:	00000106 	br	80105dc <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 80105d8:	00bffec4 	movi	r2,-5
}
 80105dc:	e037883a 	mov	sp,fp
 80105e0:	dfc00117 	ldw	ra,4(sp)
 80105e4:	df000017 	ldw	fp,0(sp)
 80105e8:	dec00204 	addi	sp,sp,8
 80105ec:	f800283a 	ret

080105f0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 80105f0:	defff304 	addi	sp,sp,-52
 80105f4:	dfc00c15 	stw	ra,48(sp)
 80105f8:	df000b15 	stw	fp,44(sp)
 80105fc:	df000b04 	addi	fp,sp,44
 8010600:	e13ffc15 	stw	r4,-16(fp)
 8010604:	e17ffd15 	stw	r5,-12(fp)
 8010608:	e1bffe15 	stw	r6,-8(fp)
 801060c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8010610:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8010614:	e0bffd17 	ldw	r2,-12(fp)
 8010618:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 801061c:	00003706 	br	80106fc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8010620:	e0bffc17 	ldw	r2,-16(fp)
 8010624:	10800c17 	ldw	r2,48(r2)
 8010628:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 801062c:	e0bffc17 	ldw	r2,-16(fp)
 8010630:	10800d17 	ldw	r2,52(r2)
 8010634:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 8010638:	e0fff917 	ldw	r3,-28(fp)
 801063c:	e0bff517 	ldw	r2,-44(fp)
 8010640:	1880062e 	bgeu	r3,r2,801065c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8010644:	e0fff517 	ldw	r3,-44(fp)
 8010648:	e0bff917 	ldw	r2,-28(fp)
 801064c:	1885c83a 	sub	r2,r3,r2
 8010650:	10bfffc4 	addi	r2,r2,-1
 8010654:	e0bff615 	stw	r2,-40(fp)
 8010658:	00000b06 	br	8010688 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 801065c:	e0bff517 	ldw	r2,-44(fp)
 8010660:	10000526 	beq	r2,zero,8010678 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8010664:	00c20004 	movi	r3,2048
 8010668:	e0bff917 	ldw	r2,-28(fp)
 801066c:	1885c83a 	sub	r2,r3,r2
 8010670:	e0bff615 	stw	r2,-40(fp)
 8010674:	00000406 	br	8010688 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8010678:	00c1ffc4 	movi	r3,2047
 801067c:	e0bff917 	ldw	r2,-28(fp)
 8010680:	1885c83a 	sub	r2,r3,r2
 8010684:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8010688:	e0bff617 	ldw	r2,-40(fp)
 801068c:	10001e26 	beq	r2,zero,8010708 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 8010690:	e0fffe17 	ldw	r3,-8(fp)
 8010694:	e0bff617 	ldw	r2,-40(fp)
 8010698:	1880022e 	bgeu	r3,r2,80106a4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 801069c:	e0bffe17 	ldw	r2,-8(fp)
 80106a0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 80106a4:	e0bffc17 	ldw	r2,-16(fp)
 80106a8:	10c20e04 	addi	r3,r2,2104
 80106ac:	e0bff917 	ldw	r2,-28(fp)
 80106b0:	1885883a 	add	r2,r3,r2
 80106b4:	e1bff617 	ldw	r6,-40(fp)
 80106b8:	e17ffd17 	ldw	r5,-12(fp)
 80106bc:	1009883a 	mov	r4,r2
 80106c0:	8007fe40 	call	8007fe4 <memcpy>
      ptr   += n;
 80106c4:	e0fffd17 	ldw	r3,-12(fp)
 80106c8:	e0bff617 	ldw	r2,-40(fp)
 80106cc:	1885883a 	add	r2,r3,r2
 80106d0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 80106d4:	e0fffe17 	ldw	r3,-8(fp)
 80106d8:	e0bff617 	ldw	r2,-40(fp)
 80106dc:	1885c83a 	sub	r2,r3,r2
 80106e0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80106e4:	e0fff917 	ldw	r3,-28(fp)
 80106e8:	e0bff617 	ldw	r2,-40(fp)
 80106ec:	1885883a 	add	r2,r3,r2
 80106f0:	10c1ffcc 	andi	r3,r2,2047
 80106f4:	e0bffc17 	ldw	r2,-16(fp)
 80106f8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 80106fc:	e0bffe17 	ldw	r2,-8(fp)
 8010700:	00bfc716 	blt	zero,r2,8010620 <__alt_data_end+0xfc010620>
 8010704:	00000106 	br	801070c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 8010708:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801070c:	0005303a 	rdctl	r2,status
 8010710:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010714:	e0fffb17 	ldw	r3,-20(fp)
 8010718:	00bfff84 	movi	r2,-2
 801071c:	1884703a 	and	r2,r3,r2
 8010720:	1001703a 	wrctl	status,r2
  
  return context;
 8010724:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8010728:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 801072c:	e0bffc17 	ldw	r2,-16(fp)
 8010730:	10800817 	ldw	r2,32(r2)
 8010734:	10c00094 	ori	r3,r2,2
 8010738:	e0bffc17 	ldw	r2,-16(fp)
 801073c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8010740:	e0bffc17 	ldw	r2,-16(fp)
 8010744:	10800017 	ldw	r2,0(r2)
 8010748:	10800104 	addi	r2,r2,4
 801074c:	1007883a 	mov	r3,r2
 8010750:	e0bffc17 	ldw	r2,-16(fp)
 8010754:	10800817 	ldw	r2,32(r2)
 8010758:	18800035 	stwio	r2,0(r3)
 801075c:	e0bffa17 	ldw	r2,-24(fp)
 8010760:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010764:	e0bff817 	ldw	r2,-32(fp)
 8010768:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 801076c:	e0bffe17 	ldw	r2,-8(fp)
 8010770:	0080100e 	bge	zero,r2,80107b4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 8010774:	e0bfff17 	ldw	r2,-4(fp)
 8010778:	1090000c 	andi	r2,r2,16384
 801077c:	1000101e 	bne	r2,zero,80107c0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8010780:	0001883a 	nop
 8010784:	e0bffc17 	ldw	r2,-16(fp)
 8010788:	10c00d17 	ldw	r3,52(r2)
 801078c:	e0bff517 	ldw	r2,-44(fp)
 8010790:	1880051e 	bne	r3,r2,80107a8 <altera_avalon_jtag_uart_write+0x1b8>
 8010794:	e0bffc17 	ldw	r2,-16(fp)
 8010798:	10c00917 	ldw	r3,36(r2)
 801079c:	e0bffc17 	ldw	r2,-16(fp)
 80107a0:	10800117 	ldw	r2,4(r2)
 80107a4:	18bff736 	bltu	r3,r2,8010784 <__alt_data_end+0xfc010784>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 80107a8:	e0bffc17 	ldw	r2,-16(fp)
 80107ac:	10800917 	ldw	r2,36(r2)
 80107b0:	1000051e 	bne	r2,zero,80107c8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 80107b4:	e0bffe17 	ldw	r2,-8(fp)
 80107b8:	00bfd016 	blt	zero,r2,80106fc <__alt_data_end+0xfc0106fc>
 80107bc:	00000306 	br	80107cc <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 80107c0:	0001883a 	nop
 80107c4:	00000106 	br	80107cc <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 80107c8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 80107cc:	e0fffd17 	ldw	r3,-12(fp)
 80107d0:	e0bff717 	ldw	r2,-36(fp)
 80107d4:	18800426 	beq	r3,r2,80107e8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 80107d8:	e0fffd17 	ldw	r3,-12(fp)
 80107dc:	e0bff717 	ldw	r2,-36(fp)
 80107e0:	1885c83a 	sub	r2,r3,r2
 80107e4:	00000606 	br	8010800 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 80107e8:	e0bfff17 	ldw	r2,-4(fp)
 80107ec:	1090000c 	andi	r2,r2,16384
 80107f0:	10000226 	beq	r2,zero,80107fc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 80107f4:	00bffd44 	movi	r2,-11
 80107f8:	00000106 	br	8010800 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 80107fc:	00bffec4 	movi	r2,-5
}
 8010800:	e037883a 	mov	sp,fp
 8010804:	dfc00117 	ldw	ra,4(sp)
 8010808:	df000017 	ldw	fp,0(sp)
 801080c:	dec00204 	addi	sp,sp,8
 8010810:	f800283a 	ret

08010814 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8010814:	defff504 	addi	sp,sp,-44
 8010818:	df000a15 	stw	fp,40(sp)
 801081c:	df000a04 	addi	fp,sp,40
 8010820:	e13ffc15 	stw	r4,-16(fp)
 8010824:	e17ffd15 	stw	r5,-12(fp)
 8010828:	e1bffe15 	stw	r6,-8(fp)
 801082c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8010830:	e03ff615 	stw	zero,-40(fp)
 8010834:	d0a6d717 	ldw	r2,-25764(gp)
  
  if (alt_ticks_per_second ())
 8010838:	10003c26 	beq	r2,zero,801092c <alt_alarm_start+0x118>
  {
    if (alarm)
 801083c:	e0bffc17 	ldw	r2,-16(fp)
 8010840:	10003826 	beq	r2,zero,8010924 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 8010844:	e0bffc17 	ldw	r2,-16(fp)
 8010848:	e0fffe17 	ldw	r3,-8(fp)
 801084c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8010850:	e0bffc17 	ldw	r2,-16(fp)
 8010854:	e0ffff17 	ldw	r3,-4(fp)
 8010858:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801085c:	0005303a 	rdctl	r2,status
 8010860:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010864:	e0fff917 	ldw	r3,-28(fp)
 8010868:	00bfff84 	movi	r2,-2
 801086c:	1884703a 	and	r2,r3,r2
 8010870:	1001703a 	wrctl	status,r2
  
  return context;
 8010874:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 8010878:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 801087c:	d0a6d817 	ldw	r2,-25760(gp)
      
      current_nticks = alt_nticks();
 8010880:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8010884:	e0fffd17 	ldw	r3,-12(fp)
 8010888:	e0bff617 	ldw	r2,-40(fp)
 801088c:	1885883a 	add	r2,r3,r2
 8010890:	10c00044 	addi	r3,r2,1
 8010894:	e0bffc17 	ldw	r2,-16(fp)
 8010898:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 801089c:	e0bffc17 	ldw	r2,-16(fp)
 80108a0:	10c00217 	ldw	r3,8(r2)
 80108a4:	e0bff617 	ldw	r2,-40(fp)
 80108a8:	1880042e 	bgeu	r3,r2,80108bc <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 80108ac:	e0bffc17 	ldw	r2,-16(fp)
 80108b0:	00c00044 	movi	r3,1
 80108b4:	10c00405 	stb	r3,16(r2)
 80108b8:	00000206 	br	80108c4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 80108bc:	e0bffc17 	ldw	r2,-16(fp)
 80108c0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 80108c4:	e0bffc17 	ldw	r2,-16(fp)
 80108c8:	d0e00e04 	addi	r3,gp,-32712
 80108cc:	e0fffa15 	stw	r3,-24(fp)
 80108d0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 80108d4:	e0bffb17 	ldw	r2,-20(fp)
 80108d8:	e0fffa17 	ldw	r3,-24(fp)
 80108dc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 80108e0:	e0bffa17 	ldw	r2,-24(fp)
 80108e4:	10c00017 	ldw	r3,0(r2)
 80108e8:	e0bffb17 	ldw	r2,-20(fp)
 80108ec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 80108f0:	e0bffa17 	ldw	r2,-24(fp)
 80108f4:	10800017 	ldw	r2,0(r2)
 80108f8:	e0fffb17 	ldw	r3,-20(fp)
 80108fc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8010900:	e0bffa17 	ldw	r2,-24(fp)
 8010904:	e0fffb17 	ldw	r3,-20(fp)
 8010908:	10c00015 	stw	r3,0(r2)
 801090c:	e0bff817 	ldw	r2,-32(fp)
 8010910:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010914:	e0bff717 	ldw	r2,-36(fp)
 8010918:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 801091c:	0005883a 	mov	r2,zero
 8010920:	00000306 	br	8010930 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 8010924:	00bffa84 	movi	r2,-22
 8010928:	00000106 	br	8010930 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 801092c:	00bfde84 	movi	r2,-134
  }
}
 8010930:	e037883a 	mov	sp,fp
 8010934:	df000017 	ldw	fp,0(sp)
 8010938:	dec00104 	addi	sp,sp,4
 801093c:	f800283a 	ret

08010940 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 8010940:	defffa04 	addi	sp,sp,-24
 8010944:	dfc00515 	stw	ra,20(sp)
 8010948:	df000415 	stw	fp,16(sp)
 801094c:	df000404 	addi	fp,sp,16
 8010950:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 8010954:	00800244 	movi	r2,9
 8010958:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 801095c:	014003f4 	movhi	r5,15
 8010960:	29509004 	addi	r5,r5,16960
 8010964:	e13ffd17 	ldw	r4,-12(fp)
 8010968:	800ca640 	call	800ca64 <__mulsi3>
 801096c:	100b883a 	mov	r5,r2
 8010970:	0100bef4 	movhi	r4,763
 8010974:	213c2004 	addi	r4,r4,-3968
 8010978:	800c9a80 	call	800c9a8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 801097c:	100b883a 	mov	r5,r2
 8010980:	01200034 	movhi	r4,32768
 8010984:	213fffc4 	addi	r4,r4,-1
 8010988:	800c9a80 	call	800c9a8 <__udivsi3>
 801098c:	100b883a 	mov	r5,r2
 8010990:	e13fff17 	ldw	r4,-4(fp)
 8010994:	800c9a80 	call	800c9a8 <__udivsi3>
 8010998:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 801099c:	e0bffe17 	ldw	r2,-8(fp)
 80109a0:	10002a26 	beq	r2,zero,8010a4c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 80109a4:	e03ffc15 	stw	zero,-16(fp)
 80109a8:	00001706 	br	8010a08 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 80109ac:	00a00034 	movhi	r2,32768
 80109b0:	10bfffc4 	addi	r2,r2,-1
 80109b4:	10bfffc4 	addi	r2,r2,-1
 80109b8:	103ffe1e 	bne	r2,zero,80109b4 <__alt_data_end+0xfc0109b4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 80109bc:	014003f4 	movhi	r5,15
 80109c0:	29509004 	addi	r5,r5,16960
 80109c4:	e13ffd17 	ldw	r4,-12(fp)
 80109c8:	800ca640 	call	800ca64 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 80109cc:	100b883a 	mov	r5,r2
 80109d0:	0100bef4 	movhi	r4,763
 80109d4:	213c2004 	addi	r4,r4,-3968
 80109d8:	800c9a80 	call	800c9a8 <__udivsi3>
 80109dc:	100b883a 	mov	r5,r2
 80109e0:	01200034 	movhi	r4,32768
 80109e4:	213fffc4 	addi	r4,r4,-1
 80109e8:	800c9a80 	call	800c9a8 <__udivsi3>
 80109ec:	1007883a 	mov	r3,r2
 80109f0:	e0bfff17 	ldw	r2,-4(fp)
 80109f4:	10c5c83a 	sub	r2,r2,r3
 80109f8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 80109fc:	e0bffc17 	ldw	r2,-16(fp)
 8010a00:	10800044 	addi	r2,r2,1
 8010a04:	e0bffc15 	stw	r2,-16(fp)
 8010a08:	e0fffc17 	ldw	r3,-16(fp)
 8010a0c:	e0bffe17 	ldw	r2,-8(fp)
 8010a10:	18bfe616 	blt	r3,r2,80109ac <__alt_data_end+0xfc0109ac>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8010a14:	014003f4 	movhi	r5,15
 8010a18:	29509004 	addi	r5,r5,16960
 8010a1c:	e13ffd17 	ldw	r4,-12(fp)
 8010a20:	800ca640 	call	800ca64 <__mulsi3>
 8010a24:	100b883a 	mov	r5,r2
 8010a28:	0100bef4 	movhi	r4,763
 8010a2c:	213c2004 	addi	r4,r4,-3968
 8010a30:	800c9a80 	call	800c9a8 <__udivsi3>
 8010a34:	e17fff17 	ldw	r5,-4(fp)
 8010a38:	1009883a 	mov	r4,r2
 8010a3c:	800ca640 	call	800ca64 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8010a40:	10bfffc4 	addi	r2,r2,-1
 8010a44:	103ffe1e 	bne	r2,zero,8010a40 <__alt_data_end+0xfc010a40>
 8010a48:	00000d06 	br	8010a80 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8010a4c:	014003f4 	movhi	r5,15
 8010a50:	29509004 	addi	r5,r5,16960
 8010a54:	e13ffd17 	ldw	r4,-12(fp)
 8010a58:	800ca640 	call	800ca64 <__mulsi3>
 8010a5c:	100b883a 	mov	r5,r2
 8010a60:	0100bef4 	movhi	r4,763
 8010a64:	213c2004 	addi	r4,r4,-3968
 8010a68:	800c9a80 	call	800c9a8 <__udivsi3>
 8010a6c:	e17fff17 	ldw	r5,-4(fp)
 8010a70:	1009883a 	mov	r4,r2
 8010a74:	800ca640 	call	800ca64 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8010a78:	10bfffc4 	addi	r2,r2,-1
 8010a7c:	00bffe16 	blt	zero,r2,8010a78 <__alt_data_end+0xfc010a78>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 8010a80:	0005883a 	mov	r2,zero
}
 8010a84:	e037883a 	mov	sp,fp
 8010a88:	dfc00117 	ldw	ra,4(sp)
 8010a8c:	df000017 	ldw	fp,0(sp)
 8010a90:	dec00204 	addi	sp,sp,8
 8010a94:	f800283a 	ret

08010a98 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8010a98:	deffff04 	addi	sp,sp,-4
 8010a9c:	df000015 	stw	fp,0(sp)
 8010aa0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8010aa4:	0001883a 	nop
 8010aa8:	e037883a 	mov	sp,fp
 8010aac:	df000017 	ldw	fp,0(sp)
 8010ab0:	dec00104 	addi	sp,sp,4
 8010ab4:	f800283a 	ret

08010ab8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8010ab8:	defffe04 	addi	sp,sp,-8
 8010abc:	dfc00115 	stw	ra,4(sp)
 8010ac0:	df000015 	stw	fp,0(sp)
 8010ac4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8010ac8:	d0a00b17 	ldw	r2,-32724(gp)
 8010acc:	10000326 	beq	r2,zero,8010adc <alt_get_errno+0x24>
 8010ad0:	d0a00b17 	ldw	r2,-32724(gp)
 8010ad4:	103ee83a 	callr	r2
 8010ad8:	00000106 	br	8010ae0 <alt_get_errno+0x28>
 8010adc:	d0a6d204 	addi	r2,gp,-25784
}
 8010ae0:	e037883a 	mov	sp,fp
 8010ae4:	dfc00117 	ldw	ra,4(sp)
 8010ae8:	df000017 	ldw	fp,0(sp)
 8010aec:	dec00204 	addi	sp,sp,8
 8010af0:	f800283a 	ret

08010af4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8010af4:	defffa04 	addi	sp,sp,-24
 8010af8:	dfc00515 	stw	ra,20(sp)
 8010afc:	df000415 	stw	fp,16(sp)
 8010b00:	df000404 	addi	fp,sp,16
 8010b04:	e13ffe15 	stw	r4,-8(fp)
 8010b08:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8010b0c:	e0bffe17 	ldw	r2,-8(fp)
 8010b10:	10000326 	beq	r2,zero,8010b20 <alt_dev_llist_insert+0x2c>
 8010b14:	e0bffe17 	ldw	r2,-8(fp)
 8010b18:	10800217 	ldw	r2,8(r2)
 8010b1c:	1000061e 	bne	r2,zero,8010b38 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8010b20:	8010ab80 	call	8010ab8 <alt_get_errno>
 8010b24:	1007883a 	mov	r3,r2
 8010b28:	00800584 	movi	r2,22
 8010b2c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8010b30:	00bffa84 	movi	r2,-22
 8010b34:	00001306 	br	8010b84 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8010b38:	e0bffe17 	ldw	r2,-8(fp)
 8010b3c:	e0ffff17 	ldw	r3,-4(fp)
 8010b40:	e0fffc15 	stw	r3,-16(fp)
 8010b44:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8010b48:	e0bffd17 	ldw	r2,-12(fp)
 8010b4c:	e0fffc17 	ldw	r3,-16(fp)
 8010b50:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8010b54:	e0bffc17 	ldw	r2,-16(fp)
 8010b58:	10c00017 	ldw	r3,0(r2)
 8010b5c:	e0bffd17 	ldw	r2,-12(fp)
 8010b60:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8010b64:	e0bffc17 	ldw	r2,-16(fp)
 8010b68:	10800017 	ldw	r2,0(r2)
 8010b6c:	e0fffd17 	ldw	r3,-12(fp)
 8010b70:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8010b74:	e0bffc17 	ldw	r2,-16(fp)
 8010b78:	e0fffd17 	ldw	r3,-12(fp)
 8010b7c:	10c00015 	stw	r3,0(r2)

  return 0;  
 8010b80:	0005883a 	mov	r2,zero
}
 8010b84:	e037883a 	mov	sp,fp
 8010b88:	dfc00117 	ldw	ra,4(sp)
 8010b8c:	df000017 	ldw	fp,0(sp)
 8010b90:	dec00204 	addi	sp,sp,8
 8010b94:	f800283a 	ret

08010b98 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8010b98:	defffd04 	addi	sp,sp,-12
 8010b9c:	dfc00215 	stw	ra,8(sp)
 8010ba0:	df000115 	stw	fp,4(sp)
 8010ba4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8010ba8:	00820074 	movhi	r2,2049
 8010bac:	1086d304 	addi	r2,r2,6988
 8010bb0:	e0bfff15 	stw	r2,-4(fp)
 8010bb4:	00000606 	br	8010bd0 <_do_ctors+0x38>
        (*ctor) (); 
 8010bb8:	e0bfff17 	ldw	r2,-4(fp)
 8010bbc:	10800017 	ldw	r2,0(r2)
 8010bc0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8010bc4:	e0bfff17 	ldw	r2,-4(fp)
 8010bc8:	10bfff04 	addi	r2,r2,-4
 8010bcc:	e0bfff15 	stw	r2,-4(fp)
 8010bd0:	e0ffff17 	ldw	r3,-4(fp)
 8010bd4:	00820074 	movhi	r2,2049
 8010bd8:	1086d404 	addi	r2,r2,6992
 8010bdc:	18bff62e 	bgeu	r3,r2,8010bb8 <__alt_data_end+0xfc010bb8>
        (*ctor) (); 
}
 8010be0:	0001883a 	nop
 8010be4:	e037883a 	mov	sp,fp
 8010be8:	dfc00117 	ldw	ra,4(sp)
 8010bec:	df000017 	ldw	fp,0(sp)
 8010bf0:	dec00204 	addi	sp,sp,8
 8010bf4:	f800283a 	ret

08010bf8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8010bf8:	defffd04 	addi	sp,sp,-12
 8010bfc:	dfc00215 	stw	ra,8(sp)
 8010c00:	df000115 	stw	fp,4(sp)
 8010c04:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8010c08:	00820074 	movhi	r2,2049
 8010c0c:	1086d304 	addi	r2,r2,6988
 8010c10:	e0bfff15 	stw	r2,-4(fp)
 8010c14:	00000606 	br	8010c30 <_do_dtors+0x38>
        (*dtor) (); 
 8010c18:	e0bfff17 	ldw	r2,-4(fp)
 8010c1c:	10800017 	ldw	r2,0(r2)
 8010c20:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8010c24:	e0bfff17 	ldw	r2,-4(fp)
 8010c28:	10bfff04 	addi	r2,r2,-4
 8010c2c:	e0bfff15 	stw	r2,-4(fp)
 8010c30:	e0ffff17 	ldw	r3,-4(fp)
 8010c34:	00820074 	movhi	r2,2049
 8010c38:	1086d404 	addi	r2,r2,6992
 8010c3c:	18bff62e 	bgeu	r3,r2,8010c18 <__alt_data_end+0xfc010c18>
        (*dtor) (); 
}
 8010c40:	0001883a 	nop
 8010c44:	e037883a 	mov	sp,fp
 8010c48:	dfc00117 	ldw	ra,4(sp)
 8010c4c:	df000017 	ldw	fp,0(sp)
 8010c50:	dec00204 	addi	sp,sp,8
 8010c54:	f800283a 	ret

08010c58 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8010c58:	deffff04 	addi	sp,sp,-4
 8010c5c:	df000015 	stw	fp,0(sp)
 8010c60:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 8010c64:	0001883a 	nop
 8010c68:	e037883a 	mov	sp,fp
 8010c6c:	df000017 	ldw	fp,0(sp)
 8010c70:	dec00104 	addi	sp,sp,4
 8010c74:	f800283a 	ret

08010c78 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8010c78:	defff904 	addi	sp,sp,-28
 8010c7c:	dfc00615 	stw	ra,24(sp)
 8010c80:	df000515 	stw	fp,20(sp)
 8010c84:	df000504 	addi	fp,sp,20
 8010c88:	e13ffc15 	stw	r4,-16(fp)
 8010c8c:	e17ffd15 	stw	r5,-12(fp)
 8010c90:	e1bffe15 	stw	r6,-8(fp)
 8010c94:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8010c98:	e0800217 	ldw	r2,8(fp)
 8010c9c:	d8800015 	stw	r2,0(sp)
 8010ca0:	e1ffff17 	ldw	r7,-4(fp)
 8010ca4:	e1bffe17 	ldw	r6,-8(fp)
 8010ca8:	e17ffd17 	ldw	r5,-12(fp)
 8010cac:	e13ffc17 	ldw	r4,-16(fp)
 8010cb0:	8010e280 	call	8010e28 <alt_iic_isr_register>
}  
 8010cb4:	e037883a 	mov	sp,fp
 8010cb8:	dfc00117 	ldw	ra,4(sp)
 8010cbc:	df000017 	ldw	fp,0(sp)
 8010cc0:	dec00204 	addi	sp,sp,8
 8010cc4:	f800283a 	ret

08010cc8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8010cc8:	defff904 	addi	sp,sp,-28
 8010ccc:	df000615 	stw	fp,24(sp)
 8010cd0:	df000604 	addi	fp,sp,24
 8010cd4:	e13ffe15 	stw	r4,-8(fp)
 8010cd8:	e17fff15 	stw	r5,-4(fp)
 8010cdc:	e0bfff17 	ldw	r2,-4(fp)
 8010ce0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010ce4:	0005303a 	rdctl	r2,status
 8010ce8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010cec:	e0fffb17 	ldw	r3,-20(fp)
 8010cf0:	00bfff84 	movi	r2,-2
 8010cf4:	1884703a 	and	r2,r3,r2
 8010cf8:	1001703a 	wrctl	status,r2
  
  return context;
 8010cfc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8010d00:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8010d04:	00c00044 	movi	r3,1
 8010d08:	e0bffa17 	ldw	r2,-24(fp)
 8010d0c:	1884983a 	sll	r2,r3,r2
 8010d10:	1007883a 	mov	r3,r2
 8010d14:	d0a6d617 	ldw	r2,-25768(gp)
 8010d18:	1884b03a 	or	r2,r3,r2
 8010d1c:	d0a6d615 	stw	r2,-25768(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8010d20:	d0a6d617 	ldw	r2,-25768(gp)
 8010d24:	100170fa 	wrctl	ienable,r2
 8010d28:	e0bffc17 	ldw	r2,-16(fp)
 8010d2c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010d30:	e0bffd17 	ldw	r2,-12(fp)
 8010d34:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8010d38:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 8010d3c:	0001883a 	nop
}
 8010d40:	e037883a 	mov	sp,fp
 8010d44:	df000017 	ldw	fp,0(sp)
 8010d48:	dec00104 	addi	sp,sp,4
 8010d4c:	f800283a 	ret

08010d50 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8010d50:	defff904 	addi	sp,sp,-28
 8010d54:	df000615 	stw	fp,24(sp)
 8010d58:	df000604 	addi	fp,sp,24
 8010d5c:	e13ffe15 	stw	r4,-8(fp)
 8010d60:	e17fff15 	stw	r5,-4(fp)
 8010d64:	e0bfff17 	ldw	r2,-4(fp)
 8010d68:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010d6c:	0005303a 	rdctl	r2,status
 8010d70:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010d74:	e0fffb17 	ldw	r3,-20(fp)
 8010d78:	00bfff84 	movi	r2,-2
 8010d7c:	1884703a 	and	r2,r3,r2
 8010d80:	1001703a 	wrctl	status,r2
  
  return context;
 8010d84:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8010d88:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8010d8c:	00c00044 	movi	r3,1
 8010d90:	e0bffa17 	ldw	r2,-24(fp)
 8010d94:	1884983a 	sll	r2,r3,r2
 8010d98:	0084303a 	nor	r2,zero,r2
 8010d9c:	1007883a 	mov	r3,r2
 8010da0:	d0a6d617 	ldw	r2,-25768(gp)
 8010da4:	1884703a 	and	r2,r3,r2
 8010da8:	d0a6d615 	stw	r2,-25768(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8010dac:	d0a6d617 	ldw	r2,-25768(gp)
 8010db0:	100170fa 	wrctl	ienable,r2
 8010db4:	e0bffc17 	ldw	r2,-16(fp)
 8010db8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010dbc:	e0bffd17 	ldw	r2,-12(fp)
 8010dc0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8010dc4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 8010dc8:	0001883a 	nop
}
 8010dcc:	e037883a 	mov	sp,fp
 8010dd0:	df000017 	ldw	fp,0(sp)
 8010dd4:	dec00104 	addi	sp,sp,4
 8010dd8:	f800283a 	ret

08010ddc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8010ddc:	defffc04 	addi	sp,sp,-16
 8010de0:	df000315 	stw	fp,12(sp)
 8010de4:	df000304 	addi	fp,sp,12
 8010de8:	e13ffe15 	stw	r4,-8(fp)
 8010dec:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8010df0:	000530fa 	rdctl	r2,ienable
 8010df4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8010df8:	00c00044 	movi	r3,1
 8010dfc:	e0bfff17 	ldw	r2,-4(fp)
 8010e00:	1884983a 	sll	r2,r3,r2
 8010e04:	1007883a 	mov	r3,r2
 8010e08:	e0bffd17 	ldw	r2,-12(fp)
 8010e0c:	1884703a 	and	r2,r3,r2
 8010e10:	1004c03a 	cmpne	r2,r2,zero
 8010e14:	10803fcc 	andi	r2,r2,255
}
 8010e18:	e037883a 	mov	sp,fp
 8010e1c:	df000017 	ldw	fp,0(sp)
 8010e20:	dec00104 	addi	sp,sp,4
 8010e24:	f800283a 	ret

08010e28 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8010e28:	defff504 	addi	sp,sp,-44
 8010e2c:	dfc00a15 	stw	ra,40(sp)
 8010e30:	df000915 	stw	fp,36(sp)
 8010e34:	df000904 	addi	fp,sp,36
 8010e38:	e13ffc15 	stw	r4,-16(fp)
 8010e3c:	e17ffd15 	stw	r5,-12(fp)
 8010e40:	e1bffe15 	stw	r6,-8(fp)
 8010e44:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 8010e48:	00bffa84 	movi	r2,-22
 8010e4c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8010e50:	e0bffd17 	ldw	r2,-12(fp)
 8010e54:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8010e58:	e0bff817 	ldw	r2,-32(fp)
 8010e5c:	10800808 	cmpgei	r2,r2,32
 8010e60:	1000271e 	bne	r2,zero,8010f00 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010e64:	0005303a 	rdctl	r2,status
 8010e68:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010e6c:	e0fffb17 	ldw	r3,-20(fp)
 8010e70:	00bfff84 	movi	r2,-2
 8010e74:	1884703a 	and	r2,r3,r2
 8010e78:	1001703a 	wrctl	status,r2
  
  return context;
 8010e7c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8010e80:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 8010e84:	00820074 	movhi	r2,2049
 8010e88:	10971904 	addi	r2,r2,23652
 8010e8c:	e0fff817 	ldw	r3,-32(fp)
 8010e90:	180690fa 	slli	r3,r3,3
 8010e94:	10c5883a 	add	r2,r2,r3
 8010e98:	e0fffe17 	ldw	r3,-8(fp)
 8010e9c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8010ea0:	00820074 	movhi	r2,2049
 8010ea4:	10971904 	addi	r2,r2,23652
 8010ea8:	e0fff817 	ldw	r3,-32(fp)
 8010eac:	180690fa 	slli	r3,r3,3
 8010eb0:	10c5883a 	add	r2,r2,r3
 8010eb4:	10800104 	addi	r2,r2,4
 8010eb8:	e0ffff17 	ldw	r3,-4(fp)
 8010ebc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8010ec0:	e0bffe17 	ldw	r2,-8(fp)
 8010ec4:	10000526 	beq	r2,zero,8010edc <alt_iic_isr_register+0xb4>
 8010ec8:	e0bff817 	ldw	r2,-32(fp)
 8010ecc:	100b883a 	mov	r5,r2
 8010ed0:	e13ffc17 	ldw	r4,-16(fp)
 8010ed4:	8010cc80 	call	8010cc8 <alt_ic_irq_enable>
 8010ed8:	00000406 	br	8010eec <alt_iic_isr_register+0xc4>
 8010edc:	e0bff817 	ldw	r2,-32(fp)
 8010ee0:	100b883a 	mov	r5,r2
 8010ee4:	e13ffc17 	ldw	r4,-16(fp)
 8010ee8:	8010d500 	call	8010d50 <alt_ic_irq_disable>
 8010eec:	e0bff715 	stw	r2,-36(fp)
 8010ef0:	e0bffa17 	ldw	r2,-24(fp)
 8010ef4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010ef8:	e0bff917 	ldw	r2,-28(fp)
 8010efc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8010f00:	e0bff717 	ldw	r2,-36(fp)
}
 8010f04:	e037883a 	mov	sp,fp
 8010f08:	dfc00117 	ldw	ra,4(sp)
 8010f0c:	df000017 	ldw	fp,0(sp)
 8010f10:	dec00204 	addi	sp,sp,8
 8010f14:	f800283a 	ret

08010f18 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8010f18:	defff804 	addi	sp,sp,-32
 8010f1c:	dfc00715 	stw	ra,28(sp)
 8010f20:	df000615 	stw	fp,24(sp)
 8010f24:	dc000515 	stw	r16,20(sp)
 8010f28:	df000604 	addi	fp,sp,24
 8010f2c:	e13ffb15 	stw	r4,-20(fp)
 8010f30:	e17ffc15 	stw	r5,-16(fp)
 8010f34:	e1bffd15 	stw	r6,-12(fp)
 8010f38:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 8010f3c:	e1bffe17 	ldw	r6,-8(fp)
 8010f40:	e17ffd17 	ldw	r5,-12(fp)
 8010f44:	e13ffc17 	ldw	r4,-16(fp)
 8010f48:	80111a00 	call	80111a0 <open>
 8010f4c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 8010f50:	e0bffa17 	ldw	r2,-24(fp)
 8010f54:	10002216 	blt	r2,zero,8010fe0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 8010f58:	04020074 	movhi	r16,2049
 8010f5c:	840bbd04 	addi	r16,r16,12020
 8010f60:	e0bffa17 	ldw	r2,-24(fp)
 8010f64:	01400304 	movi	r5,12
 8010f68:	1009883a 	mov	r4,r2
 8010f6c:	800ca640 	call	800ca64 <__mulsi3>
 8010f70:	8085883a 	add	r2,r16,r2
 8010f74:	10c00017 	ldw	r3,0(r2)
 8010f78:	e0bffb17 	ldw	r2,-20(fp)
 8010f7c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8010f80:	04020074 	movhi	r16,2049
 8010f84:	840bbd04 	addi	r16,r16,12020
 8010f88:	e0bffa17 	ldw	r2,-24(fp)
 8010f8c:	01400304 	movi	r5,12
 8010f90:	1009883a 	mov	r4,r2
 8010f94:	800ca640 	call	800ca64 <__mulsi3>
 8010f98:	8085883a 	add	r2,r16,r2
 8010f9c:	10800104 	addi	r2,r2,4
 8010fa0:	10c00017 	ldw	r3,0(r2)
 8010fa4:	e0bffb17 	ldw	r2,-20(fp)
 8010fa8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8010fac:	04020074 	movhi	r16,2049
 8010fb0:	840bbd04 	addi	r16,r16,12020
 8010fb4:	e0bffa17 	ldw	r2,-24(fp)
 8010fb8:	01400304 	movi	r5,12
 8010fbc:	1009883a 	mov	r4,r2
 8010fc0:	800ca640 	call	800ca64 <__mulsi3>
 8010fc4:	8085883a 	add	r2,r16,r2
 8010fc8:	10800204 	addi	r2,r2,8
 8010fcc:	10c00017 	ldw	r3,0(r2)
 8010fd0:	e0bffb17 	ldw	r2,-20(fp)
 8010fd4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8010fd8:	e13ffa17 	ldw	r4,-24(fp)
 8010fdc:	800fa540 	call	800fa54 <alt_release_fd>
  }
} 
 8010fe0:	0001883a 	nop
 8010fe4:	e6ffff04 	addi	sp,fp,-4
 8010fe8:	dfc00217 	ldw	ra,8(sp)
 8010fec:	df000117 	ldw	fp,4(sp)
 8010ff0:	dc000017 	ldw	r16,0(sp)
 8010ff4:	dec00304 	addi	sp,sp,12
 8010ff8:	f800283a 	ret

08010ffc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8010ffc:	defffb04 	addi	sp,sp,-20
 8011000:	dfc00415 	stw	ra,16(sp)
 8011004:	df000315 	stw	fp,12(sp)
 8011008:	df000304 	addi	fp,sp,12
 801100c:	e13ffd15 	stw	r4,-12(fp)
 8011010:	e17ffe15 	stw	r5,-8(fp)
 8011014:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8011018:	01c07fc4 	movi	r7,511
 801101c:	01800044 	movi	r6,1
 8011020:	e17ffd17 	ldw	r5,-12(fp)
 8011024:	01020074 	movhi	r4,2049
 8011028:	210bc004 	addi	r4,r4,12032
 801102c:	8010f180 	call	8010f18 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8011030:	01c07fc4 	movi	r7,511
 8011034:	000d883a 	mov	r6,zero
 8011038:	e17ffe17 	ldw	r5,-8(fp)
 801103c:	01020074 	movhi	r4,2049
 8011040:	210bbd04 	addi	r4,r4,12020
 8011044:	8010f180 	call	8010f18 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8011048:	01c07fc4 	movi	r7,511
 801104c:	01800044 	movi	r6,1
 8011050:	e17fff17 	ldw	r5,-4(fp)
 8011054:	01020074 	movhi	r4,2049
 8011058:	210bc304 	addi	r4,r4,12044
 801105c:	8010f180 	call	8010f18 <alt_open_fd>
}  
 8011060:	0001883a 	nop
 8011064:	e037883a 	mov	sp,fp
 8011068:	dfc00117 	ldw	ra,4(sp)
 801106c:	df000017 	ldw	fp,0(sp)
 8011070:	dec00204 	addi	sp,sp,8
 8011074:	f800283a 	ret

08011078 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8011078:	defffe04 	addi	sp,sp,-8
 801107c:	dfc00115 	stw	ra,4(sp)
 8011080:	df000015 	stw	fp,0(sp)
 8011084:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8011088:	d0a00b17 	ldw	r2,-32724(gp)
 801108c:	10000326 	beq	r2,zero,801109c <alt_get_errno+0x24>
 8011090:	d0a00b17 	ldw	r2,-32724(gp)
 8011094:	103ee83a 	callr	r2
 8011098:	00000106 	br	80110a0 <alt_get_errno+0x28>
 801109c:	d0a6d204 	addi	r2,gp,-25784
}
 80110a0:	e037883a 	mov	sp,fp
 80110a4:	dfc00117 	ldw	ra,4(sp)
 80110a8:	df000017 	ldw	fp,0(sp)
 80110ac:	dec00204 	addi	sp,sp,8
 80110b0:	f800283a 	ret

080110b4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 80110b4:	defffb04 	addi	sp,sp,-20
 80110b8:	dfc00415 	stw	ra,16(sp)
 80110bc:	df000315 	stw	fp,12(sp)
 80110c0:	dc000215 	stw	r16,8(sp)
 80110c4:	df000304 	addi	fp,sp,12
 80110c8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 80110cc:	e0bffe17 	ldw	r2,-8(fp)
 80110d0:	10800217 	ldw	r2,8(r2)
 80110d4:	10d00034 	orhi	r3,r2,16384
 80110d8:	e0bffe17 	ldw	r2,-8(fp)
 80110dc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80110e0:	e03ffd15 	stw	zero,-12(fp)
 80110e4:	00002306 	br	8011174 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80110e8:	04020074 	movhi	r16,2049
 80110ec:	840bbd04 	addi	r16,r16,12020
 80110f0:	e0bffd17 	ldw	r2,-12(fp)
 80110f4:	01400304 	movi	r5,12
 80110f8:	1009883a 	mov	r4,r2
 80110fc:	800ca640 	call	800ca64 <__mulsi3>
 8011100:	8085883a 	add	r2,r16,r2
 8011104:	10c00017 	ldw	r3,0(r2)
 8011108:	e0bffe17 	ldw	r2,-8(fp)
 801110c:	10800017 	ldw	r2,0(r2)
 8011110:	1880151e 	bne	r3,r2,8011168 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8011114:	04020074 	movhi	r16,2049
 8011118:	840bbd04 	addi	r16,r16,12020
 801111c:	e0bffd17 	ldw	r2,-12(fp)
 8011120:	01400304 	movi	r5,12
 8011124:	1009883a 	mov	r4,r2
 8011128:	800ca640 	call	800ca64 <__mulsi3>
 801112c:	8085883a 	add	r2,r16,r2
 8011130:	10800204 	addi	r2,r2,8
 8011134:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8011138:	10000b0e 	bge	r2,zero,8011168 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 801113c:	01400304 	movi	r5,12
 8011140:	e13ffd17 	ldw	r4,-12(fp)
 8011144:	800ca640 	call	800ca64 <__mulsi3>
 8011148:	1007883a 	mov	r3,r2
 801114c:	00820074 	movhi	r2,2049
 8011150:	108bbd04 	addi	r2,r2,12020
 8011154:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8011158:	e0bffe17 	ldw	r2,-8(fp)
 801115c:	18800226 	beq	r3,r2,8011168 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8011160:	00bffcc4 	movi	r2,-13
 8011164:	00000806 	br	8011188 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8011168:	e0bffd17 	ldw	r2,-12(fp)
 801116c:	10800044 	addi	r2,r2,1
 8011170:	e0bffd15 	stw	r2,-12(fp)
 8011174:	d0a00a17 	ldw	r2,-32728(gp)
 8011178:	1007883a 	mov	r3,r2
 801117c:	e0bffd17 	ldw	r2,-12(fp)
 8011180:	18bfd92e 	bgeu	r3,r2,80110e8 <__alt_data_end+0xfc0110e8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8011184:	0005883a 	mov	r2,zero
}
 8011188:	e6ffff04 	addi	sp,fp,-4
 801118c:	dfc00217 	ldw	ra,8(sp)
 8011190:	df000117 	ldw	fp,4(sp)
 8011194:	dc000017 	ldw	r16,0(sp)
 8011198:	dec00304 	addi	sp,sp,12
 801119c:	f800283a 	ret

080111a0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 80111a0:	defff604 	addi	sp,sp,-40
 80111a4:	dfc00915 	stw	ra,36(sp)
 80111a8:	df000815 	stw	fp,32(sp)
 80111ac:	df000804 	addi	fp,sp,32
 80111b0:	e13ffd15 	stw	r4,-12(fp)
 80111b4:	e17ffe15 	stw	r5,-8(fp)
 80111b8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 80111bc:	00bfffc4 	movi	r2,-1
 80111c0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 80111c4:	00bffb44 	movi	r2,-19
 80111c8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 80111cc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 80111d0:	d1600804 	addi	r5,gp,-32736
 80111d4:	e13ffd17 	ldw	r4,-12(fp)
 80111d8:	80114c40 	call	80114c4 <alt_find_dev>
 80111dc:	e0bff815 	stw	r2,-32(fp)
 80111e0:	e0bff817 	ldw	r2,-32(fp)
 80111e4:	1000051e 	bne	r2,zero,80111fc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 80111e8:	e13ffd17 	ldw	r4,-12(fp)
 80111ec:	80115540 	call	8011554 <alt_find_file>
 80111f0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 80111f4:	00800044 	movi	r2,1
 80111f8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 80111fc:	e0bff817 	ldw	r2,-32(fp)
 8011200:	10002b26 	beq	r2,zero,80112b0 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8011204:	e13ff817 	ldw	r4,-32(fp)
 8011208:	801165c0 	call	801165c <alt_get_fd>
 801120c:	e0bff915 	stw	r2,-28(fp)
 8011210:	e0bff917 	ldw	r2,-28(fp)
 8011214:	1000030e 	bge	r2,zero,8011224 <open+0x84>
    {
      status = index;
 8011218:	e0bff917 	ldw	r2,-28(fp)
 801121c:	e0bffa15 	stw	r2,-24(fp)
 8011220:	00002506 	br	80112b8 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 8011224:	01400304 	movi	r5,12
 8011228:	e13ff917 	ldw	r4,-28(fp)
 801122c:	800ca640 	call	800ca64 <__mulsi3>
 8011230:	1007883a 	mov	r3,r2
 8011234:	00820074 	movhi	r2,2049
 8011238:	108bbd04 	addi	r2,r2,12020
 801123c:	1885883a 	add	r2,r3,r2
 8011240:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8011244:	e0fffe17 	ldw	r3,-8(fp)
 8011248:	00900034 	movhi	r2,16384
 801124c:	10bfffc4 	addi	r2,r2,-1
 8011250:	1886703a 	and	r3,r3,r2
 8011254:	e0bffc17 	ldw	r2,-16(fp)
 8011258:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 801125c:	e0bffb17 	ldw	r2,-20(fp)
 8011260:	1000051e 	bne	r2,zero,8011278 <open+0xd8>
 8011264:	e13ffc17 	ldw	r4,-16(fp)
 8011268:	80110b40 	call	80110b4 <alt_file_locked>
 801126c:	e0bffa15 	stw	r2,-24(fp)
 8011270:	e0bffa17 	ldw	r2,-24(fp)
 8011274:	10001016 	blt	r2,zero,80112b8 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8011278:	e0bff817 	ldw	r2,-32(fp)
 801127c:	10800317 	ldw	r2,12(r2)
 8011280:	10000826 	beq	r2,zero,80112a4 <open+0x104>
 8011284:	e0bff817 	ldw	r2,-32(fp)
 8011288:	10800317 	ldw	r2,12(r2)
 801128c:	e1ffff17 	ldw	r7,-4(fp)
 8011290:	e1bffe17 	ldw	r6,-8(fp)
 8011294:	e17ffd17 	ldw	r5,-12(fp)
 8011298:	e13ffc17 	ldw	r4,-16(fp)
 801129c:	103ee83a 	callr	r2
 80112a0:	00000106 	br	80112a8 <open+0x108>
 80112a4:	0005883a 	mov	r2,zero
 80112a8:	e0bffa15 	stw	r2,-24(fp)
 80112ac:	00000206 	br	80112b8 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 80112b0:	00bffb44 	movi	r2,-19
 80112b4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 80112b8:	e0bffa17 	ldw	r2,-24(fp)
 80112bc:	1000090e 	bge	r2,zero,80112e4 <open+0x144>
  {
    alt_release_fd (index);  
 80112c0:	e13ff917 	ldw	r4,-28(fp)
 80112c4:	800fa540 	call	800fa54 <alt_release_fd>
    ALT_ERRNO = -status;
 80112c8:	80110780 	call	8011078 <alt_get_errno>
 80112cc:	1007883a 	mov	r3,r2
 80112d0:	e0bffa17 	ldw	r2,-24(fp)
 80112d4:	0085c83a 	sub	r2,zero,r2
 80112d8:	18800015 	stw	r2,0(r3)
    return -1;
 80112dc:	00bfffc4 	movi	r2,-1
 80112e0:	00000106 	br	80112e8 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 80112e4:	e0bff917 	ldw	r2,-28(fp)
}
 80112e8:	e037883a 	mov	sp,fp
 80112ec:	dfc00117 	ldw	ra,4(sp)
 80112f0:	df000017 	ldw	fp,0(sp)
 80112f4:	dec00204 	addi	sp,sp,8
 80112f8:	f800283a 	ret

080112fc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 80112fc:	defffa04 	addi	sp,sp,-24
 8011300:	df000515 	stw	fp,20(sp)
 8011304:	df000504 	addi	fp,sp,20
 8011308:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801130c:	0005303a 	rdctl	r2,status
 8011310:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011314:	e0fffc17 	ldw	r3,-16(fp)
 8011318:	00bfff84 	movi	r2,-2
 801131c:	1884703a 	and	r2,r3,r2
 8011320:	1001703a 	wrctl	status,r2
  
  return context;
 8011324:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8011328:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 801132c:	e0bfff17 	ldw	r2,-4(fp)
 8011330:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8011334:	e0bffd17 	ldw	r2,-12(fp)
 8011338:	10800017 	ldw	r2,0(r2)
 801133c:	e0fffd17 	ldw	r3,-12(fp)
 8011340:	18c00117 	ldw	r3,4(r3)
 8011344:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8011348:	e0bffd17 	ldw	r2,-12(fp)
 801134c:	10800117 	ldw	r2,4(r2)
 8011350:	e0fffd17 	ldw	r3,-12(fp)
 8011354:	18c00017 	ldw	r3,0(r3)
 8011358:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 801135c:	e0bffd17 	ldw	r2,-12(fp)
 8011360:	e0fffd17 	ldw	r3,-12(fp)
 8011364:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8011368:	e0bffd17 	ldw	r2,-12(fp)
 801136c:	e0fffd17 	ldw	r3,-12(fp)
 8011370:	10c00015 	stw	r3,0(r2)
 8011374:	e0bffb17 	ldw	r2,-20(fp)
 8011378:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801137c:	e0bffe17 	ldw	r2,-8(fp)
 8011380:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8011384:	0001883a 	nop
 8011388:	e037883a 	mov	sp,fp
 801138c:	df000017 	ldw	fp,0(sp)
 8011390:	dec00104 	addi	sp,sp,4
 8011394:	f800283a 	ret

08011398 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8011398:	defffb04 	addi	sp,sp,-20
 801139c:	dfc00415 	stw	ra,16(sp)
 80113a0:	df000315 	stw	fp,12(sp)
 80113a4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 80113a8:	d0a00e17 	ldw	r2,-32712(gp)
 80113ac:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 80113b0:	d0a6d817 	ldw	r2,-25760(gp)
 80113b4:	10800044 	addi	r2,r2,1
 80113b8:	d0a6d815 	stw	r2,-25760(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 80113bc:	00002e06 	br	8011478 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 80113c0:	e0bffd17 	ldw	r2,-12(fp)
 80113c4:	10800017 	ldw	r2,0(r2)
 80113c8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 80113cc:	e0bffd17 	ldw	r2,-12(fp)
 80113d0:	10800403 	ldbu	r2,16(r2)
 80113d4:	10803fcc 	andi	r2,r2,255
 80113d8:	10000426 	beq	r2,zero,80113ec <alt_tick+0x54>
 80113dc:	d0a6d817 	ldw	r2,-25760(gp)
 80113e0:	1000021e 	bne	r2,zero,80113ec <alt_tick+0x54>
    {
      alarm->rollover = 0;
 80113e4:	e0bffd17 	ldw	r2,-12(fp)
 80113e8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 80113ec:	e0bffd17 	ldw	r2,-12(fp)
 80113f0:	10800217 	ldw	r2,8(r2)
 80113f4:	d0e6d817 	ldw	r3,-25760(gp)
 80113f8:	18801d36 	bltu	r3,r2,8011470 <alt_tick+0xd8>
 80113fc:	e0bffd17 	ldw	r2,-12(fp)
 8011400:	10800403 	ldbu	r2,16(r2)
 8011404:	10803fcc 	andi	r2,r2,255
 8011408:	1000191e 	bne	r2,zero,8011470 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 801140c:	e0bffd17 	ldw	r2,-12(fp)
 8011410:	10800317 	ldw	r2,12(r2)
 8011414:	e0fffd17 	ldw	r3,-12(fp)
 8011418:	18c00517 	ldw	r3,20(r3)
 801141c:	1809883a 	mov	r4,r3
 8011420:	103ee83a 	callr	r2
 8011424:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8011428:	e0bfff17 	ldw	r2,-4(fp)
 801142c:	1000031e 	bne	r2,zero,801143c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8011430:	e13ffd17 	ldw	r4,-12(fp)
 8011434:	80112fc0 	call	80112fc <alt_alarm_stop>
 8011438:	00000d06 	br	8011470 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 801143c:	e0bffd17 	ldw	r2,-12(fp)
 8011440:	10c00217 	ldw	r3,8(r2)
 8011444:	e0bfff17 	ldw	r2,-4(fp)
 8011448:	1887883a 	add	r3,r3,r2
 801144c:	e0bffd17 	ldw	r2,-12(fp)
 8011450:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8011454:	e0bffd17 	ldw	r2,-12(fp)
 8011458:	10c00217 	ldw	r3,8(r2)
 801145c:	d0a6d817 	ldw	r2,-25760(gp)
 8011460:	1880032e 	bgeu	r3,r2,8011470 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8011464:	e0bffd17 	ldw	r2,-12(fp)
 8011468:	00c00044 	movi	r3,1
 801146c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8011470:	e0bffe17 	ldw	r2,-8(fp)
 8011474:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8011478:	e0fffd17 	ldw	r3,-12(fp)
 801147c:	d0a00e04 	addi	r2,gp,-32712
 8011480:	18bfcf1e 	bne	r3,r2,80113c0 <__alt_data_end+0xfc0113c0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8011484:	0001883a 	nop
}
 8011488:	0001883a 	nop
 801148c:	e037883a 	mov	sp,fp
 8011490:	dfc00117 	ldw	ra,4(sp)
 8011494:	df000017 	ldw	fp,0(sp)
 8011498:	dec00204 	addi	sp,sp,8
 801149c:	f800283a 	ret

080114a0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 80114a0:	deffff04 	addi	sp,sp,-4
 80114a4:	df000015 	stw	fp,0(sp)
 80114a8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 80114ac:	000170fa 	wrctl	ienable,zero
}
 80114b0:	0001883a 	nop
 80114b4:	e037883a 	mov	sp,fp
 80114b8:	df000017 	ldw	fp,0(sp)
 80114bc:	dec00104 	addi	sp,sp,4
 80114c0:	f800283a 	ret

080114c4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 80114c4:	defffa04 	addi	sp,sp,-24
 80114c8:	dfc00515 	stw	ra,20(sp)
 80114cc:	df000415 	stw	fp,16(sp)
 80114d0:	df000404 	addi	fp,sp,16
 80114d4:	e13ffe15 	stw	r4,-8(fp)
 80114d8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 80114dc:	e0bfff17 	ldw	r2,-4(fp)
 80114e0:	10800017 	ldw	r2,0(r2)
 80114e4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 80114e8:	e13ffe17 	ldw	r4,-8(fp)
 80114ec:	80025300 	call	8002530 <strlen>
 80114f0:	10800044 	addi	r2,r2,1
 80114f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 80114f8:	00000d06 	br	8011530 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 80114fc:	e0bffc17 	ldw	r2,-16(fp)
 8011500:	10800217 	ldw	r2,8(r2)
 8011504:	e0fffd17 	ldw	r3,-12(fp)
 8011508:	180d883a 	mov	r6,r3
 801150c:	e17ffe17 	ldw	r5,-8(fp)
 8011510:	1009883a 	mov	r4,r2
 8011514:	80118080 	call	8011808 <memcmp>
 8011518:	1000021e 	bne	r2,zero,8011524 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 801151c:	e0bffc17 	ldw	r2,-16(fp)
 8011520:	00000706 	br	8011540 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8011524:	e0bffc17 	ldw	r2,-16(fp)
 8011528:	10800017 	ldw	r2,0(r2)
 801152c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8011530:	e0fffc17 	ldw	r3,-16(fp)
 8011534:	e0bfff17 	ldw	r2,-4(fp)
 8011538:	18bff01e 	bne	r3,r2,80114fc <__alt_data_end+0xfc0114fc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 801153c:	0005883a 	mov	r2,zero
}
 8011540:	e037883a 	mov	sp,fp
 8011544:	dfc00117 	ldw	ra,4(sp)
 8011548:	df000017 	ldw	fp,0(sp)
 801154c:	dec00204 	addi	sp,sp,8
 8011550:	f800283a 	ret

08011554 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8011554:	defffb04 	addi	sp,sp,-20
 8011558:	dfc00415 	stw	ra,16(sp)
 801155c:	df000315 	stw	fp,12(sp)
 8011560:	df000304 	addi	fp,sp,12
 8011564:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8011568:	d0a00617 	ldw	r2,-32744(gp)
 801156c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8011570:	00003106 	br	8011638 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 8011574:	e0bffd17 	ldw	r2,-12(fp)
 8011578:	10800217 	ldw	r2,8(r2)
 801157c:	1009883a 	mov	r4,r2
 8011580:	80025300 	call	8002530 <strlen>
 8011584:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8011588:	e0bffd17 	ldw	r2,-12(fp)
 801158c:	10c00217 	ldw	r3,8(r2)
 8011590:	e0bffe17 	ldw	r2,-8(fp)
 8011594:	10bfffc4 	addi	r2,r2,-1
 8011598:	1885883a 	add	r2,r3,r2
 801159c:	10800003 	ldbu	r2,0(r2)
 80115a0:	10803fcc 	andi	r2,r2,255
 80115a4:	1080201c 	xori	r2,r2,128
 80115a8:	10bfe004 	addi	r2,r2,-128
 80115ac:	10800bd8 	cmpnei	r2,r2,47
 80115b0:	1000031e 	bne	r2,zero,80115c0 <alt_find_file+0x6c>
    {
      len -= 1;
 80115b4:	e0bffe17 	ldw	r2,-8(fp)
 80115b8:	10bfffc4 	addi	r2,r2,-1
 80115bc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 80115c0:	e0bffe17 	ldw	r2,-8(fp)
 80115c4:	e0ffff17 	ldw	r3,-4(fp)
 80115c8:	1885883a 	add	r2,r3,r2
 80115cc:	10800003 	ldbu	r2,0(r2)
 80115d0:	10803fcc 	andi	r2,r2,255
 80115d4:	1080201c 	xori	r2,r2,128
 80115d8:	10bfe004 	addi	r2,r2,-128
 80115dc:	10800be0 	cmpeqi	r2,r2,47
 80115e0:	1000081e 	bne	r2,zero,8011604 <alt_find_file+0xb0>
 80115e4:	e0bffe17 	ldw	r2,-8(fp)
 80115e8:	e0ffff17 	ldw	r3,-4(fp)
 80115ec:	1885883a 	add	r2,r3,r2
 80115f0:	10800003 	ldbu	r2,0(r2)
 80115f4:	10803fcc 	andi	r2,r2,255
 80115f8:	1080201c 	xori	r2,r2,128
 80115fc:	10bfe004 	addi	r2,r2,-128
 8011600:	10000a1e 	bne	r2,zero,801162c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 8011604:	e0bffd17 	ldw	r2,-12(fp)
 8011608:	10800217 	ldw	r2,8(r2)
 801160c:	e0fffe17 	ldw	r3,-8(fp)
 8011610:	180d883a 	mov	r6,r3
 8011614:	e17fff17 	ldw	r5,-4(fp)
 8011618:	1009883a 	mov	r4,r2
 801161c:	80118080 	call	8011808 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8011620:	1000021e 	bne	r2,zero,801162c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8011624:	e0bffd17 	ldw	r2,-12(fp)
 8011628:	00000706 	br	8011648 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 801162c:	e0bffd17 	ldw	r2,-12(fp)
 8011630:	10800017 	ldw	r2,0(r2)
 8011634:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8011638:	e0fffd17 	ldw	r3,-12(fp)
 801163c:	d0a00604 	addi	r2,gp,-32744
 8011640:	18bfcc1e 	bne	r3,r2,8011574 <__alt_data_end+0xfc011574>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8011644:	0005883a 	mov	r2,zero
}
 8011648:	e037883a 	mov	sp,fp
 801164c:	dfc00117 	ldw	ra,4(sp)
 8011650:	df000017 	ldw	fp,0(sp)
 8011654:	dec00204 	addi	sp,sp,8
 8011658:	f800283a 	ret

0801165c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 801165c:	defffa04 	addi	sp,sp,-24
 8011660:	dfc00515 	stw	ra,20(sp)
 8011664:	df000415 	stw	fp,16(sp)
 8011668:	dc000315 	stw	r16,12(sp)
 801166c:	df000404 	addi	fp,sp,16
 8011670:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 8011674:	00bffa04 	movi	r2,-24
 8011678:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 801167c:	e03ffc15 	stw	zero,-16(fp)
 8011680:	00001d06 	br	80116f8 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 8011684:	04020074 	movhi	r16,2049
 8011688:	840bbd04 	addi	r16,r16,12020
 801168c:	e0bffc17 	ldw	r2,-16(fp)
 8011690:	01400304 	movi	r5,12
 8011694:	1009883a 	mov	r4,r2
 8011698:	800ca640 	call	800ca64 <__mulsi3>
 801169c:	8085883a 	add	r2,r16,r2
 80116a0:	10800017 	ldw	r2,0(r2)
 80116a4:	1000111e 	bne	r2,zero,80116ec <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 80116a8:	04020074 	movhi	r16,2049
 80116ac:	840bbd04 	addi	r16,r16,12020
 80116b0:	e0bffc17 	ldw	r2,-16(fp)
 80116b4:	01400304 	movi	r5,12
 80116b8:	1009883a 	mov	r4,r2
 80116bc:	800ca640 	call	800ca64 <__mulsi3>
 80116c0:	8085883a 	add	r2,r16,r2
 80116c4:	e0fffe17 	ldw	r3,-8(fp)
 80116c8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 80116cc:	d0e00a17 	ldw	r3,-32728(gp)
 80116d0:	e0bffc17 	ldw	r2,-16(fp)
 80116d4:	1880020e 	bge	r3,r2,80116e0 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 80116d8:	e0bffc17 	ldw	r2,-16(fp)
 80116dc:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
 80116e0:	e0bffc17 	ldw	r2,-16(fp)
 80116e4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 80116e8:	00000606 	br	8011704 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 80116ec:	e0bffc17 	ldw	r2,-16(fp)
 80116f0:	10800044 	addi	r2,r2,1
 80116f4:	e0bffc15 	stw	r2,-16(fp)
 80116f8:	e0bffc17 	ldw	r2,-16(fp)
 80116fc:	10800810 	cmplti	r2,r2,32
 8011700:	103fe01e 	bne	r2,zero,8011684 <__alt_data_end+0xfc011684>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8011704:	e0bffd17 	ldw	r2,-12(fp)
}
 8011708:	e6ffff04 	addi	sp,fp,-4
 801170c:	dfc00217 	ldw	ra,8(sp)
 8011710:	df000117 	ldw	fp,4(sp)
 8011714:	dc000017 	ldw	r16,0(sp)
 8011718:	dec00304 	addi	sp,sp,12
 801171c:	f800283a 	ret

08011720 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8011720:	defffe04 	addi	sp,sp,-8
 8011724:	df000115 	stw	fp,4(sp)
 8011728:	df000104 	addi	fp,sp,4
 801172c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 8011730:	e0bfff17 	ldw	r2,-4(fp)
 8011734:	10bffe84 	addi	r2,r2,-6
 8011738:	10c00428 	cmpgeui	r3,r2,16
 801173c:	18001a1e 	bne	r3,zero,80117a8 <alt_exception_cause_generated_bad_addr+0x88>
 8011740:	100690ba 	slli	r3,r2,2
 8011744:	00820074 	movhi	r2,2049
 8011748:	1085d604 	addi	r2,r2,5976
 801174c:	1885883a 	add	r2,r3,r2
 8011750:	10800017 	ldw	r2,0(r2)
 8011754:	1000683a 	jmp	r2
 8011758:	08011798 	cmpnei	zero,at,1118
 801175c:	08011798 	cmpnei	zero,at,1118
 8011760:	080117a8 	cmpgeui	zero,at,1118
 8011764:	080117a8 	cmpgeui	zero,at,1118
 8011768:	080117a8 	cmpgeui	zero,at,1118
 801176c:	08011798 	cmpnei	zero,at,1118
 8011770:	080117a0 	cmpeqi	zero,at,1118
 8011774:	080117a8 	cmpgeui	zero,at,1118
 8011778:	08011798 	cmpnei	zero,at,1118
 801177c:	08011798 	cmpnei	zero,at,1118
 8011780:	080117a8 	cmpgeui	zero,at,1118
 8011784:	08011798 	cmpnei	zero,at,1118
 8011788:	080117a0 	cmpeqi	zero,at,1118
 801178c:	080117a8 	cmpgeui	zero,at,1118
 8011790:	080117a8 	cmpgeui	zero,at,1118
 8011794:	08011798 	cmpnei	zero,at,1118
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 8011798:	00800044 	movi	r2,1
 801179c:	00000306 	br	80117ac <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 80117a0:	0005883a 	mov	r2,zero
 80117a4:	00000106 	br	80117ac <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 80117a8:	0005883a 	mov	r2,zero
  }
}
 80117ac:	e037883a 	mov	sp,fp
 80117b0:	df000017 	ldw	fp,0(sp)
 80117b4:	dec00104 	addi	sp,sp,4
 80117b8:	f800283a 	ret

080117bc <atexit>:
 80117bc:	200b883a 	mov	r5,r4
 80117c0:	000f883a 	mov	r7,zero
 80117c4:	000d883a 	mov	r6,zero
 80117c8:	0009883a 	mov	r4,zero
 80117cc:	80118841 	jmpi	8011884 <__register_exitproc>

080117d0 <exit>:
 80117d0:	defffe04 	addi	sp,sp,-8
 80117d4:	000b883a 	mov	r5,zero
 80117d8:	dc000015 	stw	r16,0(sp)
 80117dc:	dfc00115 	stw	ra,4(sp)
 80117e0:	2021883a 	mov	r16,r4
 80117e4:	801199c0 	call	801199c <__call_exitprocs>
 80117e8:	00820074 	movhi	r2,2049
 80117ec:	10903504 	addi	r2,r2,16596
 80117f0:	11000017 	ldw	r4,0(r2)
 80117f4:	20800f17 	ldw	r2,60(r4)
 80117f8:	10000126 	beq	r2,zero,8011800 <exit+0x30>
 80117fc:	103ee83a 	callr	r2
 8011800:	8009883a 	mov	r4,r16
 8011804:	8011b1c0 	call	8011b1c <_exit>

08011808 <memcmp>:
 8011808:	01c000c4 	movi	r7,3
 801180c:	3980192e 	bgeu	r7,r6,8011874 <memcmp+0x6c>
 8011810:	2144b03a 	or	r2,r4,r5
 8011814:	11c4703a 	and	r2,r2,r7
 8011818:	10000f26 	beq	r2,zero,8011858 <memcmp+0x50>
 801181c:	20800003 	ldbu	r2,0(r4)
 8011820:	28c00003 	ldbu	r3,0(r5)
 8011824:	10c0151e 	bne	r2,r3,801187c <memcmp+0x74>
 8011828:	31bfff84 	addi	r6,r6,-2
 801182c:	01ffffc4 	movi	r7,-1
 8011830:	00000406 	br	8011844 <memcmp+0x3c>
 8011834:	20800003 	ldbu	r2,0(r4)
 8011838:	28c00003 	ldbu	r3,0(r5)
 801183c:	31bfffc4 	addi	r6,r6,-1
 8011840:	10c00e1e 	bne	r2,r3,801187c <memcmp+0x74>
 8011844:	21000044 	addi	r4,r4,1
 8011848:	29400044 	addi	r5,r5,1
 801184c:	31fff91e 	bne	r6,r7,8011834 <__alt_data_end+0xfc011834>
 8011850:	0005883a 	mov	r2,zero
 8011854:	f800283a 	ret
 8011858:	20c00017 	ldw	r3,0(r4)
 801185c:	28800017 	ldw	r2,0(r5)
 8011860:	18bfee1e 	bne	r3,r2,801181c <__alt_data_end+0xfc01181c>
 8011864:	31bfff04 	addi	r6,r6,-4
 8011868:	21000104 	addi	r4,r4,4
 801186c:	29400104 	addi	r5,r5,4
 8011870:	39bff936 	bltu	r7,r6,8011858 <__alt_data_end+0xfc011858>
 8011874:	303fe91e 	bne	r6,zero,801181c <__alt_data_end+0xfc01181c>
 8011878:	003ff506 	br	8011850 <__alt_data_end+0xfc011850>
 801187c:	10c5c83a 	sub	r2,r2,r3
 8011880:	f800283a 	ret

08011884 <__register_exitproc>:
 8011884:	defffa04 	addi	sp,sp,-24
 8011888:	dc000315 	stw	r16,12(sp)
 801188c:	04020074 	movhi	r16,2049
 8011890:	84103504 	addi	r16,r16,16596
 8011894:	80c00017 	ldw	r3,0(r16)
 8011898:	dc400415 	stw	r17,16(sp)
 801189c:	dfc00515 	stw	ra,20(sp)
 80118a0:	18805217 	ldw	r2,328(r3)
 80118a4:	2023883a 	mov	r17,r4
 80118a8:	10003726 	beq	r2,zero,8011988 <__register_exitproc+0x104>
 80118ac:	10c00117 	ldw	r3,4(r2)
 80118b0:	010007c4 	movi	r4,31
 80118b4:	20c00e16 	blt	r4,r3,80118f0 <__register_exitproc+0x6c>
 80118b8:	1a000044 	addi	r8,r3,1
 80118bc:	8800221e 	bne	r17,zero,8011948 <__register_exitproc+0xc4>
 80118c0:	18c00084 	addi	r3,r3,2
 80118c4:	18c7883a 	add	r3,r3,r3
 80118c8:	18c7883a 	add	r3,r3,r3
 80118cc:	12000115 	stw	r8,4(r2)
 80118d0:	10c7883a 	add	r3,r2,r3
 80118d4:	19400015 	stw	r5,0(r3)
 80118d8:	0005883a 	mov	r2,zero
 80118dc:	dfc00517 	ldw	ra,20(sp)
 80118e0:	dc400417 	ldw	r17,16(sp)
 80118e4:	dc000317 	ldw	r16,12(sp)
 80118e8:	dec00604 	addi	sp,sp,24
 80118ec:	f800283a 	ret
 80118f0:	00800034 	movhi	r2,0
 80118f4:	10800004 	addi	r2,r2,0
 80118f8:	10002626 	beq	r2,zero,8011994 <__register_exitproc+0x110>
 80118fc:	01006404 	movi	r4,400
 8011900:	d9400015 	stw	r5,0(sp)
 8011904:	d9800115 	stw	r6,4(sp)
 8011908:	d9c00215 	stw	r7,8(sp)
 801190c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 8011910:	d9400017 	ldw	r5,0(sp)
 8011914:	d9800117 	ldw	r6,4(sp)
 8011918:	d9c00217 	ldw	r7,8(sp)
 801191c:	10001d26 	beq	r2,zero,8011994 <__register_exitproc+0x110>
 8011920:	81000017 	ldw	r4,0(r16)
 8011924:	10000115 	stw	zero,4(r2)
 8011928:	02000044 	movi	r8,1
 801192c:	22405217 	ldw	r9,328(r4)
 8011930:	0007883a 	mov	r3,zero
 8011934:	12400015 	stw	r9,0(r2)
 8011938:	20805215 	stw	r2,328(r4)
 801193c:	10006215 	stw	zero,392(r2)
 8011940:	10006315 	stw	zero,396(r2)
 8011944:	883fde26 	beq	r17,zero,80118c0 <__alt_data_end+0xfc0118c0>
 8011948:	18c9883a 	add	r4,r3,r3
 801194c:	2109883a 	add	r4,r4,r4
 8011950:	1109883a 	add	r4,r2,r4
 8011954:	21802215 	stw	r6,136(r4)
 8011958:	01800044 	movi	r6,1
 801195c:	12406217 	ldw	r9,392(r2)
 8011960:	30cc983a 	sll	r6,r6,r3
 8011964:	4992b03a 	or	r9,r9,r6
 8011968:	12406215 	stw	r9,392(r2)
 801196c:	21c04215 	stw	r7,264(r4)
 8011970:	01000084 	movi	r4,2
 8011974:	893fd21e 	bne	r17,r4,80118c0 <__alt_data_end+0xfc0118c0>
 8011978:	11006317 	ldw	r4,396(r2)
 801197c:	218cb03a 	or	r6,r4,r6
 8011980:	11806315 	stw	r6,396(r2)
 8011984:	003fce06 	br	80118c0 <__alt_data_end+0xfc0118c0>
 8011988:	18805304 	addi	r2,r3,332
 801198c:	18805215 	stw	r2,328(r3)
 8011990:	003fc606 	br	80118ac <__alt_data_end+0xfc0118ac>
 8011994:	00bfffc4 	movi	r2,-1
 8011998:	003fd006 	br	80118dc <__alt_data_end+0xfc0118dc>

0801199c <__call_exitprocs>:
 801199c:	defff504 	addi	sp,sp,-44
 80119a0:	df000915 	stw	fp,36(sp)
 80119a4:	dd400615 	stw	r21,24(sp)
 80119a8:	dc800315 	stw	r18,12(sp)
 80119ac:	dfc00a15 	stw	ra,40(sp)
 80119b0:	ddc00815 	stw	r23,32(sp)
 80119b4:	dd800715 	stw	r22,28(sp)
 80119b8:	dd000515 	stw	r20,20(sp)
 80119bc:	dcc00415 	stw	r19,16(sp)
 80119c0:	dc400215 	stw	r17,8(sp)
 80119c4:	dc000115 	stw	r16,4(sp)
 80119c8:	d9000015 	stw	r4,0(sp)
 80119cc:	2839883a 	mov	fp,r5
 80119d0:	04800044 	movi	r18,1
 80119d4:	057fffc4 	movi	r21,-1
 80119d8:	00820074 	movhi	r2,2049
 80119dc:	10903504 	addi	r2,r2,16596
 80119e0:	12000017 	ldw	r8,0(r2)
 80119e4:	45005217 	ldw	r20,328(r8)
 80119e8:	44c05204 	addi	r19,r8,328
 80119ec:	a0001c26 	beq	r20,zero,8011a60 <__call_exitprocs+0xc4>
 80119f0:	a0800117 	ldw	r2,4(r20)
 80119f4:	15ffffc4 	addi	r23,r2,-1
 80119f8:	b8000d16 	blt	r23,zero,8011a30 <__call_exitprocs+0x94>
 80119fc:	14000044 	addi	r16,r2,1
 8011a00:	8421883a 	add	r16,r16,r16
 8011a04:	8421883a 	add	r16,r16,r16
 8011a08:	84402004 	addi	r17,r16,128
 8011a0c:	a463883a 	add	r17,r20,r17
 8011a10:	a421883a 	add	r16,r20,r16
 8011a14:	e0001e26 	beq	fp,zero,8011a90 <__call_exitprocs+0xf4>
 8011a18:	80804017 	ldw	r2,256(r16)
 8011a1c:	e0801c26 	beq	fp,r2,8011a90 <__call_exitprocs+0xf4>
 8011a20:	bdffffc4 	addi	r23,r23,-1
 8011a24:	843fff04 	addi	r16,r16,-4
 8011a28:	8c7fff04 	addi	r17,r17,-4
 8011a2c:	bd7ff91e 	bne	r23,r21,8011a14 <__alt_data_end+0xfc011a14>
 8011a30:	00800034 	movhi	r2,0
 8011a34:	10800004 	addi	r2,r2,0
 8011a38:	10000926 	beq	r2,zero,8011a60 <__call_exitprocs+0xc4>
 8011a3c:	a0800117 	ldw	r2,4(r20)
 8011a40:	1000301e 	bne	r2,zero,8011b04 <__call_exitprocs+0x168>
 8011a44:	a0800017 	ldw	r2,0(r20)
 8011a48:	10003226 	beq	r2,zero,8011b14 <__call_exitprocs+0x178>
 8011a4c:	a009883a 	mov	r4,r20
 8011a50:	98800015 	stw	r2,0(r19)
 8011a54:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 8011a58:	9d000017 	ldw	r20,0(r19)
 8011a5c:	a03fe41e 	bne	r20,zero,80119f0 <__alt_data_end+0xfc0119f0>
 8011a60:	dfc00a17 	ldw	ra,40(sp)
 8011a64:	df000917 	ldw	fp,36(sp)
 8011a68:	ddc00817 	ldw	r23,32(sp)
 8011a6c:	dd800717 	ldw	r22,28(sp)
 8011a70:	dd400617 	ldw	r21,24(sp)
 8011a74:	dd000517 	ldw	r20,20(sp)
 8011a78:	dcc00417 	ldw	r19,16(sp)
 8011a7c:	dc800317 	ldw	r18,12(sp)
 8011a80:	dc400217 	ldw	r17,8(sp)
 8011a84:	dc000117 	ldw	r16,4(sp)
 8011a88:	dec00b04 	addi	sp,sp,44
 8011a8c:	f800283a 	ret
 8011a90:	a0800117 	ldw	r2,4(r20)
 8011a94:	80c00017 	ldw	r3,0(r16)
 8011a98:	10bfffc4 	addi	r2,r2,-1
 8011a9c:	15c01426 	beq	r2,r23,8011af0 <__call_exitprocs+0x154>
 8011aa0:	80000015 	stw	zero,0(r16)
 8011aa4:	183fde26 	beq	r3,zero,8011a20 <__alt_data_end+0xfc011a20>
 8011aa8:	95c8983a 	sll	r4,r18,r23
 8011aac:	a0806217 	ldw	r2,392(r20)
 8011ab0:	a5800117 	ldw	r22,4(r20)
 8011ab4:	2084703a 	and	r2,r4,r2
 8011ab8:	10000b26 	beq	r2,zero,8011ae8 <__call_exitprocs+0x14c>
 8011abc:	a0806317 	ldw	r2,396(r20)
 8011ac0:	2088703a 	and	r4,r4,r2
 8011ac4:	20000c1e 	bne	r4,zero,8011af8 <__call_exitprocs+0x15c>
 8011ac8:	89400017 	ldw	r5,0(r17)
 8011acc:	d9000017 	ldw	r4,0(sp)
 8011ad0:	183ee83a 	callr	r3
 8011ad4:	a0800117 	ldw	r2,4(r20)
 8011ad8:	15bfbf1e 	bne	r2,r22,80119d8 <__alt_data_end+0xfc0119d8>
 8011adc:	98800017 	ldw	r2,0(r19)
 8011ae0:	153fcf26 	beq	r2,r20,8011a20 <__alt_data_end+0xfc011a20>
 8011ae4:	003fbc06 	br	80119d8 <__alt_data_end+0xfc0119d8>
 8011ae8:	183ee83a 	callr	r3
 8011aec:	003ff906 	br	8011ad4 <__alt_data_end+0xfc011ad4>
 8011af0:	a5c00115 	stw	r23,4(r20)
 8011af4:	003feb06 	br	8011aa4 <__alt_data_end+0xfc011aa4>
 8011af8:	89000017 	ldw	r4,0(r17)
 8011afc:	183ee83a 	callr	r3
 8011b00:	003ff406 	br	8011ad4 <__alt_data_end+0xfc011ad4>
 8011b04:	a0800017 	ldw	r2,0(r20)
 8011b08:	a027883a 	mov	r19,r20
 8011b0c:	1029883a 	mov	r20,r2
 8011b10:	003fb606 	br	80119ec <__alt_data_end+0xfc0119ec>
 8011b14:	0005883a 	mov	r2,zero
 8011b18:	003ffb06 	br	8011b08 <__alt_data_end+0xfc011b08>

08011b1c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8011b1c:	defffd04 	addi	sp,sp,-12
 8011b20:	df000215 	stw	fp,8(sp)
 8011b24:	df000204 	addi	fp,sp,8
 8011b28:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8011b2c:	0001883a 	nop
 8011b30:	e0bfff17 	ldw	r2,-4(fp)
 8011b34:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8011b38:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8011b3c:	10000226 	beq	r2,zero,8011b48 <_exit+0x2c>
    ALT_SIM_FAIL();
 8011b40:	002af070 	cmpltui	zero,zero,43969
 8011b44:	00000106 	br	8011b4c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8011b48:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8011b4c:	003fff06 	br	8011b4c <__alt_data_end+0xfc011b4c>
